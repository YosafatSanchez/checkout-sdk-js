{"version":3,"sources":["webpack://checkoutKit/webpack/bootstrap","webpack://checkoutKit/external \"tslib\"","webpack://checkoutKit/external \"@bigcommerce/data-store\"","webpack://checkoutKit/external \"lodash\"","webpack://checkoutKit/external \"rxjs\"","webpack://checkoutKit/./src/shipping/consignment-actions.ts","webpack://checkoutKit/./src/customer/customer-strategy-actions.ts","webpack://checkoutKit/./src/payment/payment-strategy-actions.ts","webpack://checkoutKit/./src/common/error/errors/missing-data-error.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-actions.ts","webpack://checkoutKit/./src/checkout/checkout-actions.ts","webpack://checkoutKit/./src/common/error/errors/standard-error.ts","webpack://checkoutKit/./src/common/utility/set-prototype-of.ts","webpack://checkoutKit/./src/coupon/coupon-actions.ts","webpack://checkoutKit/./src/billing/billing-address-actions.ts","webpack://checkoutKit/./src/order/order-actions.ts","webpack://checkoutKit/./src/payment/payment-method-actions.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-actions.ts","webpack://checkoutKit/./src/coupon/gift-certificate-actions.ts","webpack://checkoutKit/./src/payment/instrument/instrument-actions.ts","webpack://checkoutKit/external \"rxjs/operators\"","webpack://checkoutKit/./src/embedded-checkout/embedded-checkout-events.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-actions.ts","webpack://checkoutKit/./src/common/error/errors/request-error.ts","webpack://checkoutKit/./src/config/config-actions.ts","webpack://checkoutKit/./src/geography/country-actions.ts","webpack://checkoutKit/./src/shipping/shipping-country-actions.ts","webpack://checkoutKit/external \"@bigcommerce/request-sender\"","webpack://checkoutKit/./src/payment/payment-status-types.ts","webpack://checkoutKit/./src/common/http-request/content-type.ts","webpack://checkoutKit/external \"@bigcommerce/script-loader\"","webpack://checkoutKit/./src/payment/payment-actions.ts","webpack://checkoutKit/./src/common/error/errors/invalid-argument-error.ts","webpack://checkoutKit/./src/payment/payment-method-types.ts","webpack://checkoutKit/./src/embedded-checkout/is-iframe-event.ts","webpack://checkoutKit/./src/payment/errors/payment-method-invalid-error.ts","webpack://checkoutKit/./src/common/utility/is-equal.ts","webpack://checkoutKit/external \"@bigcommerce/form-poster\"","webpack://checkoutKit/external \"local-storage-fallback\"","webpack://checkoutKit/./src/embedded-checkout/iframe-event-poster.ts","webpack://checkoutKit/./src/customer/customer-actions.ts","webpack://checkoutKit/./src/common/error/error-actions.ts","webpack://checkoutKit/./src/payment/payment-method-action-creator.ts","webpack://checkoutKit/./src/payment/payment-method-request-sender.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-content/embedded-content-events.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-event-listener.ts","webpack://checkoutKit/./src/checkout/checkout-default-includes.ts","webpack://checkoutKit/./src/cart/amount-transformer.ts","webpack://checkoutKit/./src/cart/map-to-internal-line-items.ts","webpack://checkoutKit/./src/cart/map-gift-certificate-to-internal-line-item.ts","webpack://checkoutKit/./src/common/http-request/internal-api-headers.ts","webpack://checkoutKit/./src/common/utility/cache-key-resolver.ts","webpack://checkoutKit/./src/common/utility/bind-decorator.ts","webpack://checkoutKit/./src/checkout/checkout-params.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-sdk-creator.ts","webpack://checkoutKit/./src/cart/map-to-internal-line-item.ts","webpack://checkoutKit/external \"iframe-resizer\"","webpack://checkoutKit/./src/common/utility/is-private.ts","webpack://checkoutKit/./src/common/error/throw-error-action.ts","webpack://checkoutKit/./src/common/error/errors/not-initialized-error.ts","webpack://checkoutKit/./src/common/url/parse-url.ts","webpack://checkoutKit/./src/common/action/cachable-action-decorator.ts","webpack://checkoutKit/./src/common/action/is-action-options.ts","webpack://checkoutKit/./src/common/action/cache-action.ts","webpack://checkoutKit/./src/common/utility/omit-deep.ts","webpack://checkoutKit/./src/checkout/checkout-action-creator.ts","webpack://checkoutKit/./src/shipping/consignment-action-creator.ts","webpack://checkoutKit/./src/shipping/consignment-request-sender.ts","webpack://checkoutKit/./src/payment/strategies/masterpass/get-callback-url.ts","webpack://checkoutKit/./src/shipping/map-to-internal-shipping-option.ts","webpack://checkoutKit/./src/common/error/errors/unrecoverable-error.ts","webpack://checkoutKit/./src/common/error/errors/map-from-internal-error-response.ts","webpack://checkoutKit/./src/common/error/errors/map-from-payment-error-response.ts","webpack://checkoutKit/./src/common/error/request-error-factory.ts","webpack://checkoutKit/./src/common/error/errors/map-from-storefront-error-response.ts","webpack://checkoutKit/./src/common/error/clear-error-reducer.ts","webpack://checkoutKit/./src/billing/billing-address-reducer.ts","webpack://checkoutKit/./src/cart/cart-reducer.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-reducer.ts","webpack://checkoutKit/./src/config/config-reducer.ts","webpack://checkoutKit/./src/coupon/coupon-reducer.ts","webpack://checkoutKit/./src/coupon/gift-certificate-reducer.ts","webpack://checkoutKit/./src/customer/customer-reducer.ts","webpack://checkoutKit/./src/customer/customer-strategy-state.ts","webpack://checkoutKit/./src/customer/customer-strategy-reducer.ts","webpack://checkoutKit/./src/geography/country-reducer.ts","webpack://checkoutKit/./src/order/order-reducer.ts","webpack://checkoutKit/./src/payment/payment-reducer.ts","webpack://checkoutKit/./src/payment/payment-method-reducer.ts","webpack://checkoutKit/./src/common/utility/merge-or-push.ts","webpack://checkoutKit/./src/payment/payment-strategy-state.ts","webpack://checkoutKit/./src/payment/payment-strategy-reducer.ts","webpack://checkoutKit/./src/payment/instrument/instrument-reducer.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-reducer.ts","webpack://checkoutKit/./src/shipping/consignment-reducer.ts","webpack://checkoutKit/./src/shipping/shipping-country-reducer.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-state.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-reducer.ts","webpack://checkoutKit/./src/checkout/checkout-reducer.ts","webpack://checkoutKit/./src/billing/billing-address-selector.ts","webpack://checkoutKit/./src/cart/cart-selector.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-selector.ts","webpack://checkoutKit/./src/common/utility/create-freeze-proxy.ts","webpack://checkoutKit/./src/config/config-selector.ts","webpack://checkoutKit/./src/coupon/coupon-selector.ts","webpack://checkoutKit/./src/coupon/gift-certificate-selector.ts","webpack://checkoutKit/./src/customer/customer-selector.ts","webpack://checkoutKit/./src/customer/customer-strategy-selector.ts","webpack://checkoutKit/./src/form/form-selector.ts","webpack://checkoutKit/./src/geography/country-selector.ts","webpack://checkoutKit/./src/order/order-selector.ts","webpack://checkoutKit/./src/payment/payment-selector.ts","webpack://checkoutKit/./src/payment/payment-method-selector.ts","webpack://checkoutKit/./src/payment/payment-strategy-selector.ts","webpack://checkoutKit/./src/payment/instrument/instrument-selector.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-selector.ts","webpack://checkoutKit/./src/shipping/shipping-address-selector.ts","webpack://checkoutKit/./src/shipping/shipping-country-selector.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-selector.ts","webpack://checkoutKit/./src/address/is-address-equal.ts","webpack://checkoutKit/./src/shipping/consignment-selector.ts","webpack://checkoutKit/./src/checkout/checkout-selector.ts","webpack://checkoutKit/./src/checkout/create-internal-checkout-selectors.ts","webpack://checkoutKit/./src/checkout/create-checkout-store.ts","webpack://checkoutKit/./src/checkout/create-action-transformer.ts","webpack://checkoutKit/./src/common/error/create-request-error-factory.ts","webpack://checkoutKit/./src/checkout/create-checkout-store-reducer.ts","webpack://checkoutKit/./src/checkout/errors/checkout-not-available-error.ts","webpack://checkoutKit/./src/checkout/checkout-request-sender.ts","webpack://checkoutKit/./src/coupon/map-to-internal-coupon.ts","webpack://checkoutKit/./src/address/map-to-internal-address.ts","webpack://checkoutKit/./src/billing/is-billing-address-like.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-error-selector.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-status-selector.ts","webpack://checkoutKit/./src/checkout-buttons/create-checkout-button-selectors.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-initializer.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/checkout-button-method-type.ts","webpack://checkoutKit/./src/common/dom/is-element-id.ts","webpack://checkoutKit/./src/common/dom/set-unique-element-id.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-strategy-action-creator.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/braintree/braintree-paypal-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/googlepay/googlepay-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/masterpass/masterpass-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/paypal/paypal-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/create-checkout-button-initializer.ts","webpack://checkoutKit/./src/checkout-buttons/create-checkout-button-registry.ts","webpack://checkoutKit/./src/embedded-checkout/errors/not-embeddable-error.ts","webpack://checkoutKit/./src/common/storage/browser-storage.ts","webpack://checkoutKit/./src/embedded-checkout/errors/invalid-login-token-error.ts","webpack://checkoutKit/./src/embedded-checkout/embedded-checkout.ts","webpack://checkoutKit/./src/embedded-checkout/loading-indicator.ts","webpack://checkoutKit/./src/embedded-checkout/resizable-iframe-creator.ts","webpack://checkoutKit/./src/embedded-checkout/embed-checkout.ts","webpack://checkoutKit/external \"@bigcommerce/bigpay-client\"","webpack://checkoutKit/external \"messageformat\"","webpack://checkoutKit/./src/common/error/errors/timeout-error.ts","webpack://checkoutKit/./src/common/selector/selector-decorator.ts","webpack://checkoutKit/./src/common/http-request/join-includes.ts","webpack://checkoutKit/./src/config/config-action-creator.ts","webpack://checkoutKit/./src/config/config-request-sender.ts","webpack://checkoutKit/./src/billing/billing-address-action-creator.ts","webpack://checkoutKit/./src/billing/billing-address-request-sender.ts","webpack://checkoutKit/./src/common/registry/registry.ts","webpack://checkoutKit/./src/common/http-request/to-form-url-encoded.ts","webpack://checkoutKit/./src/payment/strategies/masterpass/masterpass-script-loader.ts","webpack://checkoutKit/./src/remote-checkout/errors/remote-checkout-synchronization-error.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-braintree-initializer.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-stripe-initializer.ts","webpack://checkoutKit/./src/customer/map-to-internal-customer.ts","webpack://checkoutKit/./src/coupon/map-to-internal-gift-certificate.ts","webpack://checkoutKit/./src/order/map-to-internal-order.ts","webpack://checkoutKit/./src/payment/strategies/paypal/paypal-script-loader.ts","webpack://checkoutKit/./src/common/error/error-action-creator.ts","webpack://checkoutKit/./src/common/utility/get-environment.ts","webpack://checkoutKit/./src/common/log/console-logger.ts","webpack://checkoutKit/./src/common/log/noop-logger.ts","webpack://checkoutKit/./src/common/log/get-default-logger.ts","webpack://checkoutKit/./src/common/log/create-logger.ts","webpack://checkoutKit/./src/coupon/coupon-action-creator.ts","webpack://checkoutKit/./src/coupon/coupon-request-sender.ts","webpack://checkoutKit/./src/coupon/gift-certificate-action-creator.ts","webpack://checkoutKit/./src/coupon/gift-certificate-request-sender.ts","webpack://checkoutKit/./src/customer/customer-strategy-action-creator.ts","webpack://checkoutKit/./src/payment/strategies/amazon-pay/amazon-pay-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-visacheckout-payment-processor.ts","webpack://checkoutKit/./src/payment/strategies/braintree/create-braintree-visacheckout-payment-processor.ts","webpack://checkoutKit/./src/payment/strategies/braintree/visacheckout-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/chasepay/chasepay-script-loader.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-request-sender.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-action-creator.ts","webpack://checkoutKit/./src/customer/customer-action-creator.ts","webpack://checkoutKit/./src/customer/customer-request-sender.ts","webpack://checkoutKit/./src/common/error/errors/not-implemented-error.ts","webpack://checkoutKit/./src/customer/strategies/amazon/amazon-pay-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/braintree/braintree-visacheckout-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/chasepay/chasepay-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/default/default-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/googlepay/googlepay-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/masterpass/masterpass-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/square/square-customer-strategy.ts","webpack://checkoutKit/./src/geography/country-action-creator.ts","webpack://checkoutKit/./src/geography/country-request-sender.ts","webpack://checkoutKit/./src/order/order-request-sender.ts","webpack://checkoutKit/./src/order/order-action-creator.ts","webpack://checkoutKit/./src/order/errors/order-finalization-not-required-error.ts","webpack://checkoutKit/./src/payment/payment-strategy-type.ts","webpack://checkoutKit/./src/payment/payment-strategy-action-creator.ts","webpack://checkoutKit/./src/cart/cart-comparator.ts","webpack://checkoutKit/./src/cart/errors/cart-changed-error.ts","webpack://checkoutKit/./src/checkout/checkout-validator.ts","webpack://checkoutKit/./src/payment/is-vaulted-instrument.ts","webpack://checkoutKit/./src/payment/payment-action-creator.ts","webpack://checkoutKit/./src/payment/payment-request-sender.ts","webpack://checkoutKit/./src/payment/payment-strategy-registry.ts","webpack://checkoutKit/./src/payment/errors/payment-argument-invalid-error.ts","webpack://checkoutKit/./src/payment/errors/payment-method-cancelled-error.ts","webpack://checkoutKit/./src/payment/strategies/affirm/affirm-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/affirm/affirmJs.ts","webpack://checkoutKit/./src/payment/strategies/affirm/affirm-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/afterpay/afterpay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/afterpay/afterpay-script-loader.ts","webpack://checkoutKit/./src/address/is-internal-address-equal.ts","webpack://checkoutKit/./src/common/utility/omit-private.ts","webpack://checkoutKit/./src/address/map-from-internal-address.ts","webpack://checkoutKit/./src/payment/strategies/amazon-pay/amazon-pay-payment-strategy.ts","webpack://checkoutKit/./src/common/overlay/overlay.ts","webpack://checkoutKit/./src/common/utility/cancellable-promise.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-payment-processor.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-credit-card-payment-strategy.ts","webpack://checkoutKit/./src/payment/is-credit-card-like.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-paypal-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/chasepay/chasepay.ts","webpack://checkoutKit/./src/payment/strategies/braintree/is-braintree-error.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-visacheckout-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/chasepay/chasepay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/square/square-form.ts","webpack://checkoutKit/./src/payment/strategies/converge/converge-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/credit-card/credit-card-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/klarna/klarna-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/klarna/klarna-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/legacy/legacy-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/masterpass/masterpass-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/no-payment/no-payment-data-required-strategy.ts","webpack://checkoutKit/./src/payment/strategies/offline/offline-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/offsite/offsite-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/paypal/paypal-pro-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/paypal/paypal-express-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/sage-pay/sage-pay-payment-strategy.ts","webpack://checkoutKit/./src/common/error/errors/unsupported-browser-error.ts","webpack://checkoutKit/./src/payment/strategies/square/square-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/square/square-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/wepay/wepay-risk-client.ts","webpack://checkoutKit/./src/payment/strategies/wepay/wepay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/zip/zip-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/zip/zip-script-loader.ts","webpack://checkoutKit/./src/payment/create-payment-strategy-registry.ts","webpack://checkoutKit/./src/payment/strategies/braintree/create-braintree-payment-processor.ts","webpack://checkoutKit/./src/payment/instrument/instrument-action-creator.ts","webpack://checkoutKit/./src/common/date-time/add-minutes.ts","webpack://checkoutKit/./src/common/date-time/is-future.ts","webpack://checkoutKit/./src/payment/instrument/instrument-response-transformer.ts","webpack://checkoutKit/./src/payment/instrument/instrument-request-sender.ts","webpack://checkoutKit/./src/shipping/shipping-country-action-creator.ts","webpack://checkoutKit/./src/shipping/shipping-country-request-sender.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-action-creator.ts","webpack://checkoutKit/./src/shipping/strategies/amazon/amazon-pay-shipping-strategy.ts","webpack://checkoutKit/./src/shipping/strategies/default/default-shipping-strategy.ts","webpack://checkoutKit/./src/checkout/checkout-store-selector.ts","webpack://checkoutKit/./src/checkout/checkout-store-error-selector.ts","webpack://checkoutKit/./src/checkout/checkout-store-status-selector.ts","webpack://checkoutKit/./src/checkout/create-checkout-selectors.ts","webpack://checkoutKit/./src/common/error/error-message-transformer.ts","webpack://checkoutKit/./src/common/utility/to-single-line.ts","webpack://checkoutKit/./src/checkout/checkout-service.ts","webpack://checkoutKit/./src/checkout/create-checkout-service-error-transformer.ts","webpack://checkoutKit/./src/checkout/create-checkout-service.ts","webpack://checkoutKit/./src/payment/create-payment-client.ts","webpack://checkoutKit/./src/customer/create-customer-strategy-registry.ts","webpack://checkoutKit/./src/shipping/create-shipping-strategy-registry.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-content/handle-frame-loaded-event.ts","webpack://checkoutKit/./src/common/error/errors/custom-error.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-content/iframe-embedded-checkout-messenger.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-content/noop-embedded-checkout-messenger.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-content/create-embedded-checkout-messenger.ts","webpack://checkoutKit/./src/locale/language-service.ts","webpack://checkoutKit/./src/locale/create-language-service.ts","webpack://checkoutKit/./src/currency/currency-formatter.ts","webpack://checkoutKit/./src/currency/currency-service.ts","webpack://checkoutKit/./src/currency/create-currency-service.ts","webpack://checkoutKit/./src/index.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-payment-processor.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/create-googlepay-payment-processor.ts","webpack://checkoutKit/./src/cart/map-to-internal-cart.ts","webpack://checkoutKit/./src/promotion/map-to-discount-notifications.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","ConsignmentActionType","__webpack_exports__","CustomerStrategyActionType","PaymentStrategyActionType","MissingDataErrorType","MissingDataError","_super","subtype","_this","this","type","MissingBillingAddress","MissingCart","MissingConsignments","MissingCheckout","MissingCheckoutConfig","MissingOrderConfig","MissingOrder","MissingOrderId","MissingPayment","MissingPaymentMethod","MissingShippingAddress","getErrorMessage","tslib__WEBPACK_IMPORTED_MODULE_0__","_standard_error__WEBPACK_IMPORTED_MODULE_1__","ShippingStrategyActionType","CheckoutActionType","standard_error_StandardError","StandardError","message","_newTarget","setPrototypeOf","__proto__","Error","captureStackTrace","stack","external_tslib_","CouponActionType","BillingAddressActionType","OrderActionType","PaymentMethodActionType","CheckoutButtonActionType","GiftCertificateActionType","InstrumentActionType","EmbeddedCheckoutEventType","RemoteCheckoutActionType","DEFAULT_RESPONSE","body","headers","status","RequestError","response","_a","_b","errors","_c","ConfigActionType","CountryActionType","ShippingCountryActionType","ACKNOWLEDGE","FINALIZE","ContentType","PaymentActionType","InvalidArgumentError","HOSTED","OFFLINE","isIframeEvent","PaymentMethodInvalidError","isEqual","objectA","objectB","options","Array","isArray","length","index","length_1","isArrayEqual","Date","getTime","isDateEqual","RegExp","toString","isRegExpEqual","filter","keyFilter","keysA","keys","keysB","length_2","isObjectEqual","_common_url__WEBPACK_IMPORTED_MODULE_0__","IframeEventPoster","targetOrigin","_targetWindow","_targetOrigin","origin","post","event","window","postMessage","setTarget","CustomerActionType","ErrorActionType","PaymentMethodActionCreator","_requestSender","loadPaymentMethods","rxjs__WEBPACK_IMPORTED_MODULE_2__","observer","next","_bigcommerce_data_store__WEBPACK_IMPORTED_MODULE_1__","_payment_method_actions__WEBPACK_IMPORTED_MODULE_4__","LoadPaymentMethodsRequested","then","meta","deviceSessionId","sessionHash","LoadPaymentMethodsSucceeded","complete","catch","error","LoadPaymentMethodsFailed","loadPaymentMethod","methodId","LoadPaymentMethodRequested","undefined","LoadPaymentMethodSucceeded","LoadPaymentMethodFailed","_common_action__WEBPACK_IMPORTED_MODULE_3__","_common_http_request__WEBPACK_IMPORTED_MODULE_0__","_common_http_request__WEBPACK_IMPORTED_MODULE_1__","PaymentMethodRequestSender","timeout","Accept","JsonV1","X-API-INTERNAL","url","EmbeddedContentEventType","IframeEventListener","sourceOrigin","_sourceOrigin","_common_url__WEBPACK_IMPORTED_MODULE_1__","_isListening","_listeners","listen","addEventListener","_handleMessage","stopListen","removeEventListener","addListener","listener","listeners","push","removeListener","indexOf","splice","trigger","forEach","_is_iframe_event__WEBPACK_IMPORTED_MODULE_3__","data","_common_utility__WEBPACK_IMPORTED_MODULE_2__","AmountTransformer","_dp","toInteger","amount","Math","floor","pow","mapToInternalLineItems","itemMap","decimalPlaces","idKey","reduce","result","concat","map","item","amountTransformer","amount_transformer","id","imageUrl","amountAfterDiscount","discount","integerAmount","integerAmountAfterDiscount","integerDiscount","quantity","sender","recipient","attributes","variantId","mapGiftCertificateToInternalLineItem","map_to_internal_line_item","mapToInternalLineItemType","INTERNAL_USE_ONLY","_is_equal__WEBPACK_IMPORTED_MODULE_0__","CacheKeyResolver","_lastId","_maps","getKey","args","_i","arguments","_resolveMap","apply","parentMaps","cacheKey","usedCount","_generateKey","slice","getUsedCount","isMatched","parentMaps_1","maps","bindDecorator","target","descriptor","bindMethodDecorator","decoratedTarget","class_1","getOwnPropertyNames","getOwnPropertyDescriptor","bindClassDecorator","method","boundMethod","set","CheckoutIncludes","_common_error_errors__WEBPACK_IMPORTED_MODULE_0__","BraintreeScriptLoader","_scriptLoader","_window","loadClient","loadScript","braintree","client","load3DS","threeDSecure","loadDataCollector","dataCollector","loadPaypal","paypal","loadPaypalCheckout","paypalCheckout","loadVisaCheckout","visaCheckout","loadGooglePayment","googlePayment","BraintreeSDKCreator","_braintreeScriptLoader","_dataCollectors","initialize","clientToken","_clientToken","getClient","_common_error_errors__WEBPACK_IMPORTED_MODULE_1__","PaymentNotInitialized","_client","authorization","getPaypal","_paypal","Promise","all","getPaypalCheckout","_paypalCheckout","get3DS","_3ds","getDataCollector","cached","kount","code","deviceData","teardown","resolve","getVisaCheckout","_visaCheckout","getGooglePaymentComponent","_googlePay","_teardown","default","mod","mapToInternalLineItem","_amount_transformer__WEBPACK_IMPORTED_MODULE_0__","extendedListPrice","extendedSalePrice","discountAmount","downloadsPageUrl","downloadPageUrl","brand","categoryNames","productId","option","addedByPromotion","isPrivate","throwErrorAction","_bigcommerce_data_store__WEBPACK_IMPORTED_MODULE_0__","rxjs__WEBPACK_IMPORTED_MODULE_1__","action","payload","NotInitializedErrorType","NotInitializedError","CustomerNotInitialized","ShippingNotInitialized","parseUrl","_error_errors__WEBPACK_IMPORTED_MODULE_0__","test","anchor","document","createElement","href","hash","hostname","pathname","port","protocol","search","cachableActionDecorator","memoizedMethods","WeakMap","decorateMethod","param","lastArg","useCache","fn","resolver","instanceMethods","cache_key_resolver","external_lodash_","external_rxjs_","pipe","operators_","store","omitDeep","lodash__WEBPACK_IMPORTED_MODULE_0__","predicate","CheckoutActionCreator","_checkoutRequestSender","_configActionCreator","loadCheckout","_checkout_actions__WEBPACK_IMPORTED_MODULE_7__","LoadCheckoutRequested","loadConfig","LoadCheckoutSucceeded","rxjs_operators__WEBPACK_IMPORTED_MODULE_3__","_common_error__WEBPACK_IMPORTED_MODULE_4__","LoadCheckoutFailed","loadDefaultCheckout","context","getState","config","getContextConfig","checkoutId","_common_error_errors__WEBPACK_IMPORTED_MODULE_5__","updateCheckout","checkout","getCheckout","_common_error_errors__WEBPACK_IMPORTED_MODULE_6__","UpdateCheckoutRequested","UpdateCheckoutSucceeded","UpdateCheckoutFailed","loadCurrentCheckout","ConsignmentActionCreator","_consignmentRequestSender","unassignItemsByAddress","consignment","state","_common_error_errors__WEBPACK_IMPORTED_MODULE_4__","existingConsignment","consignments","getConsignmentByAddress","shippingAddress","lineItems","_removeLineItems","cart","getCart","updateConsignment","deleteConsignment","assignItemsByAddress","_createOrUpdateConsignment","_addLineItems","selectShippingOption","getConsignments","consignmentUpdateBody","shippingOptionId","consignmentMeta","_consignment_actions__WEBPACK_IMPORTED_MODULE_6__","UpdateShippingOptionRequested","UpdateShippingOptionSucceeded","UpdateShippingOptionFailed","loadShippingOptions","LoadShippingOptionsRequested","params","include","_checkout_checkout_params__WEBPACK_IMPORTED_MODULE_3__","AvailableShippingOptions","LoadShippingOptionsSucceeded","LoadShippingOptionsFailed","updateAddress","address","_getConsignmentRequestBody","createConsignments","CreateConsignmentsRequested","CreateConsignmentsSucceeded","CreateConsignmentsFailed","UpdateConsignmentRequested","UpdateConsignmentSucceeded","UpdateConsignmentFailed","consignmentId","DeleteConsignmentRequested","DeleteConsignmentSucceeded","DeleteConsignmentFailed","updateShippingOption","_isUpdateConsignmentRequest","physicalItems","itemId","_hydrateLineItems","lineItemIds","existingItem","sharedItem","find","lineItem","request","DEFAULT_PARAMS","join","ConsignmentRequestSender","put","delete","getCallbackUrl","location","mapToInternalShippingOption","isSelected","description","price","cost","selected","isRecommended","transitTime","UnrecoverableError","request_error","joinErrors","map_from_payment_error_response_joinErrors","PAYMENT_ERROR_CODES","RequestErrorFactory","_factoryMethods","register","detail","title","mapFromInternalErrorResponse","mapFromStorefrontErrorResponse","mapFromPaymentErrorResponse","timeout_error","factoryMethod","createError","_getType","_isStorefrontErrorResponseBody","_isInternalErrorResponseBody","internalType","split","errorResponse","storefrontErrorResponse","internalErrorResponse","clearErrorReducer","error_actions","ClearError","isClearErrorAction","omit_deep","DEFAULT_STATE","statuses","billingAddressReducer","data_store_","dataReducer","errorsReducer","statusesReducer","reducer","billing_address_actions","UpdateBillingAddressSucceeded","ContinueAsGuestSucceeded","checkout_actions","order_actions","LoadOrderSucceeded","billingAddress","loadError","UpdateBillingAddressRequested","updateError","UpdateBillingAddressFailed","ContinueAsGuestRequested","continueAsGuestError","ContinueAsGuestFailed","isLoading","isUpdating","isContinuingAsGuest","cart_reducer_DEFAULT_STATE","cartReducer","cart_reducer_dataReducer","cart_reducer_errorsReducer","cart_reducer_statusesReducer","consignment_actions","coupon_actions","ApplyCouponSucceeded","RemoveCouponSucceeded","gift_certificate_actions","ApplyGiftCertificateSucceeded","RemoveGiftCertificateSucceeded","checkout_button_reducer_DEFAULT_STATE","DEFAULT_DATA_STATE","initializedContainers","DEFAULT_ERROR_STATE","DEFAULT_STATUS_STATE","checkoutButtonReducer","checkout_button_reducer_dataReducer","checkout_button_reducer_errorsReducer","checkout_button_reducer_statusesReducer","checkout_button_actions","InitializeButtonSucceeded","containerId","DeinitializeButtonSucceeded","InitializeButtonRequested","initializeError","InitializeButtonFailed","DeinitializeButtonRequested","deinitializeError","DeinitializeButtonFailed","isInitializing","isDeinitializing","config_reducer_DEFAULT_STATE","configReducer","config_reducer_dataReducer","config_reducer_errorsReducer","config_reducer_statusesReducer","config_actions","LoadConfigSucceeded","LoadConfigFailed","LoadConfigRequested","coupon_reducer_DEFAULT_STATE","couponReducer","coupon_reducer_dataReducer","coupon_reducer_errorsReducer","coupon_reducer_statusesReducer","coupons","ApplyCouponRequested","applyCouponError","ApplyCouponFailed","RemoveCouponRequested","removeCouponError","RemoveCouponFailed","isApplyingCoupon","isRemovingCoupon","gift_certificate_reducer_DEFAULT_STATE","giftCertificateReducer","gift_certificate_reducer_dataReducer","gift_certificate_reducer_errorsReducer","gift_certificate_reducer_statusesReducer","giftCertificates","ApplyGiftCertificateRequested","applyGiftCertificateError","ApplyGiftCertificateFailed","RemoveGiftCertificateRequested","removeGiftCertificateError","RemoveGiftCertificateFailed","isApplyingGiftCertificate","isRemovingGiftCertificate","customer_reducer_DEFAULT_STATE","customerReducer","customer_reducer_dataReducer","customer","customer_strategy_state_DEFAULT_STATE","customerStrategyReducer","customer_strategy_reducer_dataReducer","customer_strategy_reducer_errorsReducer","customer_strategy_reducer_statusesReducer","customer_strategy_actions","InitializeSucceeded","isInitialized","DeinitializeSucceeded","InitializeRequested","initializeMethodId","InitializeFailed","DeinitializeRequested","deinitializeMethodId","DeinitializeFailed","SignInRequested","SignInSucceeded","signInError","signInMethodId","SignInFailed","SignOutRequested","SignOutSucceeded","signOutError","signOutMethodId","SignOutFailed","WidgetInteractionStarted","WidgetInteractionFinished","widgetInteractionError","widgetInteractionMethodId","WidgetInteractionFailed","isSigningIn","isSigningOut","isWidgetInteracting","country_reducer_DEFAULT_STATE","countryReducer","country_reducer_dataReducer","country_reducer_errorsReducer","country_reducer_statusesReducer","country_actions","LoadCountriesSucceeded","LoadCountriesRequested","LoadCountriesFailed","order_reducer_DEFAULT_STATE","orderReducer","order_reducer_dataReducer","order_reducer_errorsReducer","metaReducer","order_reducer_statusesReducer","LoadOrderPaymentsSucceeded","FinalizeOrderSucceeded","SubmitOrderSucceeded","callbackUrl","order","orderToken","token","payment","LoadOrderRequested","LoadOrderPaymentsRequested","LoadOrderFailed","LoadOrderPaymentsFailed","paymentReducer","payment_reducer_dataReducer","payment_actions","SubmitPaymentSucceeded","payment_method_reducer_DEFAULT_STATE","paymentMethodReducer","payment_method_reducer_dataReducer","payment_method_reducer_errorsReducer","payment_method_reducer_metaReducer","payment_method_reducer_statusesReducer","payment_method_actions","array","gateway","newArray","loadMethodId","loadMethodError","isLoadingMethod","payment_strategy_state_DEFAULT_STATE","paymentStrategyReducer","payment_strategy_reducer_dataReducer","payment_strategy_reducer_errorsReducer","payment_strategy_reducer_statusesReducer","payment_strategy_actions","ExecuteRequested","ExecuteSucceeded","executeError","executeMethodId","ExecuteFailed","FinalizeRequested","FinalizeSucceeded","finalizeError","finalizeMethodId","FinalizeFailed","isExecuting","isFinalizing","instrument_reducer_DEFAULT_STATE","instrumentReducer","instrument_reducer_dataReducer","instrument_reducer_errorsReducer","instrument_reducer_metaReducer","instrument_reducer_statusesReducer","instrument_actions","LoadInstrumentsSucceeded","vaultedInstruments","DeleteInstrumentSucceeded","instrument","bigpayToken","instrumentId","LoadInstrumentsRequested","DeleteInstrumentRequested","deleteError","failedInstrument","LoadInstrumentsFailed","DeleteInstrumentFailed","isDeleting","deletingInstrument","remote_checkout_reducer_DEFAULT_STATE","remoteCheckoutReducer","remote_checkout_reducer_dataReducer","remote_checkout_actions","InitializeRemoteBillingSucceeded","billing","InitializeRemoteShippingSucceeded","shipping","LoadRemoteSettingsSucceeded","settings","UpdateRemoteCheckout","consignment_reducer_DEFAULT_STATE","updateShippingOptionError","isUpdatingShippingOption","consignmentReducer","consignment_reducer_dataReducer","consignment_reducer_errorsReducer","consignment_reducer_statusesReducer","customer_actions","SignOutCustomerSucceeded","isLoadingShippingOptions","isCreating","shipping_country_reducer_DEFAULT_STATE","shippingCountryReducer","shipping_country_reducer_dataReducer","shipping_country_reducer_errorsReducer","shipping_country_reducer_statusesReducer","shipping_country_actions","LoadShippingCountriesSucceeded","LoadShippingCountriesRequested","LoadShippingCountriesFailed","shipping_strategy_state_DEFAULT_STATE","shippingStrategyReducer","shipping_strategy_reducer_dataReducer","shipping_strategy_reducer_errorsReducer","shipping_strategy_reducer_statusesReducer","shipping_strategy_actions","UpdateAddressRequested","UpdateAddressSucceeded","updateAddressError","updateAddressMethodId","UpdateAddressFailed","SelectOptionRequested","SelectOptionSucceeded","selectOptionError","selectOptionMethodId","SelectOptionFailed","isUpdatingAddress","isSelectingOption","checkout_reducer_DEFAULT_STATE","checkoutReducer","checkout_reducer_dataReducer","checkout_reducer_errorsReducer","checkout_reducer_statusesReducer","orderId","billing_address_selector","BillingAddressSelector","_billingAddress","getBillingAddress","getUpdateError","getContinueAsGuestError","getLoadError","selector_decorator","cart_selector","CartSelector","_cart","checkout_button_selector","CheckoutButtonSelector","_checkoutButton","getInitializeError","getDeinitializeError","createFreezeProxy","trap","proxy","iteratee","getPrototypeOf","traversePrototypeOf","charAt","createProxy","config_selector","ConfigSelector","_config","getConfig","getStoreConfig","storeConfig","getExternalSource","externalSource","coupon_selector","CouponSelector","_coupon","getCoupons","getRemoveError","getApplyError","isApplying","isRemoving","gift_certificate_selector","GiftCertificateSelector","_giftCertificate","getGiftCertificates","customer_selector","CustomerSelector","_customer","getCustomer","CustomerStrategySelector","_customerStrategies","getSignInError","getSignOutError","getWidgetInteractionError","form_selector","FormSelector","getShippingAddressFields","countries","countryCode","selectedCountry","formFields","shippingAddressFields","field","_processField","getBillingAddressFields","billingAddressFields","_processCountry","_processProvince","_processsPostCode","country","items","label","fieldType","itemtype","subdivisions","required","hasPostalCodes","Boolean","country_selector","CountrySelector","_countries","getCountries","order_selector","OrderSelector","_order","_coupons","getOrder","getOrderMeta","payment_selector","PaymentSelector","_checkout","getPaymentId","internalPayment","_getInternalPayment","providerId","gatewayId","_getHostedPayment","_getGatewayPayment","getPaymentStatus","replace","step","getPaymentToken","getPaymentRedirectUrl","redirectUrl","isPaymentDataRequired","useStoreCredit","grandTotal","getGrandTotal","isPaymentDataSubmitted","paymentMethod","nonce","payment_status_types","payments","providerType","payment_method_types","payment_method_selector","PaymentMethodSelector","_paymentMethods","getPaymentMethods","getPaymentMethodsMeta","getPaymentMethod","getLoadMethodError","payment_strategy_selector","PaymentStrategySelector","_paymentStrategies","getExecuteError","getFinalizeError","getWidgetInteractingError","InstrumentSelector","_instruments","getInstruments","getInstrumentsMeta","getDeleteError","remote_checkout_selector","RemoteCheckoutSelector","_remoteCheckout","shipping_address_selector","ShippingAddressSelector","_consignments","getShippingAddress","shipping_country_selector","ShippingCountrySelector","_shippingCountries","getShippingCountries","shipping_strategy_selector","ShippingStrategySelector","_shippingStrategies","getUpdateAddressError","getSelectOptionError","normalize","firstName","lastName","company","address1","address2","city","stateOrProvince","postalCode","phone","customFields","consignment_selector","ConsignmentSelector","getConsignmentById","addressA","addressB","getShippingOption","selectedShippingOption","getCreateError","getLoadShippingOptionsError","loadShippingOptionsError","getUnassignedItems","assignedLineItemIds","itemIds","getItemAssignmentError","getUpdateShippingOptionError","isAssigningItems","checkout_selector","CheckoutSelector","_giftCertificates","storeCredit","max","createInternalCheckoutSelectors","checkoutButton","customerStrategies","customer_strategy_selector","form","instruments","instrument_selector","paymentMethods","paymentStrategies","remoteCheckout","shippingCountries","shippingStrategies","selectors","shouldWarnMutation","createCheckoutStore","initialState","requestErrorFactory","factory","actionTransformer","request_error_factory","unrecoverable_error","payment_method_invalid_error","action$","every","stateTransformer","CheckoutNotAvailableError","checkout_request_sender_CheckoutRequestSender","CheckoutRequestSender","content_type","join_includes","checkout_default_includes","checkout_not_available_error","mapToInternalCoupon","couponTypes","coupon","displayName","discountType","couponType","mapToInternalAddress","addressId","isBillingAddressLike","addressLine1","addressLine2","province","provinceCode","stateOrProvinceCode","postCode","checkout_button_error_selector","CheckoutButtonErrorSelector","getInitializeButtonError","getDeinitializeButtonError","checkout_button_status_selector","CheckoutButtonStatusSelector","isInitializingButton","isDeinitializingButton","createCheckoutButtonSelectors","CheckoutButtonMethodType","CheckoutButtonInitializer","_store","_buttonStrategyActionCreator","_state","subscribe","subscriber","filters","initializeButton","containerIds","selector","idPrefix","containers","querySelectorAll","invalid_argument_error","container","setUniqueElementId","queueId","dispatch","deinitializeButton","deinitialize","CheckoutButtonStrategyActionCreator","_registry","_paymentMethodActionCreator","throw_error_action","checkout_button_method_type","BraintreePaypalButtonStrategy","_checkoutActionCreator","_braintreeSDKCreator","_paypalScriptLoader","_formPoster","_offerCredit","paypalOptions","braintreepaypalcredit","braintreepaypal","_paymentMethod","missing_data_error","allowedSources","disallowedSources","allowCredit","FUNDING","CREDIT","Button","render","env","testMode","commit","shouldProcessPayment","funding","allowed","disallowed","style","shape","_setupPayment","onPaymentError","onAuthorize","_tokenizePayment","onAuthorizeError","onError","addresses","not_initialized_error","CheckoutButtonNotInitialized","createPayment","flow","enableShippingAddress","shippingAddressEditable","shippingAddressOverride","_mapToBraintreeAddress","currency","offerCredit","tokenizePayment","postForm","payment_type","provider","device_data","shipping_address","JSON","stringify","_mapToLegacyShippingAddress","billing_address","_mapToLegacyBillingAddress","details","recipientName","email","first_name","last_name","phone_number","address_line_1","line1","address_line_2","line2","country_code","postal_code","googlepay_button_strategy","GooglePayButtonStrategy","_googlePayPaymentProcessor","_methodId","_getMethodId","_walletButton","_createSignInButton","parentNode","removeChild","getElementById","googlePayButton","createButton","_handleWalletButtonClick","appendChild","preventDefault","displayWallet","paymentData","handleSuccess","updateShippingAddress","_onPaymentSelectComplete","_onError","Content-Type","bind_decorator","masterpass_button_strategy","MasterpassButtonStrategy","_masterpassScriptLoader","initializationData","load","masterpass","_masterpassClient","_signInButton","buttonContainer","button","src","_createMasterpassPayload","allowedCardTypes","cartAmount","cartId","suppressShippingAddress","get_callback_url","PaypalButtonStrategy","_host","merchantId","clientId","actions","internal_api_headers","res","paymentID","payerID","paymentId","payerId","payerInfo","payer","payer_info","createCheckoutButtonInitializer","host","create_checkout_store","requestSender","request_sender_","formPoster","form_poster_","checkout_button_initializer","checkout_button_strategy_action_creator","registry","registry_registry","scriptLoader","script_loader_","checkoutActionCreator","checkout_action_creator","checkout_request_sender","config_action_creator","config_request_sender","BRAINTREE_PAYPAL","braintree_paypal_button_strategy","braintree_sdk_creator","braintree_script_loader","paypal_script_loader","BRAINTREE_PAYPAL_CREDIT","MASTERPASS","masterpass_script_loader","GOOGLEPAY_BRAINTREE","create_googlepay_payment_processor","googlepay_braintree_initializer","GOOGLEPAY_STRIPE","googlepay_stripe_initializer","PAYPALEXPRESS","paypal_button_strategy","createCheckoutButtonRegistry","payment_method_action_creator","payment_method_request_sender","NotEmbeddableErrorType","BrowserStorage","_namespace","getItem","rawValue","external_local_storage_fallback_default","a","withNamespace","parse","removeItem","getItemOnce","setItem","InvalidLoginTokenError","NotEmbeddableError","UnknownError","standard_error","EmbeddedCheckout","_iframeCreator","_messageListener","_messagePoster","_loadingIndicator","_storage","_location","_options","_isAttached","onComplete","embedded_checkout_events","CheckoutComplete","CheckoutError","onLoad","CheckoutLoaded","onFrameLoad","FrameLoaded","onSignOut","SignedOut","_configureStyles","attach","show","_allowCookie","_attemptLogin","createFrame","iframe","_iframe","hide","_retryAllowCookie","FrameError","detach","iFrameResizer","close","contentWindow","styles","embedded_content_events","StyleConfigured","parse_url","reject","invalid_login_token_error","encodeURIComponent","visibility","not_embeddable_error","MissingContent","DEFAULT_STYLES","size","color","backgroundColor","ROTATION_ANIMATION","LoadingIndicator","_styles","_defineAnimation","_container","_buildContainer","_indicator","_buildIndicator","parentId","parent_1","opacity","handleTransitionEnd","display","bottom","left","height","width","position","right","top","transition","indicator","borderRadius","border","borderColor","margin","transform","transformStyle","animation","head","sheet","CSSStyleSheet","insertRule","ResizableIframeCreator","MissingContainer","allowPaymentRequest","_toResizableFrame","timeoutInterval","setTimeout","handleMessage","is_iframe_event","contentId","iframes","external_iframe_resizer_","scrolling","sizeWidth","heightCalculationMethod","clearTimeout","embedCheckout","STORAGE_PREFIX","embedded_checkout","resizable_iframe_creator","iframe_event_listener","iframe_event_poster","loading_indicator","loadingIndicator","browser_storage","TimeoutError","selectorDecorator","_utility__WEBPACK_IMPORTED_MODULE_2__","memoizedMethod","lodash__WEBPACK_IMPORTED_MODULE_1__","_utility__WEBPACK_IMPORTED_MODULE_3__","cachedValue","newValue","_utility__WEBPACK_IMPORTED_MODULE_4__","_utility__WEBPACK_IMPORTED_MODULE_5__","cache","selectorMethodDecorator","joinIncludes","includes","ConfigActionCreator","_configRequestSender","_config_actions__WEBPACK_IMPORTED_MODULE_4__","ConfigRequestSender","BillingAddressActionCreator","continueAsGuest","credentials","_common_error_errors__WEBPACK_IMPORTED_MODULE_3__","isGuest","billingAddressRequestBody","existingBillingAddressRequestBody","_billing_address_actions__WEBPACK_IMPORTED_MODULE_5__","_createOrUpdateBillingAddress","createAddress","BillingAddressRequestSender","Registry","_factories","_instances","defaultToken","cacheToken","_getInstance","_hasFactory","_error_errors__WEBPACK_IMPORTED_MODULE_1__","_hasInstance","toFormUrlEncoded","MasterpassScriptLoader","RemoteCheckoutSynchronizationError","GooglePayBraintreeInitializer","hasShippingAddress","googleBraintreePaymentInstance","_googlePaymentInstance","_createGooglePayPayload","parseResponse","paymentMethodData","tokenizationData","androidPayCards","cardType","lastFour","lastTwo","binData","platformToken","googlePayBraintreePaymentDataRequest","merchantInfo","authJwt","merchantName","googleMerchantName","googleMerchantId","transactionInfo","currencyCode","totalPriceStatus","totalPrice","toFixed","cardRequirements","billingAddressRequired","billingAddressFormat","shippingAddressRequired","emailRequired","phoneNumberRequired","_mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2","createPaymentDataRequest","googlePayBraintreeDataRequestV1","apiVersion","apiVersionMinor","allowedPaymentMethods","parameters","allowedAuthMethods","allowedCardNetworks","billingAddressParameters","format","tokenizationSpecification","braintree:apiVersion","braintree:authorizationFingerprint","paymentMethodTokenizationParameters","braintree:merchantId","braintree:sdkVersion","shippingAddressParameters","GooglePayStripeInitializer","_mapGooglePayStripeDataRequestToGooglePayDataRequestV2","card","last4","err","stripe:version","stripeVersion","stripe:publishableKey","stripePublishableKey","mapToInternalCustomer","_address__WEBPACK_IMPORTED_MODULE_0__","customerId","fullName","mapToInternalGiftCertificate","giftCertificate","discountedAmount","used","remainingBalance","remaining","balance","purchaseDate","mapToInternalOrder","_cart__WEBPACK_IMPORTED_MODULE_1__","_cart__WEBPACK_IMPORTED_MODULE_2__","_coupon__WEBPACK_IMPORTED_MODULE_3__","orderMeta","customerCanBeCreated","mapToInteralOrderPayment","subtotal","baseAmount","sum","discountNotifications","totalDiscountedAmount","appliedGiftCertificates","socialData","mapToInternalSocialDataList","hasDigitalItems","isDownloadable","isComplete","shippingCostTotal","amountBeforeDiscount","shippingCostBeforeDiscount","integerAmountBeforeDiscount","mapToStoreCredit","taxes","taxTotal","handling","handlingCostTotal","orderAmount","orderAmountAsInteger","mapToInternalPaymentStatus","isDefaultOrderPayment","helpText","instructions","returnUrl","socialDataObject","digitalItems","socialMedia","image","link","shareText","text","sharingLink","channelName","channel","channelCode","PaypalScriptLoader","ErrorActionCreator","clearError","getEnvironment","process","NODE_ENV","e","ConsoleLogger","_console","log","messages","_logToConsole","info","warn","debug","NoopLogger","isEnabled","logger","console_logger","console","noop_logger","getDefaultLogger","CouponActionCreator","_couponRequestSender","applyCoupon","removeCoupon","CouponRequestSender","couponCode","checkout_params","GiftCertificateActionCreator","_giftCertificateRequestSender","applyGiftCertificate","removeGiftCertificate","GiftCertificateRequestSender","giftCertificateCode","CustomerStrategyActionCreator","_strategyRegistry","signIn","signOut","widgetInteraction","AmazonPayScriptLoader","loadWidget","onPaymentReady","region","toLowerCase","_configureWidget","onLoginReady","amazon","Login","setClientId","setUseCookie","onAmazonLoginReady","OffAmazonPayments","onAmazonPaymentsReady","BraintreeVisaCheckoutPaymentProcessor","createInitOptions","locale","collectShipping","paymentRequest","String","braintreeVisaCheckout","tokenize","tokenizedPayload","_toVisaCheckoutAddress","_postForm","userData","cardInformation","userEmail","to_form_url_encoded","card_information","_getCardInformation","_getAddress","phoneNumber","streetAddress","extendedAddress","locality","number","createBraintreeVisaCheckoutPaymentProcessor","braintreeScriptLoader","braintreeSDKCreator","braintree_visacheckout_payment_processor","VisaCheckoutScriptLoader","V","ChasePayScriptLoader","JPMC","RemoteCheckoutRequestSender","initializeBilling","methodName","initializeShipping","initializePayment","loadSettings","generateToken","trackAuthorizationEvent","RemoteCheckoutActionCreator","_remoteCheckoutRequestSender","InitializeRemoteBillingRequested","InitializeRemoteBillingFailed","InitializeRemoteShippingRequested","InitializeRemoteShippingFailed","InitializeRemotePaymentRequested","InitializeRemotePaymentSucceeded","InitializeRemotePaymentFailed","LoadRemoteSettingsRequested","LoadRemoteSettingsFailed","SignOutRemoteCustomerRequested","SignOutRemoteCustomerSucceeded","SignOutRemoteCustomerFailed","CustomerActionCreator","_customerRequestSender","signInCustomer","SignInCustomerRequested","SignInCustomerSucceeded","SignInCustomerFailed","signOutCustomer","SignOutCustomerRequested","SignOutCustomerFailed","CustomerRequestSender","NotImplementedError","AmazonPayCustomerStrategy","_remoteCheckoutActionCreator","amazonOptions","not_implemented_error","useAmazonAddressBook","_handleAuthorization","authorize","popup","scope","tokenPrefix","BraintreeVisaCheckoutCustomerStrategy","_customerStrategyActionCreator","_braintreeVisaCheckoutPaymentProcessor","_visaCheckoutScriptLoader","_buttonClassName","visaCheckoutOptions","braintreevisacheckout","initOptions","storeProfile","storeLanguage","signInButton","init","on","paymentSuccessPayload","_paymentInstrumentSelected","buttonClass","querySelector","_insertVisaCheckoutButton","visaCheckoutButton","className","innerHTML","ChasePayCustomerStrategy","_chasePayScriptLoader","chasePayOptions","chasepay","digitalSessionId","ChasePay","configure","language","isChasePayUp","insertButtons","EventType","START_CHECKOUT","sessionId","startCheckout","COMPLETE_CHECKOUT","requestId","merchantRequestId","_setExternalCheckoutData","_reloadPage","sessionToken","sendRequest","fromChasePay","DefaultCustomerStrategy","_customerActionCreator","googlepay_customer_strategy","GooglePayCustomerStrategy","googlePayOptions","_getGooglePayOptions","googlepaybraintree","googlepaystripe","MasterpassCustomerStrategy","masterpassOptions","Masterpass","SquareCustomerStrategy","CountryActionCreator","_countryRequestSender","loadCountries","CountryRequestSender","Accept-Language","OrderRequestSender","loadOrder","submitOrder","finalizeOrder","OrderActionCreator","_orderRequestSender","_checkoutValidator","loadOrderPayments","loadCurrentOrder","_getCurrentOrderId","SubmitOrderRequested","validate","_mapToOrderRequestBody","customerMessage","SubmitOrderFailed","FinalizeOrderRequested","FinalizeOrderFailed","PaymentStrategyType","OrderFinalizationNotRequiredError","payment_strategy_type","PaymentStrategyActionCreator","_orderActionCreator","execute","strategy","getByMethod","NO_PAYMENT_DATA_REQUIRED","finalize","_loadOrderPaymentsIfNeeded","order_finalization_not_required_error","CartComparator","cartA","cartB","_normalize","sort","itemA","itemB","localeCompare","giftWrapping","CartChangedError","CheckoutValidator","comparator","cart_comparator","_compareCoupons","_compareGiftCertificates","cart_changed_error","couponsA","couponsB","giftCertificatesA","giftCertificatesB","isVaultedInstrument","PaymentActionCreator","_paymentRequestSender","submitPayment","SubmitPaymentRequested","_getPaymentRequestBody","SubmitPaymentFailed","initializeOffsitePayment","InitializeOffsitePaymentRequested","InitializeOffsitePaymentSucceeded","InitializeOffsitePaymentFailed","_getPaymentMethod","shippingOption","contextConfig","instrumentMeta","paymentMeta","internalCustomer","map_to_internal_customer","authToken","vaultAccessToken","map_to_internal_address","map_to_internal_shipping_option","map_to_internal_cart","map_to_internal_order","quoteMeta","geoCountryCode","source","paymentMethodSelector","PaymentRequestSender","_transformResponse","statusText","PaymentStrategyRegistry","_getToken","_hasFactoryForMethod","_isLegacyMethod","LEGACY","OFFSITE","CREDIT_CARD","clientSidePaymentProviders","paymentSettings","PaymentArgumentInvalidError","invalidFields","PaymentMethodCancelledError","AffirmPaymentStrategy","_paymentActionCreator","_affirmScriptLoader","publicKey","affirm","_affirm","payment_argument_invalid_error","_getCheckoutInformation","open","onFail","failObject","reason","payment_method_cancelled_error","onSuccess","successObject","ui","paymentPayload","checkout_token","merchant","user_confirmation_url","links","checkoutLink","user_cancel_url","user_confirmation_url_action","_getShippingAddress","_getBillingAddress","_getItems","discounts","_getDiscounts","metadata","shipping_type","order_id","shipping_amount","tax_amount","total","first","last","full","zipcode","display_name","sku","unit_price","salePrice","qty","item_image_url","item_url","customItems","_d","_e","listPrice","_f","_g","line","discount_amount","discount_display_name","affirmJs","Function","AffirmScriptLoader","apikey","scriptURI","_getScriptURI","AfterpayPaymentStrategy","_afterpayScriptLoader","storeCountryName","storeCountry","_mapCountryToISO2","afterpaySdk","_afterpaySdk","_displayModal","afterpay","orderPayload","countryName","SCRIPTS_DEFAULT","SCRIPTS_US","AfterpayScriptLoader","AfterPay","isInternalAddressEqual","ignoredKeys","is_private","mapFromInternalAddress","AmazonPayPaymentStrategy","_billingAddressActionCreator","_walletOptions","_createWallet","referenceId","_getOrderReferenceId","_getMerchantId","onPaymentSelect","onReady","walletOptions","amazonOrderReferenceId","design","designMode","sellerId","orderReference","_synchronizeBillingAddress","_updateOrderReference","widget","Widgets","Wallet","remote_checkout_synchronization_error","remoteAddress","internalBillingAddress","getAmazonOrderReferenceId","Overlay","_element","_createElement","parentElement","_registerClick","remove","_unregisterClick","_removeAfterTransition","element","background","transitionDuration","zIndex","onClick","onClick_1","handeTransition","propertyName","promise","cancellable","cancel","race","BraintreePaymentProcessor","_overlay","_threeDSecureOptions","preloadPaypal","tokenizeCard","requestData","_mapToCreditCard","creditCards","focusWindow","useraction","verifyCard","addFrame","removeFrame","cancelVerifyCard","verification","cancellable_promise","appendSessionId","processedPayment","creditCard","cardholderName","ccName","ccNumber","cvv","ccCvv","expirationDate","ccExpiry","month","year","endpoint","BraintreeCreditCardPaymentStrategy","_braintreePaymentProcessor","_is3dsEnabled","is3dsEnabled","_handleError","orderRequest","_preparePaymentData","_isUsingVaulting","shouldSaveInstrument","tokenizedCard","ChasePayEventType","BraintreePaypalPaymentStrategy","_credit","braintreeOptions","isBraintreeError","BraintreeVisaCheckoutPaymentStrategy","_paymentStrategyActionCreator","visaInitOptions","CardBrand","DigitalWalletType","chasepay_payment_strategy","ChasePayPaymentStrategy","_wepayRiskClient","_walletEvent$","walletButton","_configureWallet","_chasePayClient","_getPayment","_displayWallet","_createOrder","logoContainer","insertBrandings","CancelCheckout","onCancel","CompleteCheckout","_setSessionToken","showLoadingAnimation","getRiskToken","riskToken","paymentCryptogram","cryptogramId","eci","transactionId","btoa","reqTokenId","expDate","substr","accountNum","accountMask","extraData","ConvergePaymentStrategy","three_ds_result","acs_url","PaReq","payer_auth_request","TermUrl","callback_url","MD","merchant_data","CreditCardPaymentStrategy","googlepay_payment_strategy","GooglePayPaymentStrategy","_googlePayOptions","statusCode","KlarnaPaymentStrategy","_klarnaScriptLoader","_supportedEUCountries","klarnaCredit","_klarnaCredit","_unsubscribe","_loadWidget","_authorize","authorizationToken","authorization_token","klarna","updateSessionData","_getUpdateSessionData","client_token","show_form","_mapToKlarnaAddress","street_address","given_name","family_name","approved","KlarnaScriptLoader","Klarna","Credit","LegacyPaymentStrategy","masterpass_payment_strategy","MasterpassPaymentStrategy","NoPaymentDataRequiredPaymentStrategy","OfflinePaymentStrategy","OffsitePaymentStrategy","_shouldSubmitFullPayload","PaypalProPaymentStrategy","_isPaymentAcknowledged","PaypalExpressPaymentStrategy","_useRedirectFlow","paypalexpress","useRedirectFlow","_isInContextEnabled","_paypalSdk","setup","environment","closeFlow","_isAcknowledgedOrFinalized","initXO","startFlow","SagePayPaymentStrategy","UnsupportedBrowserError","SquarePaymentStrategy","_syncPaymentMethod","createSquareForm","_paymentForm","_getFormOptions","build","_getNonceInstrument","_getCountryCode","toUpperCase","_deferredRequestNonce","requestCardNonce","deferred","squareOptions","square","_squareOptions","callbacks","cardNonceResponseReceived","cardData","billingContact","shippingContact","digital_wallet_type","none","_handleWalletNonceResponse","_handleCardNonceResponse","createPaymentRequest","_paymentRequestPayload","methodsSupported","methods","_showPaymentMethods","paymentFormLoaded","_setPostalCode","unsupportedBrowserDetected","unsupported_browser_error","requestShippingAddress","requestBillingInfo","storeName","pending","setPostalCode","masterpassBtn","elementId","SquareScriptLoader","SqPaymentForm","WepayRiskClient","_riskClient","WePay","risk","generate_risk_token","get_risk_token","WepayPaymentStrategy","orderActionCreator","paymentActionCreator","payloadWithToken","credit_card_payment_strategy","ZipPaymentStrategy","_zipScriptLoader","zip","_zipClient","zipClient","Checkout","onCheckout","openModal","ZipScriptLoader","Zip","createPaymentStrategyRegistry","paymentClient","payment_strategy_registry","billingAddressActionCreator","billing_address_action_creator","billing_address_request_sender","braintreePaymentProcessor","overlay","overlay_overlay","braintree_payment_processor","createBraintreePaymentProcessor","checkoutRequestSender","checkoutValidator","checkout_validator","order_action_creator","order_request_sender","payment_action_creator","payment_request_sender","paymentMethodActionCreator","remoteCheckoutActionCreator","remote_checkout_action_creator","remote_checkout_request_sender","configActionCreator","paymentStrategyActionCreator","payment_strategy_action_creator","AFFIRM","affirm_payment_strategy","affirm_script_loader","AFTERPAY","afterpay_payment_strategy","afterpay_script_loader","AMAZON","amazon_pay_payment_strategy","amazon_pay_script_loader","KLARNA","klarna_payment_strategy","klarna_script_loader","legacy_payment_strategy","offline_payment_strategy","offsite_payment_strategy","PAYPAL","paypal_pro_payment_strategy","PAYPAL_EXPRESS","paypal_express_payment_strategy","PAYPAL_EXPRESS_CREDIT","SAGE_PAY","sage_pay_payment_strategy","SQUARE","square_payment_strategy","square_script_loader","no_payment_data_required_strategy","BRAINTREE","braintree_credit_card_payment_strategy","braintree_paypal_payment_strategy","BRAINTREE_VISA_CHECKOUT","braintree_visacheckout_payment_strategy","visacheckout_script_loader","CHASE_PAY","chasepay_script_loader","wepay_risk_client","BRAINTREE_GOOGLE_PAY","WE_PAY","wepay_payment_strategy","STRIPE_GOOGLE_PAY","ZIP","zip_payment_strategy","zip_script_loader","CONVERGE","converge_payment_strategy","InstrumentActionCreator","_instrumentRequestSender","loadInstruments","session","_getSessionContext","_getCurrentAccessToken","_getValidAccessToken","currentToken","deleteInstrument","_isValidVaultAccessToken","date","newDate","valueOf","now","isFuture","vaultAccessExpiry","setMinutes","getMinutes","getVaultAccessToken","storeId","InstrumentResponseTransformer","transformResponse","_transformVaultedInstruments","vaulted_instruments","transformErrorResponse","transformVaultAccessResponse","expires_at","bigpay_token","defaultInstrument","default_instrument","iin","last_4","expiryMonth","expiry_month","expiryYear","expiry_year","trustedShippingAddress","trusted_shipping_address","InstrumentRequestSender","_transformer","instrument_response_transformer","requestContext","_loadInstrumentsWithAddress","_loadInstruments","deleteShopperInstrument","loadInstrumentsWithAddress","ShippingCountryActionCreator","_shippingCountryRequestSender","ShippingCountryRequestSender","ShippingStrategyActionCreator","selectOption","mergedOptions","AmazonPayShippingStrategy","_consignmentActionCreator","_createAddressBook","optionId","onAddressSelect","AddressBook","_synchronizeShippingAddress","DefaultShippingStrategy","checkout_store_selector","CheckoutStoreSelector","_form","_payment","_shippingAddress","getShippingOptions","availableShippingOptions","getSelectedShippingOption","getBillingCountries","getSelectedPaymentMethod","checkout_store_error_selector","CheckoutStoreErrorSelector","getError","getLoadCheckoutError","getSubmitOrderError","getFinalizeOrderError","getLoadOrderError","getLoadCartError","getLoadBillingCountriesError","getLoadShippingCountriesError","getLoadPaymentMethodsError","getLoadPaymentMethodError","getInitializePaymentError","getSelectShippingOptionError","getInitializeCustomerError","getUpdateShippingAddressError","getUpdateBillingAddressError","getUpdateConsignmentError","getCreateConsignmentsError","getDeleteConsignmentError","getInitializeShippingError","getApplyCouponError","getRemoveCouponError","getApplyGiftCertificateError","getRemoveGiftCertificateError","getLoadInstrumentsError","getDeleteInstrumentError","getLoadConfigError","getUpdateCheckoutError","checkout_store_status_selector","CheckoutStoreStatusSelector","isPending","isLoadingCheckout","isSubmittingOrder","isFinalizingOrder","isLoadingOrder","isLoadingCart","isLoadingBillingCountries","isLoadingShippingCountries","isLoadingPaymentMethods","isLoadingPaymentMethod","isInitializingPayment","isSelectingShippingOption","isInitializingCustomer","isUpdatingBillingAddress","isUpdatingShippingAddress","isUpdatingConsignment","isCreatingConsignments","isDeletingConsignment","isInitializingShipping","isLoadingInstruments","isDeletingInstrument","isLoadingConfig","isCustomerStepPending","isPaymentStepPending","isUpdatingCheckout","createCheckoutSelectors","ErrorMessageTransformer","_messageCustomizer","input","trim","CheckoutService","_countryActionCreator","_couponActionCreator","_errorActionCreator","_giftCertificateActionCreator","_instrumentActionCreator","_shippingCountryActionCreator","_shippingStrategyActionCreator","isDevelopment","_errorTransformer","error_message_transformer","isCheckoutServiceError","notifyState","_dispatch","loadCheckoutAction","loadConfigAction","finalizeOrderIfNeeded","deinitializePayment","loadBillingCountries","loadShippingCountries","loadBillingAddressFields","loadShippingAddressFields","initializeCustomer","deinitializeCustomer","deinitializeShipping","assignItemsToAddress","unassignItemsToAddress","selectConsignmentShippingOption","updateBillingAddress","createCheckoutService","bigpay_client_","setHost","bigpayBaseUrl","createPaymentClient","orderRequestSender","checkout_service","consignment_action_creator","consignment_request_sender","country_action_creator","country_request_sender","coupon_action_creator","coupon_request_sender","customer_strategy_action_creator","remoteCheckoutRequestSender","amazon_pay_customer_strategy","braintree_visacheckout_customer_strategy","chasepay_customer_strategy","square_customer_strategy","masterpass_customer_strategy","default_customer_strategy","customer_action_creator","customer_request_sender","createCustomerStrategyRegistry","error_action_creator","gift_certificate_action_creator","gift_certificate_request_sender","instrument_action_creator","instrument_request_sender","shipping_country_action_creator","shipping_country_request_sender","shipping_strategy_action_creator","consignmentRequestSender","consignmentActionCreator","amazon_pay_shipping_strategy","default_shipping_strategy","createShippingStrategyRegistry","handleFrameLoadedEvent","hasAttribute","setAttribute","isCustomError","IframeEmbeddedCheckoutMessenger","_untargetedMessagePoster","_messageHandlers","postComplete","_postMessage","postError","_transformError","postFrameError","untargeted","postFrameLoaded","postLoaded","postSignedOut","receiveStyles","handler","_notifyMessageHandlers","NoopEmbeddedCheckoutMessenger","createEmbeddedCheckoutMessenger","parentWindow","parent","noop_embedded_checkout_messenger","iframe_embedded_checkout_messenger","parentOrigin","LanguageService","_logger","_transformConfig","locales","translations","_locale","_locales","_translations","_formatters","mapKeys","translationKey","KEY_PREFIX","getLocale","_hasTranslations","translate","prefixedKey","messageFormat","external_messageformat_","compile","_transformData","output","defaultTranslations","_flattenObject","parentKey","resultKey","createLanguageService","language_service","CurrencyFormatter","currencySettings","symbolLocation","symbol","thousandsSeparator","decimalSeparator","_decimalPlaces","parseInt","_symbolLocation","_symbol","_thousandsSeparator","_decimalSeparator","formattedNumber","_formatNumber","formattedCurrency","_formatCurrency","positiveAmount","abs","_toFixed","decimalAmount","parsedIntegerAmount","precision","round","CurrencyService","_storeConfig","_customerFormatter","currency_formatter","shopperCurrency","_storeFormatter","toCustomerCurrency","exchangeRate","toStoreCurrency","createCurrencyService","currency_service","create_checkout_button_initializer","embed_checkout","ButtonType","ButtonColor","GooglePayPaymentProcessor","_googlePayScriptLoader","_googlePayInitializer","_consigmentActionCreator","buttonType","buttonColor","Short","Default","_googlePayClient","loadPaymentData","_getPaymentDataRequest","_updateBillingAddress","_mapGooglePayAddressToShippingAddress","googlePay","paymentDataRequest","_getGooglePayClient","_paymentDataRequest","isReadyToPay","google","api","PaymentsClient","_mapGooglePayAddressToBillingAddress","companyName","address3","administrativeArea","postPaymentData","remoteBillingAddress","googlePayAddressMapped","GooglePayScriptLoader","createGooglePayPaymentProcessor","initializer","googlepay_payment_processor","googlepay_script_loader","mapToInternalCart","promotions","notifications","map_to_internal_line_items","map_to_internal_coupon","promotion","banners","banner","placeholders","messageHtml","certificate","map_to_internal_gift_certificate","isShippingRequired","taxSubtotal"],"mappings":"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","file":"checkout-sdk.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 137);\n","module.exports = require(\"tslib\");","module.exports = require(\"@bigcommerce/data-store\");","module.exports = require(\"lodash\");","module.exports = require(\"rxjs\");","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nimport { ConsignmentMeta } from './consignment';\n\nexport enum ConsignmentActionType {\n    CreateConsignmentsRequested = 'CREATE_CONSIGNMENTS_REQUESTED',\n    CreateConsignmentsSucceeded = 'CREATE_CONSIGNMENTS_SUCCEEDED',\n    CreateConsignmentsFailed = 'CREATE_CONSIGNMENTS_FAILED',\n\n    UpdateConsignmentRequested = 'UPDATE_CONSIGNMENT_REQUESTED',\n    UpdateConsignmentSucceeded = 'UPDATE_CONSIGNMENT_SUCCEEDED',\n    UpdateConsignmentFailed = 'UPDATE_CONSIGNMENT_FAILED',\n\n    DeleteConsignmentRequested = 'DELETE_CONSIGNMENT_REQUESTED',\n    DeleteConsignmentSucceeded = 'DELETE_CONSIGNMENT_SUCCEEDED',\n    DeleteConsignmentFailed = 'DELETE_CONSIGNMENT_FAILED',\n\n    UpdateShippingOptionRequested = 'UPDATE_SHIPPING_OPTION_REQUESTED',\n    UpdateShippingOptionSucceeded = 'UPDATE_SHIPPING_OPTION_SUCCEEDED',\n    UpdateShippingOptionFailed = 'UPDATE_SHIPPING_OPTION_FAILED',\n\n    LoadShippingOptionsRequested = 'LOAD_SHIPPING_OPTIONS_REQUESTED',\n    LoadShippingOptionsSucceeded = 'LOAD_SHIPPING_OPTIONS_SUCCEEDED',\n    LoadShippingOptionsFailed = 'LOAD_SHIPPING_OPTIONS_FAILED',\n}\n\nexport type ConsignmentAction =\n    CreateConsignmentsAction |\n    UpdateConsignmentAction |\n    DeleteConsignmentAction |\n    UpdateShippingOptionAction |\n    LoadShippingOptionsAction;\n\nexport type CreateConsignmentsAction =\n    CreateConsignmentsRequestedAction |\n    CreateConsignmentsSucceededAction |\n    CreateConsignmentsFailedAction;\n\nexport type UpdateConsignmentAction =\n    UpdateConsignmentRequestedAction |\n    UpdateConsignmentSucceededAction |\n    UpdateConsignmentFailedAction;\n\nexport type DeleteConsignmentAction =\n    DeleteConsignmentRequestedAction |\n    DeleteConsignmentSucceededAction |\n    DeleteConsignmentFailedAction;\n\nexport type UpdateShippingOptionAction =\n    UpdateShippingOptionRequestedAction |\n    UpdateShippingOptionSucceededAction |\n    UpdateShippingOptionFailedAction;\n\nexport type LoadShippingOptionsAction =\n    LoadShippingOptionsRequestedAction |\n    LoadShippingOptionsSucceededAction |\n    LoadShippingOptionsFailedAction;\n\nexport interface CreateConsignmentsRequestedAction extends Action {\n    type: ConsignmentActionType.CreateConsignmentsRequested;\n}\n\nexport interface CreateConsignmentsSucceededAction extends Action<Checkout> {\n    type: ConsignmentActionType.CreateConsignmentsSucceeded;\n}\n\nexport interface CreateConsignmentsFailedAction extends Action<Error> {\n    type: ConsignmentActionType.CreateConsignmentsFailed;\n}\n\nexport interface UpdateConsignmentRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentRequested;\n}\n\nexport interface UpdateConsignmentSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentSucceeded;\n}\n\nexport interface UpdateConsignmentFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentFailed;\n}\n\nexport interface DeleteConsignmentRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentRequested;\n}\n\nexport interface DeleteConsignmentSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentSucceeded;\n}\n\nexport interface DeleteConsignmentFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentFailed;\n}\n\nexport interface UpdateShippingOptionRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionRequested;\n}\n\nexport interface UpdateShippingOptionSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionSucceeded;\n}\n\nexport interface UpdateShippingOptionFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionFailed;\n}\n\nexport interface LoadShippingOptionsRequestedAction extends Action {\n    type: ConsignmentActionType.LoadShippingOptionsRequested;\n}\n\nexport interface LoadShippingOptionsSucceededAction extends Action<Checkout> {\n    type: ConsignmentActionType.LoadShippingOptionsSucceeded;\n}\n\nexport interface LoadShippingOptionsFailedAction extends Action<Error> {\n    type: ConsignmentActionType.LoadShippingOptionsFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum CustomerStrategyActionType {\n    SignInFailed = 'CUSTOMER_STRATEGY_SIGN_IN_FAILED',\n    SignInRequested = 'CUSTOMER_STRATEGY_SIGN_IN_REQUESTED',\n    SignInSucceeded = 'CUSTOMER_STRATEGY_SIGN_IN_SUCCEEDED',\n    SignOutFailed = 'CUSTOMER_STRATEGY_SIGN_OUT_FAILED',\n    SignOutRequested = 'CUSTOMER_STRATEGY_SIGN_OUT_REQUESTED',\n    SignOutSucceeded = 'CUSTOMER_STRATEGY_SIGN_OUT_SUCCEEDED',\n    InitializeFailed = 'CUSTOMER_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'CUSTOMER_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'CUSTOMER_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'CUSTOMER_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'CUSTOMER_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'CUSTOMER_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type CustomerStrategyAction =\n    CustomerStrategySignInAction |\n    CustomerStrategySignOutAction |\n    CustomerStrategyInitializeAction |\n    CustomerStrategyDeinitializeAction |\n    CustomerStrategyWidgetAction;\n\nexport type CustomerStrategySignInAction =\n    SignInRequestedAction |\n    SignInSucceededAction |\n    SignInFailedAction;\n\nexport type CustomerStrategySignOutAction =\n    SignOutRequestedAction |\n    SignOutSucceededAction |\n    SignOutFailedAction;\n\nexport type CustomerStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type CustomerStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport type CustomerStrategyWidgetAction =\n    WidgetInteractionStartedAction |\n    WidgetInteractionFinishedAction |\n    WidgetInteractionFailedAction;\n\nexport interface SignInRequestedAction extends Action {\n    type: CustomerStrategyActionType.SignInRequested;\n}\n\nexport interface SignInSucceededAction extends Action {\n    type: CustomerStrategyActionType.SignInSucceeded;\n}\n\nexport interface SignInFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.SignInFailed;\n}\n\nexport interface SignOutRequestedAction extends Action {\n    type: CustomerStrategyActionType.SignOutRequested;\n}\n\nexport interface SignOutSucceededAction extends Action {\n    type: CustomerStrategyActionType.SignOutSucceeded;\n}\n\nexport interface SignOutFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.SignOutFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: CustomerStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: CustomerStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: CustomerStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: CustomerStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: CustomerStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: CustomerStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.WidgetInteractionFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadOrderPaymentsAction } from '../order';\n\nexport enum PaymentStrategyActionType {\n    ExecuteFailed = 'PAYMENT_STRATEGY_EXECUTE_FAILED',\n    ExecuteRequested = 'PAYMENT_STRATEGY_EXECUTE_REQUESTED',\n    ExecuteSucceeded = 'PAYMENT_STRATEGY_EXECUTE_SUCCEEDED',\n    FinalizeFailed = 'PAYMENT_STRATEGY_FINALIZE_FAILED',\n    FinalizeRequested = 'PAYMENT_STRATEGY_FINALIZE_REQUESTED',\n    FinalizeSucceeded = 'PAYMENT_STRATEGY_FINALIZE_SUCCEEDED',\n    InitializeFailed = 'PAYMENT_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'PAYMENT_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'PAYMENT_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'PAYMENT_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'PAYMENT_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'PAYMENT_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type PaymentStrategyAction =\n    PaymentStrategyExecuteAction |\n    PaymentStrategyFinalizeAction |\n    PaymentStrategyInitializeAction |\n    PaymentStrategyDeinitializeAction |\n    PaymentStrategyWidgetAction;\n\nexport type PaymentStrategyExecuteAction =\n    ExecuteRequestedAction |\n    ExecuteSucceededAction |\n    ExecuteFailedAction |\n    LoadOrderPaymentsAction;\n\nexport type PaymentStrategyFinalizeAction =\n    FinalizeRequestedAction |\n    FinalizeSucceededAction |\n    FinalizeFailedAction |\n    LoadOrderPaymentsAction;\n\nexport type PaymentStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type PaymentStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport type PaymentStrategyWidgetAction =\n    WidgetInteractionStartedAction |\n    WidgetInteractionFinishedAction |\n    WidgetInteractionFailedAction;\n\nexport interface ExecuteRequestedAction extends Action {\n    type: PaymentStrategyActionType.ExecuteRequested;\n}\n\nexport interface ExecuteSucceededAction extends Action {\n    type: PaymentStrategyActionType.ExecuteSucceeded;\n}\n\nexport interface ExecuteFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.ExecuteFailed;\n}\n\nexport interface FinalizeRequestedAction extends Action {\n    type: PaymentStrategyActionType.FinalizeRequested;\n}\n\nexport interface FinalizeSucceededAction extends Action {\n    type: PaymentStrategyActionType.FinalizeSucceeded;\n}\n\nexport interface FinalizeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.FinalizeFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: PaymentStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: PaymentStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: PaymentStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: PaymentStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: PaymentStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: PaymentStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.WidgetInteractionFailed;\n}\n","import StandardError from './standard-error';\n\nexport enum MissingDataErrorType {\n    MissingBillingAddress,\n    MissingCart,\n    MissingCheckout,\n    MissingConsignments,\n    MissingCheckoutConfig,\n    MissingOrder,\n    MissingOrderConfig,\n    MissingOrderId,\n    MissingPayment,\n    MissingPaymentMethod,\n    MissingShippingAddress,\n}\n\nexport default class MissingDataError extends StandardError {\n    constructor(\n        public subtype: MissingDataErrorType\n    ) {\n        super(getErrorMessage(subtype));\n\n        this.type = 'missing_data';\n    }\n}\n\nfunction getErrorMessage(type: MissingDataErrorType): string {\n    switch (type) {\n    case MissingDataErrorType.MissingBillingAddress:\n        return 'Unable to proceed because billing address data is unavailable.';\n\n    case MissingDataErrorType.MissingCart:\n        return 'Unable to proceed because cart data is unavailable.';\n\n    case MissingDataErrorType.MissingConsignments:\n        return 'Unable to proceed because consignments data is unavailable.';\n\n    case MissingDataErrorType.MissingCheckout:\n        return 'Unable to proceed because checkout data is unavailable.';\n\n    case MissingDataErrorType.MissingCheckoutConfig:\n    case MissingDataErrorType.MissingOrderConfig:\n        return 'Unable to proceed because configuration data is unavailable.';\n\n    case MissingDataErrorType.MissingOrder:\n        return 'Unable to proceed because order data is unavailable.';\n\n    case MissingDataErrorType.MissingOrderId:\n        return 'Unable to proceed because order ID is unavailable or not generated yet.';\n\n    case MissingDataErrorType.MissingPayment:\n        return 'Unable to proceed because payment data is unavailable.';\n\n    case MissingDataErrorType.MissingPaymentMethod:\n        return 'Unable to proceed because payment method data is unavailable or not properly configured.';\n\n    case MissingDataErrorType.MissingShippingAddress:\n        return 'Unable to proceed because shipping address data is unavailable.';\n\n    default:\n        return 'Unable to proceed because the required data is unavailable.';\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum ShippingStrategyActionType {\n    UpdateAddressFailed = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_FAILED',\n    UpdateAddressRequested = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_REQUESTED',\n    UpdateAddressSucceeded = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_SUCCEEDED',\n    SelectOptionFailed = 'SHIPPING_STRATEGY_SELECT_OPTION_FAILED',\n    SelectOptionRequested = 'SHIPPING_STRATEGY_SELECT_OPTION_REQUESTED',\n    SelectOptionSucceeded = 'SHIPPING_STRATEGY_SELECT_OPTION_SUCCEEDED',\n    InitializeFailed = 'SHIPPING_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'SHIPPING_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'SHIPPING_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'SHIPPING_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'SHIPPING_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'SHIPPING_STRATEGY_DEINITIALIZE_SUCCEEDED',\n}\n\nexport type ShippingStrategyAction =\n    ShippingStrategyUpdateAddressAction |\n    ShippingStrategySelectOptionAction |\n    ShippingStrategyInitializeAction |\n    ShippingStrategyDeinitializeAction;\n\nexport type ShippingStrategyUpdateAddressAction =\n    UpdateAddressRequestedAction |\n    UpdateAddressSucceededAction |\n    UpdateAddressFailedAction;\n\nexport type ShippingStrategySelectOptionAction =\n    SelectOptionRequestedAction |\n    SelectOptionSucceededAction |\n    SelectOptionFailedAction;\n\nexport type ShippingStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type ShippingStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport interface UpdateAddressRequestedAction extends Action {\n    type: ShippingStrategyActionType.UpdateAddressRequested;\n}\n\nexport interface UpdateAddressSucceededAction extends Action {\n    type: ShippingStrategyActionType.UpdateAddressSucceeded;\n}\n\nexport interface UpdateAddressFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.UpdateAddressFailed;\n}\n\nexport interface SelectOptionRequestedAction extends Action {\n    type: ShippingStrategyActionType.SelectOptionRequested;\n}\n\nexport interface SelectOptionSucceededAction extends Action {\n    type: ShippingStrategyActionType.SelectOptionSucceeded;\n}\n\nexport interface SelectOptionFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.SelectOptionFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: ShippingStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: ShippingStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: ShippingStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: ShippingStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.DeinitializeFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadConfigAction } from '../config/config-actions';\n\nimport Checkout from './checkout';\n\nexport enum CheckoutActionType {\n    LoadCheckoutRequested = 'LOAD_CHECKOUT_REQUESTED',\n    LoadCheckoutSucceeded = 'LOAD_CHECKOUT_SUCCEEDED',\n    LoadCheckoutFailed = 'LOAD_CHECKOUT_FAILED',\n\n    UpdateCheckoutRequested = 'UPDATE_CHECKOUT_REQUESTED',\n    UpdateCheckoutSucceeded = 'UPDATE_CHECKOUT_SUCCEEDED',\n    UpdateCheckoutFailed = 'UPDATE_CHECKOUT_FAILED',\n}\n\nexport type CheckoutAction = LoadCheckoutAction | UpdateCheckoutAction;\n\nexport type LoadCheckoutAction =\n    LoadCheckoutRequestedAction |\n    LoadCheckoutSucceededAction |\n    LoadCheckoutFailedAction |\n    LoadConfigAction;\n\nexport type UpdateCheckoutAction =\n    UpdateCheckoutRequestedAction |\n    UpdateCheckoutSucceededAction |\n    UpdateCheckoutFailedAction;\n\nexport interface LoadCheckoutRequestedAction extends Action {\n    type: CheckoutActionType.LoadCheckoutRequested;\n}\n\nexport interface LoadCheckoutSucceededAction extends Action<Checkout> {\n    type: CheckoutActionType.LoadCheckoutSucceeded;\n}\n\nexport interface LoadCheckoutFailedAction extends Action<Error> {\n    type: CheckoutActionType.LoadCheckoutFailed;\n}\n\nexport interface UpdateCheckoutRequestedAction extends Action {\n    type: CheckoutActionType.UpdateCheckoutRequested;\n}\n\nexport interface UpdateCheckoutSucceededAction extends Action<Checkout> {\n    type: CheckoutActionType.UpdateCheckoutSucceeded;\n}\n\nexport interface UpdateCheckoutFailedAction extends Action<Error> {\n    type: CheckoutActionType.UpdateCheckoutFailed;\n}\n","import { setPrototypeOf } from '../../utility';\n\nimport CustomError from './custom-error';\n\nexport default class StandardError extends Error implements CustomError {\n    type = 'standard';\n\n    constructor(message?: string) {\n        super(message || 'An unexpected error has occurred.');\n\n        setPrototypeOf(this, new.target.prototype);\n\n        if (typeof Error.captureStackTrace === 'function') {\n            Error.captureStackTrace(this, new.target);\n        } else {\n            this.stack = (new Error(this.message)).stack;\n        }\n    }\n}\n","export default function setPrototypeOf(object: any, prototype: object) {\n    if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(object, prototype);\n    } else {\n        object.__proto__ = prototype;\n    }\n\n    return object;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\nimport { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nexport enum CouponActionType {\n    ApplyCouponRequested = 'APPLY_COUPON_REQUESTED',\n    ApplyCouponSucceeded = 'APPLY_COUPON_SUCCEEDED',\n    ApplyCouponFailed = 'APPLY_COUPON_FAILED',\n\n    RemoveCouponRequested = 'REMOVE_COUPON_REQUESTED',\n    RemoveCouponSucceeded = 'REMOVE_COUPON_SUCCEEDED',\n    RemoveCouponFailed = 'REMOVE_COUPON_FAILED',\n}\n\nexport type CouponAction =\n    ApplyCouponAction |\n    RemoveCouponAction;\n\nexport type ApplyCouponAction =\n    ApplyCouponRequestedAction |\n    ApplyCouponSucceededAction |\n    ApplyCouponFailedAction;\n\nexport type RemoveCouponAction =\n    RemoveCouponRequestedAction |\n    RemoveCouponSucceededAction |\n    RemoveCouponFailedAction;\n\nexport interface ApplyCouponRequestedAction extends Action {\n    type: CouponActionType.ApplyCouponRequested;\n}\n\nexport interface ApplyCouponSucceededAction extends Action<Checkout> {\n    type: CouponActionType.ApplyCouponSucceeded;\n}\n\nexport interface ApplyCouponFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: CouponActionType.ApplyCouponFailed;\n}\n\nexport interface RemoveCouponRequestedAction extends Action {\n    type: CouponActionType.RemoveCouponRequested;\n}\n\nexport interface RemoveCouponSucceededAction extends Action<Checkout> {\n    type: CouponActionType.RemoveCouponSucceeded;\n}\n\nexport interface RemoveCouponFailedAction extends Action<RequestError> {\n    type: CouponActionType.RemoveCouponFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nexport enum BillingAddressActionType {\n    UpdateBillingAddressRequested = 'UPDATE_BILLING_ADDRESS_REQUESTED',\n    UpdateBillingAddressSucceeded = 'UPDATE_BILLING_ADDRESS_SUCCEEDED',\n    UpdateBillingAddressFailed = 'UPDATE_BILLING_ADDRESS_FAILED',\n\n    ContinueAsGuestRequested = 'CONTINUE_AS_GUEST_REQUESTED',\n    ContinueAsGuestSucceeded = 'CONTINUE_AS_GUEST_SUCCEEDED',\n    ContinueAsGuestFailed = 'CONTINUE_AS_GUEST_FAILED',\n}\n\nexport type BillingAddressAction =\n    ContinueAsGuestAction |\n    UpdateBillingAddressAction;\n\nexport type UpdateBillingAddressAction =\n    UpdateBillingAddressRequested |\n    UpdateBillingAddressSucceeded |\n    UpdateBillingAddressFailed;\n\nexport type ContinueAsGuestAction =\n    ContinueAsGuestRequested |\n    ContinueAsGuestSucceeded |\n    ContinueAsGuestFailed;\n\nexport interface UpdateBillingAddressRequested extends Action {\n    type: BillingAddressActionType.UpdateBillingAddressRequested;\n}\n\nexport interface UpdateBillingAddressSucceeded extends Action<Checkout> {\n    type: BillingAddressActionType.UpdateBillingAddressSucceeded;\n}\n\nexport interface UpdateBillingAddressFailed extends Action<Error> {\n    type: BillingAddressActionType.UpdateBillingAddressFailed;\n}\n\nexport interface ContinueAsGuestRequested extends Action {\n    type: BillingAddressActionType.ContinueAsGuestRequested;\n}\n\nexport interface ContinueAsGuestSucceeded extends Action<Checkout> {\n    type: BillingAddressActionType.ContinueAsGuestSucceeded;\n}\n\nexport interface ContinueAsGuestFailed extends Action<Error> {\n    type: BillingAddressActionType.ContinueAsGuestFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { InternalOrderResponseData } from './internal-order-responses';\nimport Order from './order';\n\nexport enum OrderActionType {\n    LoadOrderRequested = 'LOAD_ORDER_REQUESTED',\n    LoadOrderSucceeded = 'LOAD_ORDER_SUCCEEDED',\n    LoadOrderFailed = 'LOAD_ORDER_FAILED',\n\n    LoadOrderPaymentsRequested = 'LOAD_ORDER_PAYMENTS_REQUESTED',\n    LoadOrderPaymentsSucceeded = 'LOAD_ORDER_PAYMENTS_SUCCEEDED',\n    LoadOrderPaymentsFailed = 'LOAD_ORDER_PAYMENTS_FAILED',\n\n    SubmitOrderRequested = 'SUBMIT_ORDER_REQUESTED',\n    SubmitOrderSucceeded = 'SUBMIT_ORDER_SUCCEEDED',\n    SubmitOrderFailed = 'SUBMIT_ORDER_FAILED',\n\n    FinalizeOrderRequested = 'FINALIZE_ORDER_REQUESTED',\n    FinalizeOrderSucceeded = 'FINALIZE_ORDER_SUCCEEDED',\n    FinalizeOrderFailed = 'FINALIZE_ORDER_FAILED',\n}\n\nexport type OrderAction = LoadOrderAction |\n    LoadOrderPaymentsAction |\n    SubmitOrderAction |\n    FinalizeOrderAction;\n\nexport type LoadOrderPaymentsAction = LoadOrderPaymentsRequestedAction |\n    LoadOrderPaymentsSucceededAction |\n    LoadOrderPaymentsFailedAction;\n\nexport type LoadOrderAction =\n    LoadOrderRequestedAction |\n    LoadOrderSucceededAction |\n    LoadOrderFailedAction;\n\nexport type SubmitOrderAction =\n    SubmitOrderRequestedAction |\n    SubmitOrderSucceededAction |\n    SubmitOrderFailedAction |\n    LoadOrderAction;\n\nexport type FinalizeOrderAction =\n    FinalizeOrderRequestedAction |\n    FinalizeOrderSucceededAction |\n    FinalizeOrderFailedAction |\n    LoadOrderAction;\n\nexport interface LoadOrderRequestedAction extends Action {\n    type: OrderActionType.LoadOrderRequested;\n}\n\nexport interface LoadOrderSucceededAction extends Action<Order> {\n    type: OrderActionType.LoadOrderSucceeded;\n}\n\nexport interface LoadOrderFailedAction extends Action<Error> {\n    type: OrderActionType.LoadOrderFailed;\n}\n\nexport interface LoadOrderPaymentsRequestedAction extends Action {\n    type: OrderActionType.LoadOrderPaymentsRequested;\n}\n\nexport interface LoadOrderPaymentsSucceededAction extends Action<Order> {\n    type: OrderActionType.LoadOrderPaymentsSucceeded;\n}\n\nexport interface LoadOrderPaymentsFailedAction extends Action<Error> {\n    type: OrderActionType.LoadOrderPaymentsFailed;\n}\n\nexport interface SubmitOrderRequestedAction extends Action {\n    type: OrderActionType.SubmitOrderRequested;\n}\n\nexport interface SubmitOrderSucceededAction extends Action<InternalOrderResponseData> {\n    type: OrderActionType.SubmitOrderSucceeded;\n}\n\nexport interface SubmitOrderFailedAction extends Action<Error> {\n    type: OrderActionType.SubmitOrderFailed;\n}\n\nexport interface FinalizeOrderRequestedAction extends Action {\n    type: OrderActionType.FinalizeOrderRequested;\n}\n\nexport interface FinalizeOrderSucceededAction extends Action<InternalOrderResponseData> {\n    type: OrderActionType.FinalizeOrderSucceeded;\n}\n\nexport interface FinalizeOrderFailedAction extends Action<Error> {\n    type: OrderActionType.FinalizeOrderFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\n\nexport enum PaymentMethodActionType {\n    LoadPaymentMethodRequested = 'LOAD_PAYMENT_METHOD_REQUESTED',\n    LoadPaymentMethodSucceeded = 'LOAD_PAYMENT_METHOD_SUCCEEDED',\n    LoadPaymentMethodFailed = 'LOAD_PAYMENT_METHOD_FAILED',\n\n    LoadPaymentMethodsRequested = 'LOAD_PAYMENT_METHODS_REQUESTED',\n    LoadPaymentMethodsSucceeded = 'LOAD_PAYMENT_METHODS_SUCCEEDED',\n    LoadPaymentMethodsFailed = 'LOAD_PAYMENT_METHODS_FAILED',\n}\n\nexport type PaymentMethodAction = LoadPaymentMethodAction | LoadPaymentMethodsAction;\n\nexport type LoadPaymentMethodAction =\n    LoadPaymentMethodRequestedAction |\n    LoadPaymentMethodSucceededAction |\n    LoadPaymentMethodFailedAction;\n\nexport type LoadPaymentMethodsAction =\n    LoadPaymentMethodsRequestedAction |\n    LoadPaymentMethodsSucceededAction |\n    LoadPaymentMethodsFailedAction;\n\nexport interface LoadPaymentMethodRequestedAction extends Action {\n    type: PaymentMethodActionType.LoadPaymentMethodRequested;\n}\n\nexport interface LoadPaymentMethodSucceededAction extends Action<PaymentMethod> {\n    type: PaymentMethodActionType.LoadPaymentMethodSucceeded;\n}\n\nexport interface LoadPaymentMethodFailedAction extends Action<Error> {\n    type: PaymentMethodActionType.LoadPaymentMethodFailed;\n}\n\nexport interface LoadPaymentMethodsRequestedAction extends Action {\n    type: PaymentMethodActionType.LoadPaymentMethodsRequested;\n}\n\nexport interface LoadPaymentMethodsSucceededAction extends Action<PaymentMethod[], PaymentMethodMeta> {\n    type: PaymentMethodActionType.LoadPaymentMethodsSucceeded;\n}\n\nexport interface LoadPaymentMethodsFailedAction extends Action<Error> {\n    type: PaymentMethodActionType.LoadPaymentMethodsFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadPaymentMethodAction } from '../payment';\n\nimport { CheckoutButtonMethodType } from './strategies';\n\nexport enum CheckoutButtonActionType {\n    InitializeButtonFailed = 'INITIALIZE_BUTTON_FAILED',\n    InitializeButtonRequested = 'INITIALIZE_BUTTON_REQUESTED',\n    InitializeButtonSucceeded = 'INITIALIZE_BUTTON_SUCCEEDED',\n\n    DeinitializeButtonFailed = 'DEINITIALIZE_BUTTON_FAILED',\n    DeinitializeButtonRequested = 'DEINITIALIZE_BUTTON_REQUESTED',\n    DeinitializeButtonSucceeded = 'DEINITIALIZE_BUTTON_SUCCEEDED',\n}\n\nexport type CheckoutButtonAction = InitializeButtonAction | DeinitializeButtonAction;\n\nexport type InitializeButtonAction =\n    InitializeButtonRequestedAction |\n    InitializeButtonSucceededAction |\n    InitializeButtonFailedAction |\n    LoadPaymentMethodAction;\n\nexport type DeinitializeButtonAction =\n    DeinitializeButtonRequestedAction |\n    DeinitializeButtonSucceededAction |\n    DeinitializeButtonFailedAction;\n\nexport interface CheckoutButtonActionMeta {\n    methodId: CheckoutButtonMethodType;\n}\n\nexport interface InitializeButtonActionMeta extends CheckoutButtonActionMeta {\n    containerId: string;\n}\n\nexport interface InitializeButtonRequestedAction extends Action<undefined, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonRequested;\n}\n\nexport interface InitializeButtonSucceededAction extends Action<undefined, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonSucceeded;\n}\n\nexport interface InitializeButtonFailedAction extends Action<Error, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonFailed;\n}\n\nexport interface DeinitializeButtonRequestedAction extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonRequested;\n}\n\nexport interface DeinitializeButtonSucceededAction extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonSucceeded;\n}\n\nexport interface DeinitializeButtonFailedAction extends Action<Error, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\nimport { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nexport enum GiftCertificateActionType {\n    ApplyGiftCertificateRequested = 'APPLY_GIFT_CERTIFICATE_REQUESTED',\n    ApplyGiftCertificateSucceeded = 'APPLY_GIFT_CERTIFICATE_SUCCEEDED',\n    ApplyGiftCertificateFailed = 'APPLY_GIFT_CERTIFICATE_FAILED',\n\n    RemoveGiftCertificateRequested = 'REMOVE_GIFT_CERTIFICATE_REQUESTED',\n    RemoveGiftCertificateSucceeded = 'REMOVE_GIFT_CERTIFICATE_SUCCEEDED',\n    RemoveGiftCertificateFailed = 'REMOVE_GIFT_CERTIFICATE_FAILED',\n}\n\nexport type GiftCertificateAction =\n    ApplyGiftCertificateAction |\n    RemoveGiftCertificateAction;\n\nexport type ApplyGiftCertificateAction =\n    ApplyGiftCertificateRequestedAction |\n    ApplyGiftCertificateSucceededAction |\n    ApplyGiftCertificateFailedAction;\n\nexport type RemoveGiftCertificateAction =\n    RemoveGiftCertificateRequestedAction |\n    RemoveGiftCertificateSucceededAction |\n    RemoveGiftCertificateFailedAction;\n\nexport interface ApplyGiftCertificateRequestedAction extends Action {\n    type: GiftCertificateActionType.ApplyGiftCertificateRequested;\n}\n\nexport interface ApplyGiftCertificateSucceededAction extends Action<Checkout> {\n    type: GiftCertificateActionType.ApplyGiftCertificateSucceeded;\n}\n\nexport interface ApplyGiftCertificateFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: GiftCertificateActionType.ApplyGiftCertificateFailed;\n}\n\nexport interface RemoveGiftCertificateRequestedAction extends Action {\n    type: GiftCertificateActionType.RemoveGiftCertificateRequested;\n}\n\nexport interface RemoveGiftCertificateSucceededAction extends Action<Checkout> {\n    type: GiftCertificateActionType.RemoveGiftCertificateSucceeded;\n}\n\nexport interface RemoveGiftCertificateFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: GiftCertificateActionType.RemoveGiftCertificateFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { InstrumentsResponseBody } from './instrument-response-body';\n\nexport enum InstrumentActionType {\n    LoadInstrumentsRequested = 'LOAD_INSTRUMENTS_REQUESTED',\n    LoadInstrumentsSucceeded = 'LOAD_INSTRUMENTS_SUCCEEDED',\n    LoadInstrumentsFailed = 'LOAD_INSTRUMENTS_FAILED',\n\n    DeleteInstrumentRequested = 'DELETE_INSTRUMENT_REQUESTED',\n    DeleteInstrumentSucceeded = 'DELETE_INSTRUMENT_SUCCEEDED',\n    DeleteInstrumentFailed = 'DELETE_INSTRUMENT_FAILED',\n}\n\nexport type InstrumentAction =\n    LoadInstrumentsAction |\n    DeleteInstrumentAction;\n\nexport type LoadInstrumentsAction =\n    LoadInstrumentsRequestedAction |\n    LoadInstrumentsSucceededAction |\n    LoadInstrumentsFailedAction;\n\nexport type DeleteInstrumentAction =\n    DeleteInstrumentRequestedAction |\n    DeleteInstrumentSucceededAction |\n    DeleteInstrumentFailedAction;\n\nexport interface LoadInstrumentsRequestedAction extends Action {\n    type: InstrumentActionType.LoadInstrumentsRequested;\n}\n\nexport interface LoadInstrumentsSucceededAction extends Action<InstrumentsResponseBody> {\n    type: InstrumentActionType.LoadInstrumentsSucceeded;\n}\n\nexport interface LoadInstrumentsFailedAction extends Action<Error> {\n    type: InstrumentActionType.LoadInstrumentsFailed;\n}\n\nexport interface DeleteInstrumentRequestedAction extends Action {\n    type: InstrumentActionType.DeleteInstrumentRequested;\n}\n\nexport interface DeleteInstrumentSucceededAction extends Action<InstrumentsResponseBody> {\n    type: InstrumentActionType.DeleteInstrumentSucceeded;\n}\n\nexport interface DeleteInstrumentFailedAction extends Action<Error> {\n    type: InstrumentActionType.DeleteInstrumentFailed;\n}\n","module.exports = require(\"rxjs/operators\");","import EmbeddedCheckoutError from './embedded-checkout-error';\nimport EmbeddedContentOptions from './iframe-content/embedded-content-options';\n\nexport enum EmbeddedCheckoutEventType {\n    CheckoutComplete = 'CHECKOUT_COMPLETE',\n    CheckoutError = 'CHECKOUT_ERROR',\n    CheckoutLoaded = 'CHECKOUT_LOADED',\n    FrameError = 'FRAME_ERROR',\n    FrameLoaded = 'FRAME_LOADED',\n    SignedOut = 'SIGNED_OUT',\n}\n\nexport interface EmbeddedCheckoutEventMap {\n    [EmbeddedCheckoutEventType.CheckoutComplete]: EmbeddedCheckoutCompleteEvent;\n    [EmbeddedCheckoutEventType.CheckoutError]: EmbeddedCheckoutErrorEvent;\n    [EmbeddedCheckoutEventType.CheckoutLoaded]: EmbeddedCheckoutLoadedEvent;\n    [EmbeddedCheckoutEventType.FrameError]: EmbeddedCheckoutFrameErrorEvent;\n    [EmbeddedCheckoutEventType.FrameLoaded]: EmbeddedCheckoutFrameLoadedEvent;\n    [EmbeddedCheckoutEventType.SignedOut]: EmbeddedCheckoutSignedOutEvent;\n}\n\nexport type EmbeddedCheckoutEvent = (\n    EmbeddedCheckoutCompleteEvent |\n    EmbeddedCheckoutErrorEvent |\n    EmbeddedCheckoutFrameErrorEvent |\n    EmbeddedCheckoutFrameLoadedEvent |\n    EmbeddedCheckoutLoadedEvent |\n    EmbeddedCheckoutSignedOutEvent\n);\n\nexport interface EmbeddedCheckoutCompleteEvent {\n    type: EmbeddedCheckoutEventType.CheckoutComplete;\n}\n\nexport interface EmbeddedCheckoutErrorEvent {\n    type: EmbeddedCheckoutEventType.CheckoutError;\n    payload: EmbeddedCheckoutError;\n}\n\nexport interface EmbeddedCheckoutLoadedEvent {\n    type: EmbeddedCheckoutEventType.CheckoutLoaded;\n}\n\nexport interface EmbeddedCheckoutFrameErrorEvent {\n    type: EmbeddedCheckoutEventType.FrameError;\n    payload: EmbeddedCheckoutError;\n}\n\nexport interface EmbeddedCheckoutFrameLoadedEvent {\n    type: EmbeddedCheckoutEventType.FrameLoaded;\n    payload?: EmbeddedContentOptions;\n}\n\nexport interface EmbeddedCheckoutSignedOutEvent {\n    type: EmbeddedCheckoutEventType.SignedOut;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { AmazonPayRemoteCheckout } from './methods';\n\nexport enum RemoteCheckoutActionType {\n    InitializeRemoteBillingRequested = 'INITIALIZE_REMOTE_BILLING_REQUESTED',\n    InitializeRemoteBillingSucceeded = 'INITIALIZE_REMOTE_BILLING_SUCCEEDED',\n    InitializeRemoteBillingFailed = 'INITIALIZE_REMOTE_BILLING_FAILED',\n\n    InitializeRemoteShippingRequested = 'INITIALIZE_REMOTE_SHIPPING_REQUESTED',\n    InitializeRemoteShippingSucceeded = 'INITIALIZE_REMOTE_SHIPPING_SUCCEEDED',\n    InitializeRemoteShippingFailed = 'INITIALIZE_REMOTE_SHIPPING_FAILED',\n\n    InitializeRemotePaymentRequested = 'INITIALIZE_REMOTE_PAYMENT_REQUESTED',\n    InitializeRemotePaymentSucceeded = 'INITIALIZE_REMOTE_PAYMENT_SUCCEEDED',\n    InitializeRemotePaymentFailed = 'INITIALIZE_REMOTE_PAYMENT_FAILED',\n\n    LoadRemoteSettingsRequested = 'LOAD_REMOTE_SETTINGS_REQUESTED',\n    LoadRemoteSettingsSucceeded = 'LOAD_REMOTE_SETTINGS_SUCCEEDED',\n    LoadRemoteSettingsFailed = 'LOAD_REMOTE_SETTINGS_FAILED',\n\n    SignOutRemoteCustomerRequested = 'SIGN_OUT_REMOTE_CUSTOMER_REQUESTED',\n    SignOutRemoteCustomerSucceeded = 'SIGN_OUT_REMOTE_CUSTOMER_SUCCEEDED',\n    SignOutRemoteCustomerFailed = 'SIGN_OUT_REMOTE_CUSTOMER_FAILED',\n\n    UpdateRemoteCheckout = 'UPDATE_REMOTE_CHECKOUT',\n}\n\nexport type RemoteCheckoutAction = InitializeRemoteBillingAction |\n    InitializeRemoteShippingAction |\n    InitializeRemotePaymentAction |\n    SignOutRemoteCustomerAction |\n    LoadRemoteSettingsAction |\n    UpdateRemoteCheckoutAction;\n\nexport type InitializeRemoteBillingAction = InitializeRemoteBillingSucceededAction |\n    InitializeRemoteBillingFailedAction |\n    InitializeRemoteBillingRequestedAction;\n\nexport interface InitializeRemoteBillingSucceededAction extends Action<AmazonPayRemoteCheckout> {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingSucceeded;\n}\n\nexport interface InitializeRemoteBillingFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingFailed;\n}\n\nexport interface InitializeRemoteBillingRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingRequested;\n}\n\nexport type InitializeRemoteShippingAction = InitializeRemoteShippingSucceededAction |\n    InitializeRemoteShippingFailedAction |\n    InitializeRemoteShippingRequestedAction;\n\nexport interface InitializeRemoteShippingSucceededAction extends Action<AmazonPayRemoteCheckout> {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingSucceeded;\n}\n\nexport interface InitializeRemoteShippingFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingFailed;\n}\n\nexport interface InitializeRemoteShippingRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingRequested;\n}\n\nexport type InitializeRemotePaymentAction = InitializeRemotePaymentSucceededAction |\n    InitializeRemotePaymentFailedAction |\n    InitializeRemotePaymentRequestedAction;\n\nexport interface InitializeRemotePaymentSucceededAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentSucceeded;\n}\n\nexport interface InitializeRemotePaymentFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentFailed;\n}\n\nexport interface InitializeRemotePaymentRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentRequested;\n}\n\nexport type SignOutRemoteCustomerAction = SignOutRemoteCustomerSucceededAction |\n    SignOutRemoteCustomerFailedAction |\n    SignOutRemoteCustomerRequestedAction;\n\nexport interface SignOutRemoteCustomerSucceededAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerSucceeded;\n}\n\nexport interface SignOutRemoteCustomerFailedAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerFailed;\n}\n\nexport interface SignOutRemoteCustomerRequestedAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerRequested;\n}\n\nexport type LoadRemoteSettingsAction = LoadRemoteSettingsSucceededAction |\n    LoadRemoteSettingsRequestedAction |\n    LoadRemoteSettingsFailedAction;\n\nexport interface LoadRemoteSettingsSucceededAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsSucceeded;\n}\n\nexport interface LoadRemoteSettingsRequestedAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsRequested;\n}\n\nexport interface LoadRemoteSettingsFailedAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsFailed;\n}\n\nexport interface UpdateRemoteCheckoutAction extends Action {\n    type: RemoteCheckoutActionType.UpdateRemoteCheckout;\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport StandardError from './standard-error';\n\nconst DEFAULT_RESPONSE = {\n    body: {},\n    headers: {},\n    status: 0,\n};\n\nexport default class RequestError<TBody = any> extends StandardError {\n    body: TBody | {};\n    headers: { [key: string]: any; };\n    errors: Array<{ code: string, message?: string }>;\n    status: number;\n\n    constructor(\n        response?: Response<TBody | {}>,\n        { message, errors }: {\n            message?: string;\n            errors?: Array<{ code: string, message?: string }>,\n        } = {}\n    ) {\n        const { body, headers, status } = response || DEFAULT_RESPONSE;\n\n        super(message || 'An unexpected error has occurred.');\n\n        this.type = 'request';\n        this.body = body;\n        this.headers = headers;\n        this.status = status;\n        this.errors = errors || [];\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport Config from './config';\n\nexport enum ConfigActionType {\n    LoadConfigRequested = 'LOAD_CONFIG_REQUESTED',\n    LoadConfigSucceeded = 'LOAD_CONFIG_SUCCEEDED',\n    LoadConfigFailed = 'LOAD_CONFIG_FAILED',\n}\n\nexport type LoadConfigAction =\n    LoadConfigRequestedAction |\n    LoadConfigSucceededAction |\n    LoadConfigFailedAction;\n\nexport interface LoadConfigRequestedAction extends Action {\n    type: ConfigActionType.LoadConfigRequested;\n}\n\nexport interface LoadConfigSucceededAction extends Action<Config> {\n    type: ConfigActionType.LoadConfigSucceeded;\n}\n\nexport interface LoadConfigFailedAction extends Action<Error> {\n    type: ConfigActionType.LoadConfigFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport Country from './country';\n\nexport enum CountryActionType {\n    LoadCountriesRequested = 'LOAD_COUNTRIES_REQUESTED',\n    LoadCountriesSucceeded = 'LOAD_COUNTRIES_SUCCEEDED',\n    LoadCountriesFailed = 'LOAD_COUNTRIES_FAILED',\n}\n\nexport type LoadCountriesAction =\n    LoadCountriesRequestedAction |\n    LoadCountriesSucceededAction |\n    LoadCountriesFailedAction;\n\nexport interface LoadCountriesRequestedAction extends Action {\n    type: CountryActionType.LoadCountriesRequested;\n}\n\nexport interface LoadCountriesSucceededAction extends Action<Country[]> {\n    type: CountryActionType.LoadCountriesSucceeded;\n}\n\nexport interface LoadCountriesFailedAction extends Action<Error> {\n    type: CountryActionType.LoadCountriesFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Country } from '../geography';\n\nexport enum ShippingCountryActionType {\n    LoadShippingCountriesRequested = 'LOAD_SHIPPING_COUNTRIES_REQUESTED',\n    LoadShippingCountriesSucceeded = 'LOAD_SHIPPING_COUNTRIES_SUCCEEDED',\n    LoadShippingCountriesFailed = 'LOAD_SHIPPING_COUNTRIES_FAILED',\n}\n\nexport type LoadShippingCountriesAction = LoadShippingCountriesRequestedAction |\n    LoadShippingCountriesSucceededAction |\n    LoadShippingCountriesFailedAction;\n\nexport interface LoadShippingCountriesRequestedAction extends Action {\n    type: ShippingCountryActionType.LoadShippingCountriesRequested;\n}\n\nexport interface LoadShippingCountriesSucceededAction extends Action<Country[]> {\n    type: ShippingCountryActionType.LoadShippingCountriesSucceeded;\n}\n\nexport interface LoadShippingCountriesFailedAction extends Action<Error> {\n    type: ShippingCountryActionType.LoadShippingCountriesFailed;\n}\n","module.exports = require(\"@bigcommerce/request-sender\");","export const ACKNOWLEDGE = 'ACKNOWLEDGE';\nexport const FINALIZE = 'FINALIZE';\nexport const INITIALIZE = 'INITIALIZE';\n","enum ContentType {\n    Json = 'application/json',\n    JsonV1 = 'application/vnd.bc.v1+json',\n}\n\nexport default ContentType;\n","module.exports = require(\"@bigcommerce/script-loader\");","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadOrderAction } from '../order';\n\nimport PaymentResponseBody from './payment-response-body';\n\nexport enum PaymentActionType {\n    SubmitPaymentRequested = 'SUBMIT_PAYMENT_REQUESTED',\n    SubmitPaymentSucceeded = 'SUBMIT_PAYMENT_SUCCEEDED',\n    SubmitPaymentFailed = 'SUBMIT_PAYMENT_FAILED',\n\n    InitializeOffsitePaymentRequested = 'INITIALIZE_OFFSITE_PAYMENT_REQUESTED',\n    InitializeOffsitePaymentSucceeded = 'INITIALIZE_OFFSITE_PAYMENT_SUCCEEDED',\n    InitializeOffsitePaymentFailed = 'INITIALIZE_OFFSITE_PAYMENT_FAILED',\n}\n\nexport type PaymentAction = SubmitPaymentAction |\n    InitializeOffsitePaymentAction;\n\nexport type SubmitPaymentAction =\n    SubmitPaymentRequestedAction |\n    SubmitPaymentSucceededAction |\n    SubmitPaymentFailedAction |\n    LoadOrderAction;\n\nexport type InitializeOffsitePaymentAction =\n    InitializeOffsitePaymentRequestedAction |\n    InitializeOffsitePaymentSucceededAction |\n    InitializeOffsitePaymentFailedAction;\n\nexport interface SubmitPaymentRequestedAction extends Action {\n    type: PaymentActionType.SubmitPaymentRequested;\n}\n\nexport interface SubmitPaymentSucceededAction extends Action<PaymentResponseBody> {\n    type: PaymentActionType.SubmitPaymentSucceeded;\n}\n\nexport interface SubmitPaymentFailedAction extends Action<Error> {\n    type: PaymentActionType.SubmitPaymentFailed;\n}\n\nexport interface InitializeOffsitePaymentRequestedAction extends Action {\n    type: PaymentActionType.InitializeOffsitePaymentRequested;\n}\n\nexport interface InitializeOffsitePaymentSucceededAction extends Action {\n    type: PaymentActionType.InitializeOffsitePaymentSucceeded;\n}\n\nexport interface InitializeOffsitePaymentFailedAction extends Action<Error> {\n    type: PaymentActionType.InitializeOffsitePaymentFailed;\n}\n","import StandardError from './standard-error';\n\nexport default class InvalidArgumentError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Invalid arguments have been provided.');\n\n        this.type = 'invalid_argument';\n    }\n}\n","export const HOSTED = 'PAYMENT_TYPE_HOSTED';\nexport const OFFLINE = 'PAYMENT_TYPE_OFFLINE';\n","import IframeEvent from './iframe-event';\n\nexport default function isIframeEvent<TEvent extends IframeEvent<TType>, TType extends string>(\n    object: any,\n    type: TType\n): object is TEvent {\n    return object.type === type;\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { RequestError } from '../../common/error/errors';\n\nexport default class PaymentMethodInvalidError extends RequestError {\n    constructor(response?: Response) {\n        super(response, { message: 'There is a problem processing your payment. Please try again later.' });\n\n        this.type = 'payment_method_invalid';\n    }\n}\n","export interface CompareOptions {\n    keyFilter?(key: string): boolean;\n}\n\nexport default function isEqual(objectA: any, objectB: any, options?: CompareOptions): boolean {\n    if (objectA === objectB) {\n        return true;\n    }\n\n    if (objectA && objectB && typeof objectA === 'object' && typeof objectB === 'object') {\n        if (Array.isArray(objectA) && Array.isArray(objectB)) {\n            return isArrayEqual(objectA, objectB, options);\n        }\n\n        if (Array.isArray(objectA) || Array.isArray(objectB)) {\n            return false;\n        }\n\n        if ((objectA instanceof Date) && (objectB instanceof Date)) {\n            return isDateEqual(objectA, objectB);\n        }\n\n        if ((objectA instanceof Date) || (objectB instanceof Date)) {\n            return false;\n        }\n\n        if ((objectA instanceof RegExp) && (objectB instanceof RegExp)) {\n            return isRegExpEqual(objectA, objectB);\n        }\n\n        if ((objectA instanceof RegExp) || (objectB instanceof RegExp)) {\n            return false;\n        }\n\n        return isObjectEqual(objectA, objectB, options);\n    }\n\n    return objectA === objectB;\n}\n\nfunction isRegExpEqual(objectA: RegExp, objectB: RegExp): boolean {\n    return objectA.toString() === objectB.toString();\n}\n\nfunction isDateEqual(objectA: Date, objectB: Date): boolean {\n    return objectA.getTime() === objectB.getTime();\n}\n\nfunction isArrayEqual(objectA: any[], objectB: any[], options?: CompareOptions): boolean {\n    if (objectA.length !== objectB.length) {\n        return false;\n    }\n\n    for (let index = 0, length = objectA.length; index < length; index++) {\n        if (!isEqual(objectA[index], objectB[index], options)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nfunction isObjectEqual(\n    objectA: { [key: string]: any },\n    objectB: { [key: string]: any },\n    options?: CompareOptions\n): boolean {\n    const filter = options && options.keyFilter;\n    const keysA = filter ? Object.keys(objectA).filter(filter) : Object.keys(objectA);\n    const keysB = filter ? Object.keys(objectB).filter(filter) : Object.keys(objectB);\n\n    if (keysA.length !== keysB.length) {\n        return false;\n    }\n\n    for (let index = 0, length = keysA.length; index < length; index++) {\n        const key = keysA[index];\n\n        if (!objectB.hasOwnProperty(key)) {\n            return false;\n        }\n\n        if (!isEqual(objectA[key], objectB[key], options)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n","module.exports = require(\"@bigcommerce/form-poster\");","module.exports = require(\"local-storage-fallback\");","import { parseUrl } from '../common/url';\n\nexport default class IframeEventPoster<TEvent> {\n    private _targetOrigin: string;\n\n    constructor(\n        targetOrigin: string,\n        private _targetWindow?: Window\n    ) {\n        this._targetOrigin = targetOrigin === '*' ? '*' : parseUrl(targetOrigin).origin;\n    }\n\n    post(event: TEvent): void {\n        if (window === this._targetWindow) {\n            return;\n        }\n\n        if (!this._targetWindow) {\n            throw new Error('Unable to post message becauset target window is not set.');\n        }\n\n        this._targetWindow.postMessage(event, this._targetOrigin);\n    }\n\n    setTarget(window: Window) {\n        this._targetWindow = window;\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadCheckoutAction } from '../checkout';\n\nimport { InternalCustomerResponseData } from './internal-customer-responses';\n\nexport enum CustomerActionType {\n    SignInCustomerRequested = 'SIGN_IN_CUSTOMER_REQUESTED',\n    SignInCustomerSucceeded = 'SIGN_IN_CUSTOMER_SUCCEEDED',\n    SignInCustomerFailed = 'SIGN_IN_CUSTOMER_FAILED',\n\n    SignOutCustomerRequested = 'SIGN_OUT_CUSTOMER_REQUESTED',\n    SignOutCustomerSucceeded = 'SIGN_OUT_CUSTOMER_SUCCEEDED',\n    SignOutCustomerFailed = 'SIGN_OUT_CUSTOMER_FAILED',\n}\n\nexport type CustomerAction =\n    SignInCustomerAction |\n    SignOutCustomerAction;\n\nexport type SignInCustomerAction =\n    SignInCustomerRequestedAction |\n    SignInCustomerSucceededAction |\n    SignInCustomerFailedAction |\n    LoadCheckoutAction;\n\nexport type SignOutCustomerAction =\n    SignOutCustomerRequestedAction |\n    SignOutCustomerSucceededAction |\n    SignOutCustomerFailedAction |\n    LoadCheckoutAction;\n\nexport interface SignInCustomerRequestedAction extends Action {\n    type: CustomerActionType.SignInCustomerRequested;\n}\n\nexport interface SignInCustomerSucceededAction extends Action<InternalCustomerResponseData> {\n    type: CustomerActionType.SignInCustomerSucceeded;\n}\n\nexport interface SignInCustomerFailedAction extends Action<Error> {\n    type: CustomerActionType.SignInCustomerFailed;\n}\n\nexport interface SignOutCustomerRequestedAction extends Action {\n    type: CustomerActionType.SignOutCustomerRequested;\n}\n\nexport interface SignOutCustomerSucceededAction extends Action<InternalCustomerResponseData> {\n    type: CustomerActionType.SignOutCustomerSucceeded;\n}\n\nexport interface SignOutCustomerFailedAction extends Action<Error> {\n    type: CustomerActionType.SignOutCustomerFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum ErrorActionType {\n    ClearError = 'CLEAR_ERROR',\n}\n\nexport type ErrorAction = ClearErrorAction;\n\nexport interface ClearErrorAction extends Action {\n    type: ErrorActionType.ClearError;\n    payload: Error;\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { cachableAction, ActionOptions } from '../common/action';\nimport { RequestOptions } from '../common/http-request';\n\nimport { LoadPaymentMethodsAction, LoadPaymentMethodAction, PaymentMethodActionType } from './payment-method-actions';\nimport PaymentMethodRequestSender from './payment-method-request-sender';\n\nexport default class PaymentMethodActionCreator {\n    constructor(\n        private _requestSender: PaymentMethodRequestSender\n    ) {}\n\n    loadPaymentMethods(options?: RequestOptions): Observable<LoadPaymentMethodsAction> {\n        return Observable.create((observer: Observer<LoadPaymentMethodsAction>) => {\n            observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodsRequested));\n\n            this._requestSender.loadPaymentMethods(options)\n                .then(response => {\n                    const meta = {\n                        deviceSessionId: response.headers['x-device-session-id'],\n                        sessionHash: response.headers['x-session-hash'],\n                    };\n\n                    observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodsSucceeded, response.body, meta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(PaymentMethodActionType.LoadPaymentMethodsFailed, response));\n                });\n        });\n    }\n\n    @cachableAction\n    loadPaymentMethod(methodId: string, options?: RequestOptions & ActionOptions): Observable<LoadPaymentMethodAction> {\n        return Observable.create((observer: Observer<LoadPaymentMethodAction>) => {\n            observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodRequested, undefined, { methodId }));\n\n            this._requestSender.loadPaymentMethod(methodId, options)\n                .then(response => {\n                    observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodSucceeded, response.body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(PaymentMethodActionType.LoadPaymentMethodFailed, response, { methodId }));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, INTERNAL_USE_ONLY, RequestOptions } from '../common/http-request';\n\nimport PaymentMethod from './payment-method';\n\nexport default class PaymentMethodRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadPaymentMethods({ timeout }: RequestOptions = {}): Promise<Response<PaymentMethod[]>> {\n        const url = '/api/storefront/payments';\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n\n    loadPaymentMethod(methodId: string, { timeout }: RequestOptions = {}): Promise<Response<PaymentMethod>> {\n        const url = `/api/storefront/payments/${methodId}`;\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n}\n","import EmbeddedCheckoutStyles from '../embedded-checkout-styles';\n\nexport enum EmbeddedContentEventType {\n    StyleConfigured = 'STYLE_CONFIGURED',\n}\n\nexport interface EmbeddedContentEventMap {\n    [EmbeddedContentEventType.StyleConfigured]: EmbeddedContentStyleConfiguredEvent;\n}\n\nexport type EmbeddedContentEvent = (\n    EmbeddedContentStyleConfiguredEvent\n);\n\nexport interface EmbeddedContentStyleConfiguredEvent {\n    type: EmbeddedContentEventType.StyleConfigured;\n    payload: EmbeddedCheckoutStyles;\n}\n","import { parseUrl } from '../common/url';\nimport { bindDecorator as bind } from '../common/utility';\n\nimport { IframeEventMap } from './iframe-event';\nimport isIframeEvent from './is-iframe-event';\n\nexport default class IframeEventListener<TEventMap extends IframeEventMap<keyof TEventMap>> {\n    private _isListening: boolean;\n    private _listeners: EventListeners<TEventMap>;\n    private _sourceOrigin: string;\n\n    constructor(\n        sourceOrigin: string\n    ) {\n        this._sourceOrigin = parseUrl(sourceOrigin).origin;\n        this._isListening = false;\n        this._listeners = {};\n    }\n\n    listen(): void {\n        if (this._isListening) {\n            return;\n        }\n\n        this._isListening = true;\n\n        window.addEventListener('message', this._handleMessage);\n    }\n\n    stopListen(): void {\n        if (!this._isListening) {\n            return;\n        }\n\n        this._isListening = false;\n\n        window.removeEventListener('message', this._handleMessage);\n    }\n\n    addListener<TType extends keyof TEventMap>(type: TType, listener: (event: TEventMap[TType]) => void): void {\n        let listeners = this._listeners[type];\n\n        if (!listeners) {\n            this._listeners[type] = listeners = [];\n        }\n\n        listeners.push(listener);\n    }\n\n    removeListener<TType extends keyof TEventMap>(type: TType, listener: (event: TEventMap[TType]) => void): void {\n        const listeners = this._listeners[type];\n\n        if (!listeners) {\n            return;\n        }\n\n        const index = listeners.indexOf(listener);\n\n        if (index >= 0) {\n            listeners.splice(index, 1);\n        }\n    }\n\n    trigger<TType extends keyof TEventMap>(event: TEventMap[TType]): void {\n        const listeners = this._listeners[event.type];\n\n        if (!listeners) {\n            return;\n        }\n\n        listeners.forEach(listener => listener(event));\n    }\n\n    @bind\n    private _handleMessage(event: MessageEvent): void {\n        if ((event.origin !== this._sourceOrigin) || !isIframeEvent(event.data, event.data.type)) {\n            return;\n        }\n\n        this.trigger(event.data);\n    }\n}\n\ntype EventListeners<TEventMap> = {\n    [key in keyof TEventMap]?: Array<(event: TEventMap[keyof TEventMap]) => void>;\n};\n","const CHECKOUT_DEFAULT_INCLUDES = [\n    'cart.lineItems.physicalItems.options',\n    'cart.lineItems.digitalItems.options',\n    'customer',\n    'payments',\n    'promotions.banners',\n];\n\nexport default CHECKOUT_DEFAULT_INCLUDES;\n","export default class AmountTransformer {\n    constructor(private _dp: number) {}\n\n    toInteger(amount: number): number {\n        return Math.floor(amount * Math.pow(10, this._dp));\n    }\n}\n","import InternalLineItem from './internal-line-item';\nimport { LineItem } from './line-item';\nimport LineItemMap from './line-item-map';\nimport mapGiftCertificateToInternalLineItem from './map-gift-certificate-to-internal-line-item';\nimport mapToInternalLineItem from './map-to-internal-line-item';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalLineItems(\n    itemMap: LineItemMap,\n    decimalPlaces: number,\n    idKey: keyof LineItem = 'id'\n): InternalLineItem[] {\n    return (Object.keys(itemMap) as Array<keyof LineItemMap>)\n        .reduce((result, key) => [\n            ...result,\n            ...(itemMap[key] as LineItem[]).map((item: any) => {\n                if (key === 'giftCertificates') {\n                    return mapGiftCertificateToInternalLineItem(item, decimalPlaces);\n                }\n\n                return mapToInternalLineItem(\n                    item,\n                    mapToInternalLineItemType(key),\n                    decimalPlaces,\n                    idKey\n                );\n            }),\n        ], [] as InternalLineItem[]);\n}\n\nfunction mapToInternalLineItemType(type: string): string {\n    switch (type) {\n        case 'physicalItems':\n            return 'ItemPhysicalEntity';\n\n        case 'digitalItems':\n            return 'ItemDigitalEntity';\n\n        case 'giftCertificates':\n            return 'ItemGiftCertificateEntity';\n\n        default:\n            return '';\n    }\n}\n","import InternalLineItem from './internal-line-item';\nimport { GiftCertificateItem } from './line-item';\n\nimport { AmountTransformer } from '.';\n\nexport default function mapGiftCertificateToInternalLineItem(\n    item: GiftCertificateItem,\n    decimalPlaces: number\n): InternalLineItem {\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: item.id,\n        imageUrl: '',\n        name: item.name,\n        amount: item.amount,\n        amountAfterDiscount: item.amount,\n        discount: 0,\n        integerAmount: amountTransformer.toInteger(item.amount),\n        integerAmountAfterDiscount: amountTransformer.toInteger(item.amount),\n        integerDiscount: 0,\n        quantity: 1,\n        sender: item.sender,\n        recipient: item.recipient,\n        type: 'ItemGiftCertificateEntity',\n        attributes: [],\n        variantId: null,\n    };\n}\n","export const INTERNAL_USE_ONLY = 'This API endpoint is for internal use only and may change in the future';\n","import isEqual from './is-equal';\n\nexport default class CacheKeyResolver {\n    private _lastId = 0;\n    private _maps: CacheKeyMap[] = [];\n\n    getKey(...args: any[]): string {\n        const { index, map, parentMaps } = this._resolveMap(...args);\n\n        if (map && map.cacheKey) {\n            map.usedCount++;\n\n            return map.cacheKey;\n        }\n\n        return this._generateKey(parentMaps, args.slice(index));\n    }\n\n    getUsedCount(...args: any[]): number {\n        const { map } = this._resolveMap(...args);\n\n        return map ? map.usedCount : 0;\n    }\n\n    private _resolveMap(...args: any[]): ResolveResult {\n        let index = 0;\n        let parentMaps = this._maps;\n\n        while (parentMaps.length) {\n            let isMatched = false;\n\n            for (const map of parentMaps) {\n                if (!isEqual(map.value, args[index])) {\n                    continue;\n                }\n\n                if ((args.length === 0 || index === args.length - 1) && map.cacheKey) {\n                    return { index, map, parentMaps };\n                }\n\n                isMatched = true;\n                parentMaps = map.maps;\n                index++;\n\n                break;\n            }\n\n            if (!isMatched) {\n                break;\n            }\n        }\n\n        return { index, parentMaps };\n    }\n\n    private _generateKey(maps: CacheKeyMap[], args: any[]): string {\n        let index = 0;\n        let parentMaps = maps;\n        let map!: CacheKeyMap;\n\n        do {\n            map = {\n                usedCount: 1,\n                value: args[index],\n                maps: [],\n            };\n\n            parentMaps.push(map);\n\n            parentMaps = map.maps;\n            index++;\n        } while (index < args.length);\n\n        map.cacheKey = `${++this._lastId}`;\n\n        return map.cacheKey;\n    }\n}\n\ninterface CacheKeyMap {\n    maps: CacheKeyMap[];\n    value: any;\n    usedCount: number;\n    cacheKey?: string;\n}\n\ninterface ResolveResult {\n    index: number;\n    parentMaps: CacheKeyMap[];\n    map?: CacheKeyMap;\n}\n","/**\n * Decorates a class or a method by binding all its prototype methods or itself\n * to the calling instance respectively.\n */\nexport default function bindDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T>;\nexport default function bindDecorator<T extends Constructor<object>>(target: T): T;\nexport default function bindDecorator(target: any, key?: any, descriptor?: any): any {\n    if (!key || !descriptor) {\n        return bindClassDecorator(target);\n    }\n\n    return bindMethodDecorator(target, key, descriptor);\n}\n\n/**\n * Decorates a class by binding all its prototype methods to the calling\n * instance.\n */\nexport function bindClassDecorator<T extends Constructor<object>>(target: T): T {\n    const decoratedTarget = class extends target {};\n\n    Object.getOwnPropertyNames(target.prototype)\n        .forEach(key => {\n            const descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);\n\n            if (!descriptor || key === 'constructor') {\n                return;\n            }\n\n            Object.defineProperty(\n                decoratedTarget.prototype,\n                key,\n                bindMethodDecorator(target.prototype, key, descriptor)\n            );\n        });\n\n    return decoratedTarget;\n}\n\n/**\n * Decorates a method by binding it to the calling instance.\n */\nexport function bindMethodDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T> {\n    if (typeof descriptor.value !== 'function') {\n        return descriptor;\n    }\n\n    let method: T = descriptor.value;\n\n    return {\n        get() {\n            const boundMethod = method.bind(this);\n\n            Object.defineProperty(this, key, {\n                ...descriptor,\n                value: boundMethod,\n            });\n\n            return boundMethod;\n        },\n        set(value) {\n            method = value;\n        },\n    };\n}\n\nexport type Constructor<T> = new (...args: any[]) => T;\nexport type Method = (...args: any[]) => any;\n","export enum CheckoutIncludes {\n    AvailableShippingOptions = 'consignments.availableShippingOptions',\n    PhysicalItemsCategoryNames = 'cart.lineItems.physicalItems.categoryNames',\n    DigitalItemsCategoryNames = 'cart.lineItems.digitalItems.categoryNames',\n}\n\nexport default interface CheckoutParams {\n    include?: CheckoutIncludes[];\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { GooglePayCreator } from '../googlepay';\n\nimport {\n    BraintreeClientCreator,\n    BraintreeDataCollectorCreator,\n    BraintreeHostWindow,\n    BraintreePaypalCheckoutCreator,\n    BraintreePaypalCreator,\n    BraintreeThreeDSecureCreator,\n    BraintreeVisaCheckoutCreator,\n} from './braintree';\n\nexport default class BraintreeScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: BraintreeHostWindow = window\n    ) {}\n\n    loadClient(): Promise<BraintreeClientCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/client.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.client) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.client;\n            });\n    }\n\n    load3DS(): Promise<BraintreeThreeDSecureCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/three-d-secure.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.threeDSecure) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.threeDSecure;\n            });\n    }\n\n    loadDataCollector(): Promise<BraintreeDataCollectorCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/data-collector.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.dataCollector) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.dataCollector;\n            });\n    }\n\n    loadPaypal(): Promise<BraintreePaypalCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/paypal.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.paypal) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.paypal;\n            });\n    }\n\n    loadPaypalCheckout(): Promise<BraintreePaypalCheckoutCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/paypal-checkout.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.paypalCheckout) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.paypalCheckout;\n            });\n    }\n\n    loadVisaCheckout(): Promise<BraintreeVisaCheckoutCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/visa-checkout.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.visaCheckout) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.visaCheckout;\n            });\n    }\n\n    loadGooglePayment(): Promise<GooglePayCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/google-payment.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.googlePayment) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.googlePayment;\n            });\n    }\n}\n","import { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\n\nimport {\n    BraintreeClient,\n    BraintreeDataCollector,\n    BraintreeModule,\n    BraintreePaypal,\n    BraintreePaypalCheckout,\n    BraintreeThreeDSecure,\n    BraintreeVisaCheckout,\n    GooglePayBraintreeSDK,\n} from './braintree';\nimport BraintreeScriptLoader from './braintree-script-loader';\n\nexport default class BraintreeSDKCreator {\n    private _client?: Promise<BraintreeClient>;\n    private _3ds?: Promise<BraintreeThreeDSecure>;\n    private _paypal?: Promise<BraintreePaypal>;\n    private _paypalCheckout?: Promise<BraintreePaypalCheckout>;\n    private _clientToken?: string;\n    private _visaCheckout?: Promise<BraintreeVisaCheckout>;\n    private _dataCollectors: {\n        default?: Promise<BraintreeDataCollector>,\n        paypal?: Promise<BraintreeDataCollector>,\n    } = {};\n    private _googlePay?: Promise<GooglePayBraintreeSDK>;\n\n    constructor(\n        private _braintreeScriptLoader: BraintreeScriptLoader\n    ) {}\n\n    initialize(clientToken: string) {\n        this._clientToken = clientToken;\n    }\n\n    getClient(): Promise<BraintreeClient> {\n        if (!this._clientToken) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!this._client) {\n            this._client = this._braintreeScriptLoader.loadClient()\n                .then(client => client.create({ authorization: this._clientToken }));\n        }\n\n        return this._client;\n    }\n\n    getPaypal(): Promise<BraintreePaypal> {\n        if (!this._paypal) {\n            this._paypal = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadPaypal(),\n            ])\n            .then(([client, paypal]) => paypal.create({ client }));\n        }\n\n        return this._paypal;\n    }\n\n    getPaypalCheckout(): Promise<BraintreePaypalCheckout> {\n        if (!this._paypalCheckout) {\n            this._paypalCheckout = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadPaypalCheckout(),\n            ])\n                .then(([client, paypalCheckout]) => paypalCheckout.create({ client }));\n        }\n\n        return this._paypalCheckout;\n    }\n\n    get3DS(): Promise<BraintreeThreeDSecure> {\n        if (!this._3ds) {\n            this._3ds = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.load3DS(),\n            ])\n            .then(([client, threeDSecure]) => threeDSecure.create({ client }));\n        }\n\n        return this._3ds;\n    }\n\n    getDataCollector(options?: { paypal: boolean }): Promise<BraintreeDataCollector> {\n        const cacheKey = options && options.paypal ? 'paypal' : 'default';\n        let cached = this._dataCollectors[cacheKey];\n\n        if (!cached) {\n            cached = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadDataCollector(),\n            ])\n            .then(([client, dataCollector]) => dataCollector.create({ client, kount: true, ...options }))\n            .catch(error => {\n                if (error && error.code === 'DATA_COLLECTOR_KOUNT_NOT_ENABLED') {\n                    return { deviceData: undefined, teardown: () => Promise.resolve() };\n                }\n\n                throw error;\n            });\n\n            this._dataCollectors[cacheKey] = cached;\n        }\n\n        return cached;\n    }\n\n    getVisaCheckout(): Promise<BraintreeVisaCheckout> {\n        if (!this._visaCheckout) {\n            this._visaCheckout = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadVisaCheckout(),\n            ])\n            .then(([client, visaCheckout]) => visaCheckout.create({ client }));\n        }\n\n        return this._visaCheckout;\n    }\n\n    getGooglePaymentComponent(): Promise<GooglePayBraintreeSDK> {\n        if (!this._googlePay) {\n            this._googlePay = Promise.all ([\n                this.getClient(),\n                this._braintreeScriptLoader.loadGooglePayment(),\n            ])\n                .then(([client, googlePay]) => googlePay.create({ client }));\n        }\n\n        return this._googlePay;\n    }\n\n    teardown(): Promise<void> {\n        return Promise.all([\n            this._teardown(this._3ds),\n            this._teardown(this._dataCollectors.default),\n            this._teardown(this._dataCollectors.paypal),\n            this._teardown(this._visaCheckout),\n            this._teardown(this._googlePay),\n        ]).then(() => {\n            this._3ds = undefined;\n            this._visaCheckout = undefined;\n            this._dataCollectors = {};\n            this._googlePay = undefined;\n        });\n    }\n\n    private _teardown(module?: Promise<BraintreeModule>) {\n        return module ?\n            module.then(mod => mod.teardown()) :\n            Promise.resolve();\n    }\n}\n","import AmountTransformer from './amount-transformer';\nimport InternalLineItem from './internal-line-item';\nimport { DigitalItem, LineItem } from './line-item';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalLineItem(\n    item: LineItem,\n    type: string,\n    decimalPlaces: number,\n    idKey: keyof LineItem = 'id'\n): InternalLineItem {\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: (item[idKey] as string | number),\n        imageUrl: item.imageUrl,\n        amount: item.extendedListPrice,\n        amountAfterDiscount: item.extendedSalePrice,\n        discount: item.discountAmount,\n        integerAmount: amountTransformer.toInteger(item.extendedListPrice),\n        integerAmountAfterDiscount: amountTransformer.toInteger(item.extendedSalePrice),\n        integerDiscount: amountTransformer.toInteger(item.discountAmount),\n        downloadsPageUrl: (item as DigitalItem).downloadPageUrl,\n        name: item.name,\n        quantity: item.quantity,\n        brand: item.brand,\n        categoryNames: item.categoryNames,\n        variantId: item.variantId,\n        productId: item.productId,\n        attributes: (item.options || []).map(option => ({\n            name: option.name,\n            value: option.value,\n        })),\n        addedByPromotion: item.addedByPromotion,\n        type,\n    };\n}\n","module.exports = require(\"iframe-resizer\");","export default function isPrivate(key: string): boolean {\n    return `${key}`.indexOf('$$') === 0 || `${key}`.indexOf('_') === 0;\n}\n","import { createErrorAction, Action } from '@bigcommerce/data-store';\nimport { concat, of, throwError, Observable } from 'rxjs';\n\nexport default function throwErrorAction<TPayload, TMeta, TType extends string>(\n    type: TType,\n    error?: TPayload,\n    meta?: TMeta\n): Observable<Action<TPayload, TMeta, TType>> {\n    if (isErrorAction(error)) {\n        return concat(of(error), throwError(createErrorAction(type, error.payload, meta)));\n    }\n\n    return throwError(createErrorAction(type, error, meta));\n}\n\nfunction isErrorAction(action: any): action is Action {\n    return action && action.type && action.error;\n}\n","import StandardError from './standard-error';\n\nexport enum NotInitializedErrorType {\n    CheckoutButtonNotInitialized,\n    CustomerNotInitialized,\n    PaymentNotInitialized,\n    ShippingNotInitialized,\n}\n\nexport default class NotInitializedError extends StandardError {\n    constructor(\n        public subtype: NotInitializedErrorType\n    ) {\n        super(getErrorMessage(subtype));\n\n        this.type = 'not_initialized';\n    }\n}\n\nfunction getErrorMessage(type: NotInitializedErrorType): string {\n    switch (type) {\n    case NotInitializedErrorType.CustomerNotInitialized:\n        return 'Unable to proceed because the customer step of checkout has not been initialized.';\n\n    case NotInitializedErrorType.PaymentNotInitialized:\n        return 'Unable to proceed because the payment step of checkout has not been initialized.';\n\n    case NotInitializedErrorType.ShippingNotInitialized:\n        return 'Unable to proceed because the shipping step of checkout has not been initialized.';\n\n    default:\n        return 'Unable to proceed because the required component has not been initialized.';\n    }\n}\n","import { InvalidArgumentError } from '../error/errors';\n\nimport Url from './url';\n\nexport default function parseUrl(url: string): Url {\n    if (!/^(https?:)?\\/\\//.test(url)) {\n        throw new InvalidArgumentError('The provided URL must be absolute.');\n    }\n\n    // new URL() is not supported in IE11, use anchor tag instead\n    const anchor = document.createElement('a');\n\n    anchor.href = url;\n\n    return {\n        hash: anchor.hash,\n        hostname: anchor.hostname,\n        href: anchor.href,\n        origin: anchor.origin,\n        pathname: anchor.pathname,\n        port: anchor.port,\n        protocol: anchor.protocol,\n        search: anchor.search,\n    };\n}\n","import cacheAction from './cache-action';\nimport isActionOptions from './is-action-options';\n\nexport default function cachableActionDecorator<TMethod extends (...args: any[]) => any>(\n    target: object,\n    key: string,\n    descriptor: TypedPropertyDescriptor<TMethod>\n): TypedPropertyDescriptor<TMethod> {\n    const memoizedMethods = new WeakMap<object, { [key: string]: TMethod }>();\n\n    function decorateMethod(this: object, method: TMethod): TMethod {\n        return ((...args: any[]) => {\n            const lastArg = args[args.length - 1];\n            const { useCache } = isActionOptions(lastArg) ? lastArg : { useCache: false };\n\n            if (!useCache) {\n                return method.call(this, ...args);\n            }\n\n            const instanceMethods = memoizedMethods.get(this) || {};\n\n            if (!memoizedMethods.get(this)) {\n                memoizedMethods.set(this, instanceMethods);\n            }\n\n            if (!instanceMethods[key]) {\n                instanceMethods[key] = cacheAction(method);\n            }\n\n            return instanceMethods[key].call(this, ...args);\n        }) as TMethod;\n    }\n\n    return {\n        get() {\n            if (typeof descriptor.value !== 'function') {\n                return descriptor.value;\n            }\n\n            const value = decorateMethod.call(this, descriptor.value);\n\n            Object.defineProperty(this, key, { ...descriptor, value });\n\n            return value;\n        },\n    };\n}\n","import ActionOptions from './action-options';\n\nexport default function isActionOptions(param: any): param is ActionOptions {\n    return param && typeof param.useCache === 'boolean';\n}\n","import { Action, ThunkAction } from '@bigcommerce/data-store';\nimport { memoize } from 'lodash';\nimport { from, Observable } from 'rxjs';\nimport { shareReplay } from 'rxjs/operators';\n\nimport { CacheKeyResolver } from '../utility';\n\nexport default function cacheAction<TFunction extends CreateActionFn>(\n    fn: TFunction\n): TFunction {\n    const resolver = new CacheKeyResolver();\n\n    function decoratedFn(this: any, ...args: any[]) {\n        const action = fn.call(this, ...args);\n\n        if (action instanceof Observable) {\n            return from(action).pipe(shareReplay());\n        }\n\n        if (typeof action === 'function') {\n            return memoize(store => from(action(store)).pipe(shareReplay()));\n        }\n\n        return action;\n    }\n\n    return memoize(\n        decoratedFn as TFunction,\n        (...args) => resolver.getKey(...args)\n    );\n}\n\ntype CreateActionFn = (...args: any[]) => Observable<Action> | ThunkAction<Action> | Action;\n","import { isPlainObject, omitBy, transform } from 'lodash';\n\nexport default function omitDeep(object: any, predicate: (value: any, key: string) => boolean): any {\n    if (Array.isArray(object)) {\n        return object.map(value => omitDeep(value, predicate));\n    }\n\n    if (isPlainObject(object)) {\n        return transform(omitBy(object, predicate), (result, value, key) => {\n            result[key] = omitDeep(value, predicate);\n        }, {});\n    }\n\n    return object;\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, merge, of, Observable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType, StandardError } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { ConfigActionCreator } from '../config';\n\nimport { CheckoutRequestBody } from './checkout';\nimport { CheckoutActionType, LoadCheckoutAction, UpdateCheckoutAction } from './checkout-actions';\nimport CheckoutRequestSender from './checkout-request-sender';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\nexport default class CheckoutActionCreator {\n    constructor(\n        private _checkoutRequestSender: CheckoutRequestSender,\n        private _configActionCreator: ConfigActionCreator\n    ) {}\n\n    loadCheckout(id: string, options?: RequestOptions): Observable<LoadCheckoutAction> {\n        return concat(\n            of(createAction(CheckoutActionType.LoadCheckoutRequested)),\n            merge(\n                this._configActionCreator.loadConfig({ ...options, useCache: true }),\n                defer(() => this._checkoutRequestSender.loadCheckout(id, options)\n                    .then(({ body }) => createAction(CheckoutActionType.LoadCheckoutSucceeded, body)))\n            )\n        ).pipe(\n            catchError(error => throwErrorAction(CheckoutActionType.LoadCheckoutFailed, error))\n        );\n    }\n\n    loadDefaultCheckout(options?: RequestOptions): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CheckoutActionType.LoadCheckoutRequested)),\n            this._configActionCreator.loadConfig(),\n            defer(() => {\n                const state = store.getState();\n                const context = state.config.getContextConfig();\n\n                if (!context || !context.checkoutId) {\n                    throw new StandardError('Unable to load checkout: no cart is available');\n                }\n\n                return this._checkoutRequestSender.loadCheckout(context.checkoutId, options)\n                    .then(({ body }) => createAction(CheckoutActionType.LoadCheckoutSucceeded, body));\n            })\n        ).pipe(\n            catchError(error => throwErrorAction(CheckoutActionType.LoadCheckoutFailed, error))\n        );\n    }\n\n    updateCheckout(\n        body: CheckoutRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateCheckoutAction, InternalCheckoutSelectors> {\n        return store => new Observable(observer => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CheckoutActionType.UpdateCheckoutRequested));\n\n            this._checkoutRequestSender.updateCheckout(checkout.id, body, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CheckoutActionType.UpdateCheckoutSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CheckoutActionType.UpdateCheckoutFailed, response));\n                });\n        });\n    }\n\n    loadCurrentCheckout(options?: RequestOptions): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            return this.loadCheckout(checkout.id, options);\n        };\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { AddressRequestBody } from '../address';\nimport { Cart } from '../cart';\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../checkout';\nimport { CheckoutIncludes } from '../checkout/checkout-params';\nimport CheckoutRequestSender from '../checkout/checkout-request-sender';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport Consignment, {\n    ConsignmentsRequestBody,\n    ConsignmentAssignmentRequestBody,\n    ConsignmentCreateRequestBody,\n    ConsignmentLineItem,\n    ConsignmentRequestBody,\n    ConsignmentShippingOptionRequestBody,\n    ConsignmentUpdateRequestBody\n} from './consignment';\nimport {\n    ConsignmentActionType,\n    CreateConsignmentsAction,\n    DeleteConsignmentAction,\n    LoadShippingOptionsAction,\n    UpdateConsignmentAction,\n    UpdateShippingOptionAction,\n} from './consignment-actions';\nimport ConsignmentRequestSender from './consignment-request-sender';\n\nexport default class ConsignmentActionCreator {\n    constructor(\n        private _consignmentRequestSender: ConsignmentRequestSender,\n        private _checkoutRequestSender: CheckoutRequestSender\n    ) {}\n\n    unassignItemsByAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<DeleteConsignmentAction | UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const existingConsignment = state.consignments.getConsignmentByAddress(consignment.shippingAddress);\n\n            if (!existingConsignment) {\n                throw new InvalidArgumentError('No consignment found for the specified address');\n            }\n\n            const lineItems = this._removeLineItems(\n                consignment.lineItems,\n                existingConsignment,\n                state.cart.getCart()\n            );\n\n            if (!lineItems.length) {\n                return this.deleteConsignment(existingConsignment.id, options)(store);\n            }\n\n            return this.updateConsignment({\n                id: existingConsignment.id,\n                shippingAddress: consignment.shippingAddress,\n                lineItems,\n            }, options)(store);\n        };\n    }\n\n    assignItemsByAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateConsignmentAction | CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const existingConsignment = state.consignments.getConsignmentByAddress(consignment.shippingAddress);\n\n            return this._createOrUpdateConsignment({\n                id: existingConsignment && existingConsignment.id,\n                shippingAddress: consignment.shippingAddress,\n                lineItems: this._addLineItems(\n                    consignment.lineItems,\n                    existingConsignment,\n                    state.cart.getCart()\n                ),\n            }, options)(store);\n        };\n    }\n\n    selectShippingOption(\n        id: string,\n        options?: RequestOptions\n    ): ThunkAction<UpdateShippingOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateShippingOptionAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n            const consignments = state.consignments.getConsignments();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            if (!consignments || !consignments.length) {\n                throw new MissingDataError(MissingDataErrorType.MissingConsignments);\n            }\n\n            const consignmentUpdateBody = {\n                id: consignments[0].id,\n                shippingOptionId: id,\n            };\n\n            const consignmentMeta = {\n                id: consignments[0].id,\n            };\n\n            observer.next(createAction(ConsignmentActionType.UpdateShippingOptionRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignmentUpdateBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(\n                        ConsignmentActionType.UpdateShippingOptionSucceeded,\n                        body,\n                        consignmentMeta\n                    ));\n\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(\n                        ConsignmentActionType.UpdateShippingOptionFailed,\n                        response,\n                        consignmentMeta\n                    ));\n                });\n        });\n    }\n\n    loadShippingOptions(options?: RequestOptions): ThunkAction<LoadShippingOptionsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<LoadShippingOptionsAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.LoadShippingOptionsRequested));\n\n            this._checkoutRequestSender.loadCheckout(checkout.id, {\n                ...options,\n                params: {\n                    include: [CheckoutIncludes.AvailableShippingOptions],\n                },\n            })\n            .then(({ body }) => {\n                observer.next(createAction(ConsignmentActionType.LoadShippingOptionsSucceeded, body));\n                observer.complete();\n            })\n            .catch(response => {\n                observer.error(createErrorAction(ConsignmentActionType.LoadShippingOptionsFailed, response));\n            });\n        });\n    }\n\n    updateAddress(\n        address: AddressRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<CreateConsignmentsAction | UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => {\n            const consignment = this._getConsignmentRequestBody(address, store);\n            const consignments = store.getState().consignments.getConsignments();\n\n            if (consignments && consignments.length) {\n                (consignment as ConsignmentUpdateRequestBody).id = consignments[0].id;\n            }\n\n            return this._createOrUpdateConsignment(consignment, options)(store);\n        };\n    }\n\n    createConsignments(\n        consignments: ConsignmentsRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<CreateConsignmentsAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.CreateConsignmentsRequested));\n\n            this._consignmentRequestSender.createConsignments(checkout.id, consignments, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.CreateConsignmentsSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.CreateConsignmentsFailed, response));\n                });\n        });\n    }\n\n    updateConsignment(\n        consignment: ConsignmentUpdateRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateConsignmentAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const consignmentMeta = { id: consignment.id };\n\n            observer.next(createAction(ConsignmentActionType.UpdateConsignmentRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignment, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.UpdateConsignmentSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.UpdateConsignmentFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    deleteConsignment(\n        consignmentId: string,\n        options?: RequestOptions\n    ): ThunkAction<DeleteConsignmentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<DeleteConsignmentAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n            const consignmentMeta = { id: consignmentId };\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.DeleteConsignmentRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.deleteConsignment(checkout.id, consignmentId, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.DeleteConsignmentSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.DeleteConsignmentFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    updateShippingOption(\n        consignment: ConsignmentShippingOptionRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateShippingOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateShippingOptionAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const consignmentMeta = { id: consignment.id };\n\n            observer.next(createAction(ConsignmentActionType.UpdateShippingOptionRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignment, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.UpdateShippingOptionSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.UpdateShippingOptionFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    private _createOrUpdateConsignment(\n        consignment: ConsignmentCreateRequestBody | ConsignmentUpdateRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateConsignmentAction | CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            if (this._isUpdateConsignmentRequest(consignment)) {\n                return this.updateConsignment(consignment, options)(store);\n            }\n\n            return this.createConsignments([consignment], options)(store);\n        };\n    }\n\n    private _getConsignmentRequestBody(\n        shippingAddress: AddressRequestBody,\n        store: ReadableCheckoutStore\n    ): ConsignmentRequestBody {\n        const state = store.getState();\n        const cart = state.cart.getCart();\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return {\n            shippingAddress,\n            lineItems: (cart.lineItems && cart.lineItems.physicalItems || [])\n                .map(item => ({\n                    itemId: item.id,\n                    quantity: item.quantity,\n                })\n            ),\n        };\n    }\n\n    private _removeLineItems(\n        lineItems: ConsignmentLineItem[],\n        consignment: Consignment,\n        cart?: Cart\n    ): ConsignmentLineItem[] {\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return this._hydrateLineItems(consignment.lineItemIds, cart).map(existingItem => {\n            const sharedItem = lineItems.find(lineItem => lineItem.itemId === existingItem.itemId);\n\n            return {\n                ...existingItem,\n                quantity: sharedItem ? (existingItem.quantity - sharedItem.quantity) : existingItem.quantity,\n            };\n        }).filter(lineItem => lineItem.quantity > 0);\n    }\n\n    private _addLineItems(\n        lineItems: ConsignmentLineItem[],\n        consignment?: Consignment,\n        cart?: Cart\n    ): ConsignmentLineItem[] {\n        if (!consignment) {\n            return lineItems;\n        }\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return lineItems\n            .concat(this._hydrateLineItems(consignment.lineItemIds, cart))\n            .filter(lineItem => lineItem.quantity > 0);\n    }\n\n    private _hydrateLineItems(lineItemIds: string[], cart: Cart): ConsignmentLineItem[] {\n        return lineItemIds.map(itemId => {\n            const item = cart.lineItems.physicalItems.find(lineItem => lineItem.id === itemId );\n\n            return {\n                itemId,\n                quantity: item ? item.quantity : 0,\n            };\n        });\n    }\n\n    private _isUpdateConsignmentRequest(\n        request: ConsignmentRequestBody\n    ): request is ConsignmentUpdateRequestBody {\n        const updateRequest = request as ConsignmentUpdateRequestBody;\n\n        return !!updateRequest.id;\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout } from '../checkout';\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport { ConsignmentsRequestBody, ConsignmentUpdateRequestBody } from './consignment';\n\nconst DEFAULT_PARAMS = {\n    include: [\n        'consignments.availableShippingOptions',\n        'cart.lineItems.physicalItems.options',\n        'cart.lineItems.digitalItems.options',\n        'customer',\n        'promotions.banners',\n    ].join(','),\n};\n\nexport default class ConsignmentRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    createConsignments(checkoutId: string, consignments: ConsignmentsRequestBody, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, { body: consignments, params: DEFAULT_PARAMS, headers, timeout });\n    }\n\n    updateConsignment(checkoutId: string, consignment: ConsignmentUpdateRequestBody, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const { id, ...body } = consignment;\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, { params: DEFAULT_PARAMS, body, headers, timeout });\n    }\n\n    deleteConsignment(checkoutId: string, consignmentId: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments/${consignmentId}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, { params: DEFAULT_PARAMS, headers, timeout });\n    }\n}\n","export default function getCallbackUrl(origin: string): string {\n    return `${window.location.origin}/checkout.php?action=set_external_checkout&provider=masterpass&gateway=stripe&origin=${origin}`;\n}\n","import InternalShippingOption from './internal-shipping-option';\nimport ShippingOption from './shipping-option';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalShippingOption(option: ShippingOption, isSelected: boolean): InternalShippingOption {\n    return {\n        description: option.description,\n        module: option.type,\n        price: option.cost,\n        id: option.id,\n        selected: isSelected,\n        isRecommended: option.isRecommended,\n        imageUrl: option.imageUrl,\n        transitTime: option.transitTime,\n    };\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\nexport default class UnrecoverableError extends RequestError {\n    constructor(response: Response, message?: string) {\n        super(response, {\n            message: message || 'An unexpected error has occurred. The checkout process cannot continue as a result.',\n        });\n\n        this.type = 'unrecoverable';\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { InternalErrorResponseBody } from '../error-response-body';\n\nimport RequestError from './request-error';\n\nexport default function mapFromInternalErrorResponse(\n    response: Response<InternalErrorResponseBody>,\n    message?: string\n): RequestError {\n    const { body } = response;\n    const { errors = [] } = body;\n\n    return new RequestError(response, {\n        message: joinErrors(errors) || body.detail || body.title || message,\n        errors: errors.length ?\n            errors.map(message => ({ code: body.type, message })) :\n            [{ code: body.type, message: body.detail || body.title }],\n    });\n}\n\nfunction joinErrors(errors: string[]): string | undefined {\n    return errors.reduce((result: string[], error) => {\n        if (error) {\n            return [...result, error];\n        }\n\n        return result;\n    }, []).join(' ');\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { PaymentErrorResponseBody } from '../error-response-body';\n\nimport RequestError from './request-error';\n\nexport default function mapFromPaymentErrorResponse(\n    response: Response<PaymentErrorResponseBody>,\n    message?: string\n): RequestError {\n    const { body } = response;\n    const { errors = [] } = body;\n\n    return new RequestError(response, {\n        message: joinErrors(errors) || message,\n        errors,\n    });\n}\n\nfunction joinErrors(errors: Array<{ code: string, message?: string }>): string | undefined {\n    if (!Array.isArray(errors)) {\n        return;\n    }\n\n    return errors.reduce((result: string[], error) => {\n        if (error && error.message) {\n            return [...result, error.message];\n        }\n\n        return result;\n    }, []).join(' ');\n}\n\nexport const PAYMENT_ERROR_CODES = [\n    'payment',\n    'transaction_declined',\n];\n","import { Response } from '@bigcommerce/request-sender';\nimport { last } from 'lodash';\n\nimport ErrorResponseBody, {\n    InternalErrorResponseBody,\n    StorefrontErrorResponseBody\n} from './error-response-body';\nimport { RequestError, TimeoutError } from './errors';\nimport mapFromInternalErrorResponse from './errors/map-from-internal-error-response';\nimport mapFromPaymentErrorResponse, { PAYMENT_ERROR_CODES } from './errors/map-from-payment-error-response';\nimport mapFromStorefrontErrorResponse from './errors/map-from-storefront-error-response';\n\nexport default class RequestErrorFactory {\n    private _factoryMethods: { [key: string]: ErrorFactoryMethod } = {};\n\n    constructor() {\n        this.register('default', (response, message) => new RequestError(response, { message }));\n        this.register('internal', (response, message) => mapFromInternalErrorResponse(response, message));\n        this.register('storefront', (response, message) => mapFromStorefrontErrorResponse(response, message));\n        this.register('payment', (response, message) => mapFromPaymentErrorResponse(response, message));\n        this.register('timeout', response => new TimeoutError(response));\n    }\n\n    register(type: string, factoryMethod: ErrorFactoryMethod): void {\n        this._factoryMethods[type] = factoryMethod;\n    }\n\n    createError(response: Response, message?: string): RequestError {\n        const factoryMethod = this._factoryMethods[this._getType(response)] || this._factoryMethods.default;\n\n        return factoryMethod(response, message);\n    }\n\n    private _getType(response: Response<ErrorResponseBody>): string {\n        if (response.status === 0) {\n            return 'timeout';\n        }\n\n        if (this._isStorefrontErrorResponseBody(response.body)) {\n            return 'storefront';\n        }\n\n        if (this._isInternalErrorResponseBody(response.body)) {\n            const internalType = last(response.body.type.split('/'));\n\n            return internalType && this._factoryMethods[internalType] ?\n                internalType :\n                'internal';\n        }\n\n        const error = last(response.body && response.body.errors);\n\n        if (error && PAYMENT_ERROR_CODES.indexOf(error.code) !== -1) {\n            return 'payment';\n        }\n\n        return error && error.code ? error.code : 'payment';\n    }\n\n    private _isStorefrontErrorResponseBody(\n        errorResponse: ErrorResponseBody\n    ): errorResponse is StorefrontErrorResponseBody {\n        const storefrontErrorResponse = errorResponse as StorefrontErrorResponseBody;\n\n        return !this._isInternalErrorResponseBody(errorResponse) &&\n            typeof storefrontErrorResponse.title === 'string' &&\n            typeof storefrontErrorResponse.type === 'string' &&\n            typeof storefrontErrorResponse.status === 'number' &&\n            typeof storefrontErrorResponse.detail === 'string';\n    }\n\n    private _isInternalErrorResponseBody(\n        errorResponse: ErrorResponseBody\n    ): errorResponse is InternalErrorResponseBody {\n        const internalErrorResponse = errorResponse as InternalErrorResponseBody;\n\n        return typeof internalErrorResponse.errors === 'object' &&\n            typeof internalErrorResponse.title === 'string' &&\n            typeof internalErrorResponse.type === 'string' &&\n            typeof internalErrorResponse.status === 'number';\n    }\n}\n\nexport type ErrorFactoryMethod = (response: Response, message?: string) => RequestError;\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { StorefrontErrorResponseBody } from '../error-response-body';\n\nimport RequestError from './request-error';\n\nexport default function mapFromStorefrontErrorResponse(\n    response: Response<StorefrontErrorResponseBody>,\n    message?: string\n): RequestError<StorefrontErrorResponseBody> {\n    const { body } = response;\n\n    return new RequestError(response, {\n        message: message || body.detail || body.title,\n        errors: [{\n            code: body.code || body.type,\n            message: body.detail || body.title,\n        }],\n    });\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { omitDeep } from '../utility';\n\nimport { ClearErrorAction, ErrorActionType } from './error-actions';\n\nexport default function clearErrorReducer<TState extends { [key: string]: any }, TAction extends Action>(\n    state: TState,\n    action: TAction\n): TState | undefined {\n    if (isClearErrorAction(action)) {\n        return omitDeep(state, value => value === action.payload);\n    }\n\n    return state;\n}\n\nfunction isClearErrorAction(action: Action): action is ClearErrorAction {\n    return action.type === ErrorActionType.ClearError;\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { OrderAction, OrderActionType } from '../order';\n\nimport BillingAddress from './billing-address';\nimport { BillingAddressAction, BillingAddressActionType } from './billing-address-actions';\nimport BillingAddressState, { BillingAddressErrorsState, BillingAddressStatusesState } from './billing-address-state';\n\nconst DEFAULT_STATE: BillingAddressState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function billingAddressReducer(\n    state: BillingAddressState = DEFAULT_STATE,\n    action: Action\n): BillingAddressState {\n    const reducer = combineReducers<BillingAddressState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: BillingAddress | undefined,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddress | undefined {\n    switch (action.type) {\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case OrderActionType.LoadOrderSucceeded:\n        return action.payload ? action.payload.billingAddress : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: BillingAddressErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddressErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return { ...errors, loadError: action.payload };\n\n    case BillingAddressActionType.UpdateBillingAddressRequested:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n        return { ...errors, updateError: undefined };\n\n    case BillingAddressActionType.UpdateBillingAddressFailed:\n        return { ...errors, updateError: action.payload };\n\n    case BillingAddressActionType.ContinueAsGuestRequested:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n        return { ...errors, continueAsGuestError: undefined };\n\n    case BillingAddressActionType.ContinueAsGuestFailed:\n        return { ...errors, continueAsGuestError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: BillingAddressStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddressStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return { ...statuses, isLoading: true };\n\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.LoadCheckoutFailed:\n        return { ...statuses, isLoading: false };\n\n    case BillingAddressActionType.UpdateBillingAddressRequested:\n        return { ...statuses, isUpdating: true };\n\n    case BillingAddressActionType.UpdateBillingAddressFailed:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n        return { ...statuses, isUpdating: false };\n\n    case BillingAddressActionType.ContinueAsGuestRequested:\n        return { ...statuses, isContinuingAsGuest: true };\n\n    case BillingAddressActionType.ContinueAsGuestFailed:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n        return { ...statuses, isContinuingAsGuest: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { BillingAddressAction, BillingAddressActionType } from '../billing/billing-address-actions';\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { CouponAction, CouponActionType } from '../coupon/coupon-actions';\nimport { GiftCertificateAction, GiftCertificateActionType } from '../coupon/gift-certificate-actions';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping/consignment-actions';\n\nimport Cart from './cart';\nimport CartState, { CartErrorsState, CartStatusesState } from './cart-state';\n\nconst DEFAULT_STATE: CartState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function cartReducer(\n    state: CartState = DEFAULT_STATE,\n    action: Action\n): CartState {\n    const reducer = combineReducers<CartState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Cart | undefined,\n    action: BillingAddressAction | CheckoutAction | ConsignmentAction | CouponAction | GiftCertificateAction\n): Cart | undefined {\n    switch (action.type) {\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return action.payload ? { ...data, ...action.payload.cart } : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CartStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction\n): CartStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return { ...statuses, isLoading: true };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n\nfunction errorsReducer(\n    errors: CartErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction\n): CartErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutButtonAction, CheckoutButtonActionType } from './checkout-button-actions';\nimport CheckoutButtonState, { CheckoutButtonDataState, CheckoutButtonErrorsState, CheckoutButtonStatusesState } from './checkout-button-state';\n\nconst DEFAULT_STATE: CheckoutButtonState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n\nconst DEFAULT_DATA_STATE: CheckoutButtonDataState = { initializedContainers: {} };\nconst DEFAULT_ERROR_STATE: CheckoutButtonErrorsState = {};\nconst DEFAULT_STATUS_STATE: CheckoutButtonStatusesState = {};\n\nexport default function checkoutButtonReducer(\n    state: CheckoutButtonState = DEFAULT_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonState {\n    if (!action.meta || !action.meta.methodId) {\n        return state;\n    }\n\n    const reducer = combineReducers<CheckoutButtonState>({\n        data: combineReducers({\n            [action.meta.methodId]: dataReducer,\n        }),\n        errors: combineReducers({\n            [action.meta.methodId]: errorsReducer,\n        }),\n        statuses: combineReducers({\n            [action.meta.methodId]: statusesReducer,\n        }),\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CheckoutButtonDataState = DEFAULT_DATA_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonDataState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        if (!action.meta || !action.meta.containerId) {\n            return data;\n        }\n\n        return {\n            ...data,\n            initializedContainers: {\n                ...data.initializedContainers,\n                [action.meta.containerId]: true,\n            },\n        };\n\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return {\n            ...data,\n            initializedContainers: {},\n        };\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: CheckoutButtonErrorsState = DEFAULT_ERROR_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonErrorsState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonRequested:\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        return {\n            ...errors,\n            initializeError: undefined,\n        };\n\n    case CheckoutButtonActionType.InitializeButtonFailed:\n        return {\n            ...errors,\n            initializeError: action.payload,\n        };\n\n    case CheckoutButtonActionType.DeinitializeButtonRequested:\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return {\n            ...errors,\n            deinitializeError: undefined,\n        };\n\n    case CheckoutButtonActionType.DeinitializeButtonFailed:\n        return {\n            ...errors,\n            deinitializeError: action.payload,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CheckoutButtonStatusesState = DEFAULT_STATUS_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonStatusesState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonRequested:\n        return {\n            ...statuses,\n            isInitializing: true,\n        };\n\n    case CheckoutButtonActionType.InitializeButtonFailed:\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        return {\n            ...statuses,\n            isInitializing: false,\n        };\n\n    case CheckoutButtonActionType.DeinitializeButtonRequested:\n        return {\n            ...statuses,\n            isDeinitializing: true,\n        };\n\n    case CheckoutButtonActionType.DeinitializeButtonFailed:\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return {\n            ...statuses,\n            isDeinitializing: false,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\n\nimport Config from './config';\nimport { ConfigActionType, LoadConfigAction } from './config-actions';\nimport ConfigState, { ConfigErrorsState, ConfigStatusesState } from './config-state';\n\nconst DEFAULT_STATE: ConfigState = {\n    meta: {},\n    errors: {},\n    statuses: {},\n};\n\nexport default function configReducer(\n    state: ConfigState = DEFAULT_STATE,\n    action: Action\n): ConfigState {\n    const reducer = combineReducers<ConfigState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Config | undefined,\n    action: LoadConfigAction\n): Config | undefined {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigSucceeded:\n        return action.payload ? action.payload : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ConfigErrorsState = DEFAULT_STATE.errors,\n    action: LoadConfigAction\n): ConfigErrorsState {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case ConfigActionType.LoadConfigFailed:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ConfigStatusesState = DEFAULT_STATE.statuses,\n    action: LoadConfigAction\n): ConfigStatusesState {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigRequested:\n        return { ...statuses, isLoading: true };\n\n    case ConfigActionType.LoadConfigSucceeded:\n    case ConfigActionType.LoadConfigFailed:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { OrderAction, OrderActionType } from '../order';\n\nimport Coupon from './coupon';\nimport { CouponAction, CouponActionType } from './coupon-actions';\nimport CouponState, { CouponErrorsState, CouponStatusesState } from './coupon-state';\n\nconst DEFAULT_STATE: CouponState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function couponReducer(\n    state: CouponState = DEFAULT_STATE,\n    action: Action\n): CouponState {\n    const reducer = combineReducers<CouponState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Coupon[] | undefined,\n    action: CouponAction | CheckoutAction | OrderAction\n): Coupon[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case OrderActionType.LoadOrderSucceeded:\n        return action.payload ? action.payload.coupons : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CouponErrorsState = {},\n    action: CouponAction\n): CouponErrorsState {\n    switch (action.type) {\n    case CouponActionType.ApplyCouponRequested:\n    case CouponActionType.ApplyCouponSucceeded:\n        return { ...errors, applyCouponError: undefined };\n\n    case CouponActionType.ApplyCouponFailed:\n        return { ...errors, applyCouponError: action.payload };\n\n    case CouponActionType.RemoveCouponRequested:\n    case CouponActionType.RemoveCouponSucceeded:\n        return { ...errors, removeCouponError: undefined };\n\n    case CouponActionType.RemoveCouponFailed:\n        return { ...errors, removeCouponError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CouponStatusesState = {},\n    action: CouponAction\n): CouponStatusesState {\n    switch (action.type) {\n    case CouponActionType.ApplyCouponRequested:\n        return { ...statuses, isApplyingCoupon: true };\n\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.ApplyCouponFailed:\n        return { ...statuses, isApplyingCoupon: false };\n\n    case CouponActionType.RemoveCouponRequested:\n        return { ...statuses, isRemovingCoupon: true };\n\n    case CouponActionType.RemoveCouponSucceeded:\n    case CouponActionType.RemoveCouponFailed:\n        return { ...statuses, isRemovingCoupon: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping/consignment-actions';\n\nimport { CouponAction, CouponActionType } from './coupon-actions';\nimport GiftCertificate from './gift-certificate';\nimport { GiftCertificateAction, GiftCertificateActionType } from './gift-certificate-actions';\nimport GiftCertificateState, { GiftCertificateErrorsState, GiftCertificateStatusesState } from './gift-certificate-state';\n\nconst DEFAULT_STATE: GiftCertificateState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function giftCertificateReducer(\n    state: GiftCertificateState = DEFAULT_STATE,\n    action: Action\n): GiftCertificateState {\n    const reducer = combineReducers<GiftCertificateState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: GiftCertificate[] | undefined,\n    action: CheckoutAction | GiftCertificateAction | ConsignmentAction | CouponAction\n): GiftCertificate[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return action.payload ? action.payload.giftCertificates : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: GiftCertificateErrorsState = DEFAULT_STATE.errors,\n    action: GiftCertificateAction\n): GiftCertificateErrorsState {\n    switch (action.type) {\n    case GiftCertificateActionType.ApplyGiftCertificateRequested:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n        return { ...errors, applyGiftCertificateError: undefined };\n\n    case GiftCertificateActionType.ApplyGiftCertificateFailed:\n        return { ...errors, applyGiftCertificateError: action.payload };\n\n    case GiftCertificateActionType.RemoveGiftCertificateRequested:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return { ...errors, removeGiftCertificateError: undefined };\n\n    case GiftCertificateActionType.RemoveGiftCertificateFailed:\n        return { ...errors, removeGiftCertificateError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: GiftCertificateStatusesState = DEFAULT_STATE.statuses,\n    action: GiftCertificateAction\n): GiftCertificateStatusesState {\n    switch (action.type) {\n    case GiftCertificateActionType.ApplyGiftCertificateRequested:\n        return { ...statuses, isApplyingGiftCertificate: true };\n\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateFailed:\n        return { ...statuses, isApplyingGiftCertificate: false };\n\n    case GiftCertificateActionType.RemoveGiftCertificateRequested:\n        return { ...statuses, isRemovingGiftCertificate: true };\n\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateFailed:\n        return { ...statuses, isRemovingGiftCertificate: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\n\nimport Customer from './customer';\nimport CustomerState from './customer-state';\n\nconst DEFAULT_STATE: CustomerState = {};\n\nexport default function customerReducer(\n    state: CustomerState = DEFAULT_STATE,\n    action: CheckoutAction\n): CustomerState {\n    const reducer = combineReducers<CustomerState, CheckoutAction>({\n        data: dataReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Customer | undefined,\n    action: CheckoutAction\n): Customer | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return action.payload ? { ...data, ...action.payload.customer } : data;\n\n    default:\n        return data;\n    }\n}\n","export default interface CustomerStrategyState {\n    data: CustomerStrategyDataState;\n    errors: CustomerStrategyErrorsState;\n    statuses: CustomerStrategyStatusesState;\n}\n\nexport interface CustomerStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean,\n    };\n}\n\nexport interface CustomerStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    signInError?: Error;\n    signInMethodId?: string;\n    signOutError?: Error;\n    signOutMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface CustomerStrategyStatusesState {\n    deinitializeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isInitializing?: boolean;\n    isSigningIn?: boolean;\n    isSigningOut?: boolean;\n    signInMethodId?: string;\n    signOutMethodId?: string;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: CustomerStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\n\nimport { CustomerStrategyAction, CustomerStrategyActionType } from './customer-strategy-actions';\nimport CustomerStrategyState, { CustomerStrategyDataState, CustomerStrategyErrorsState, CustomerStrategyStatusesState, DEFAULT_STATE } from './customer-strategy-state';\n\nexport default function customerStrategyReducer(\n    state: CustomerStrategyState = DEFAULT_STATE,\n    action: Action\n): CustomerStrategyState {\n    const reducer = combineReducers<CustomerStrategyState, CustomerStrategyAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CustomerStrategyDataState = DEFAULT_STATE.data,\n    action: CustomerStrategyAction\n): CustomerStrategyDataState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return {\n            ...data,\n            [action.meta && action.meta.methodId]: {\n                isInitialized: true,\n            },\n        };\n\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...data,\n            [action.meta && action.meta.methodId]: {\n                isInitialized: false,\n            },\n        };\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: CustomerStrategyErrorsState = DEFAULT_STATE.errors,\n    action: CustomerStrategyAction\n): CustomerStrategyErrorsState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeRequested:\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return {\n            ...errors,\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.InitializeFailed:\n        return {\n            ...errors,\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.DeinitializeRequested:\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...errors,\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.DeinitializeFailed:\n        return {\n            ...errors,\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.SignInRequested:\n    case CustomerStrategyActionType.SignInSucceeded:\n        return {\n            ...errors,\n            signInError: undefined,\n            signInMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.SignInFailed:\n        return {\n            ...errors,\n            signInError: action.payload,\n            signInMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.SignOutRequested:\n    case CustomerStrategyActionType.SignOutSucceeded:\n        return {\n            ...errors,\n            signOutError: undefined,\n            signOutMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.SignOutFailed:\n        return {\n            ...errors,\n            signOutError: action.payload,\n            signOutMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.WidgetInteractionStarted:\n    case CustomerStrategyActionType.WidgetInteractionFinished:\n        return {\n            ...errors,\n            widgetInteractionError: undefined,\n            widgetInteractionMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.WidgetInteractionFailed:\n        return {\n            ...errors,\n            widgetInteractionError: action.payload,\n            widgetInteractionMethodId: action.meta.methodId,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CustomerStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: CustomerStrategyAction\n): CustomerStrategyStatusesState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeRequested:\n        return {\n            ...statuses,\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.InitializeFailed:\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return {\n            ...statuses,\n            isInitializing: false,\n            initializeMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.DeinitializeRequested:\n        return {\n            ...statuses,\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.DeinitializeFailed:\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...statuses,\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.SignInRequested:\n        return {\n            ...statuses,\n            isSigningIn: true,\n            signInMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.SignInFailed:\n    case CustomerStrategyActionType.SignInSucceeded:\n        return {\n            ...statuses,\n            isSigningIn: false,\n            signInMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.SignOutRequested:\n        return {\n            ...statuses,\n            isSigningOut: true,\n            signOutMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.SignOutFailed:\n    case CustomerStrategyActionType.SignOutSucceeded:\n        return {\n            ...statuses,\n            isSigningOut: false,\n            signOutMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.WidgetInteractionStarted:\n        return {\n            ...statuses,\n            isWidgetInteracting: true,\n            widgetInteractionMethodId: action.meta.methodId,\n         };\n\n    case CustomerStrategyActionType.WidgetInteractionFinished:\n    case CustomerStrategyActionType.WidgetInteractionFailed:\n         return {\n            ...statuses,\n            isWidgetInteracting: false,\n            widgetInteractionMethodId: undefined,\n         };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\n\nimport Country from './country';\nimport { CountryActionType, LoadCountriesAction } from './country-actions';\nimport CountryState, { CountryErrorsState, CountryStatusesState } from './country-state';\n\nconst DEFAULT_STATE: CountryState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function countryReducer(\n    state: CountryState = DEFAULT_STATE,\n    action: Action\n): CountryState {\n    const reducer = combineReducers<CountryState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Country[] | undefined,\n    action: LoadCountriesAction\n): Country[] | undefined {\n    switch (action.type) {\n    case CountryActionType.LoadCountriesSucceeded:\n        return action.payload || [];\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CountryErrorsState = DEFAULT_STATE.errors,\n    action: LoadCountriesAction\n): CountryErrorsState {\n    switch (action.type) {\n    case CountryActionType.LoadCountriesRequested:\n    case CountryActionType.LoadCountriesSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case CountryActionType.LoadCountriesFailed:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CountryStatusesState = DEFAULT_STATE.statuses,\n    action: LoadCountriesAction\n): CountryStatusesState {\n    switch (action.type) {\n    case CountryActionType.LoadCountriesRequested:\n        return { ...statuses, isLoading: true };\n\n    case CountryActionType.LoadCountriesSucceeded:\n    case CountryActionType.LoadCountriesFailed:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\nimport { omit } from 'lodash';\n\nimport { clearErrorReducer } from '../common/error';\n\nimport { OrderAction, OrderActionType } from './order-actions';\nimport OrderState, { OrderDataState, OrderErrorsState, OrderMetaState, OrderStatusesState } from './order-state';\n\nconst DEFAULT_STATE: OrderState = {\n    errors: {},\n    meta: {},\n    statuses: {},\n};\n\nexport default function orderReducer(\n    state: OrderState = DEFAULT_STATE,\n    action: Action\n): OrderState {\n    const reducer = combineReducers<OrderState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: OrderDataState | undefined,\n    action: OrderAction\n): OrderDataState | undefined {\n    switch (action.type) {\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n        return action.payload\n            ? omit({ ...data, ...action.payload }, ['billingAddress', 'coupons'])\n            : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: OrderMetaState | undefined,\n    action: OrderAction\n): OrderMetaState | undefined {\n    switch (action.type) {\n    case OrderActionType.FinalizeOrderSucceeded:\n    case OrderActionType.SubmitOrderSucceeded:\n        return action.payload ? {\n            ...meta,\n            ...action.meta,\n            callbackUrl: action.payload.order.callbackUrl,\n            orderToken: action.payload.order.token,\n            payment: action.payload.order && action.payload.order.payment,\n        } : meta;\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: OrderErrorsState = DEFAULT_STATE.errors,\n    action: OrderAction\n): OrderErrorsState {\n    switch (action.type) {\n    case OrderActionType.LoadOrderRequested:\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n    case OrderActionType.LoadOrderPaymentsRequested:\n        return { ...errors, loadError: undefined };\n\n    case OrderActionType.LoadOrderFailed:\n    case OrderActionType.LoadOrderPaymentsFailed:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: OrderStatusesState = DEFAULT_STATE.statuses,\n    action: OrderAction\n): OrderStatusesState {\n    switch (action.type) {\n    case OrderActionType.LoadOrderRequested:\n    case OrderActionType.LoadOrderPaymentsRequested:\n        return { ...statuses, isLoading: true };\n\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderFailed:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n    case OrderActionType.LoadOrderPaymentsFailed:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { PaymentAction, PaymentActionType } from './payment-actions';\nimport PaymentResponseBody from './payment-response-body';\nimport PaymentState from './payment-state';\n\nexport default function paymentReducer(state: PaymentState = {}, action: PaymentAction): PaymentState {\n    const reducer = combineReducers<PaymentState, PaymentAction>({\n        data: dataReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(data: PaymentResponseBody | undefined, action: PaymentAction): PaymentResponseBody | undefined {\n    switch (action.type) {\n    case PaymentActionType.SubmitPaymentSucceeded:\n        return action.payload;\n\n    default:\n        return data;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { mergeOrPush } from '../common/utility';\n\nimport PaymentMethod from './payment-method';\nimport { PaymentMethodAction, PaymentMethodActionType } from './payment-method-actions';\nimport PaymentMethodMeta from './payment-method-meta';\nimport PaymentMethodState, { PaymentMethodErrorsState, PaymentMethodStatusesState } from './payment-method-state';\n\nconst DEFAULT_STATE: PaymentMethodState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function paymentMethodReducer(\n    state: PaymentMethodState = DEFAULT_STATE,\n    action: Action\n): PaymentMethodState {\n    const reducer = combineReducers<PaymentMethodState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentMethod[] | undefined,\n    action: PaymentMethodAction\n): PaymentMethod[] | undefined {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n        return action.payload ?\n            mergeOrPush(data || [], action.payload, {\n                id: action.payload.id,\n                gateway: action.payload.gateway,\n            }) :\n            data;\n\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return action.payload ? action.payload : [];\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: PaymentMethodMeta | undefined,\n    action: PaymentMethodAction\n): PaymentMethodMeta | undefined {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return action.meta ? { ...meta, ...action.meta } : meta;\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: PaymentMethodErrorsState = DEFAULT_STATE.errors,\n    action: PaymentMethodAction\n): PaymentMethodErrorsState {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsRequested:\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case PaymentMethodActionType.LoadPaymentMethodsFailed:\n        return { ...errors, loadError: action.payload };\n\n    case PaymentMethodActionType.LoadPaymentMethodRequested:\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n        return {\n            ...errors,\n            loadMethodId: undefined,\n            loadMethodError: undefined,\n        };\n\n    case PaymentMethodActionType.LoadPaymentMethodFailed:\n        return {\n            ...errors,\n            loadMethodId: action.meta.methodId,\n            loadMethodError: action.payload,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: PaymentMethodStatusesState = DEFAULT_STATE.statuses,\n    action: PaymentMethodAction\n): PaymentMethodStatusesState {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsRequested:\n        return { ...statuses, isLoading: true };\n\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n    case PaymentMethodActionType.LoadPaymentMethodsFailed:\n        return { ...statuses, isLoading: false };\n\n    case PaymentMethodActionType.LoadPaymentMethodRequested:\n        return {\n            ...statuses,\n            isLoadingMethod: true,\n            loadMethodId: action.meta.methodId,\n        };\n\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n    case PaymentMethodActionType.LoadPaymentMethodFailed:\n        return {\n            ...statuses,\n            isLoadingMethod: false,\n            loadMethodId: undefined,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","import { assign, findIndex, isPlainObject, pickBy } from 'lodash';\n\nimport { PartialDeep } from '../types';\n\n/**\n * Push an item to an array if it doesn't exist in the array. Otherwise, merge\n * with the existing item in the array. This function always returns a new array.\n */\nexport default function mergeOrPush<T>(\n    array: T[],\n    item: T,\n    predicate: ((item: T) => boolean) | PartialDeep<T>\n): T[] {\n    const index = findIndex(array, typeof predicate === 'object' ? pickBy(predicate) : predicate);\n    const newArray = [...array];\n\n    if (index === -1) {\n        newArray.push(item);\n    } else {\n        newArray[index] = isPlainObject(item) ? assign({}, array[index], item) : item;\n    }\n\n    return newArray;\n}\n","export default interface PaymentStrategyState {\n    data: PaymentStrategyDataState;\n    errors: PaymentStrategyErrorsState;\n    statuses: PaymentStrategyStatusesState;\n}\n\nexport interface PaymentStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean,\n    };\n}\n\nexport interface PaymentStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    executeError?: Error;\n    executeMethodId?: string;\n    finalizeError?: Error;\n    finalizeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface PaymentStrategyStatusesState {\n    deinitializeMethodId?: string;\n    executeMethodId?: string;\n    finalizeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isExecuting?: boolean;\n    isFinalizing?: boolean;\n    isInitializing?: boolean;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: PaymentStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\n\nimport { PaymentStrategyAction, PaymentStrategyActionType } from './payment-strategy-actions';\nimport PaymentStrategyState, { DEFAULT_STATE, PaymentStrategyDataState, PaymentStrategyErrorsState, PaymentStrategyStatusesState } from './payment-strategy-state';\n\nexport default function paymentStrategyReducer(\n    state: PaymentStrategyState = DEFAULT_STATE,\n    action: Action\n): PaymentStrategyState {\n    const reducer = combineReducers<PaymentStrategyState, PaymentStrategyAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentStrategyDataState = DEFAULT_STATE.data,\n    action: PaymentStrategyAction\n): PaymentStrategyDataState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return {\n            ...data,\n            [action.meta && action.meta.methodId]: {\n                isInitialized: true,\n            },\n        };\n\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...data,\n            [action.meta && action.meta.methodId]: {\n                isInitialized: false,\n            },\n        };\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: PaymentStrategyErrorsState = DEFAULT_STATE.errors,\n    action: PaymentStrategyAction\n): PaymentStrategyErrorsState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeRequested:\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return {\n            ...errors,\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.InitializeFailed:\n        return {\n            ...errors,\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.DeinitializeRequested:\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...errors,\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.DeinitializeFailed:\n        return {\n            ...errors,\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.ExecuteRequested:\n    case PaymentStrategyActionType.ExecuteSucceeded:\n        return {\n            ...errors,\n            executeError: undefined,\n            executeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.ExecuteFailed:\n        return {\n            ...errors,\n            executeError: action.payload,\n            executeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.FinalizeRequested:\n    case PaymentStrategyActionType.FinalizeSucceeded:\n        return {\n            ...errors,\n            finalizeError: undefined,\n            finalizeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.FinalizeFailed:\n        return {\n            ...errors,\n            finalizeError: action.payload,\n            finalizeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.WidgetInteractionStarted:\n    case PaymentStrategyActionType.WidgetInteractionFinished:\n        return {\n            ...errors,\n            widgetInteractionError: undefined,\n            widgetInteractionMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.WidgetInteractionFailed:\n        return {\n            ...errors,\n            widgetInteractionError: action.payload,\n            widgetInteractionMethodId: action.meta.methodId,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: PaymentStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: PaymentStrategyAction\n): PaymentStrategyStatusesState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeRequested:\n        return {\n            ...statuses,\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.InitializeFailed:\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return {\n            ...statuses,\n            isInitializing: false,\n            initializeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.DeinitializeRequested:\n        return {\n            ...statuses,\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.DeinitializeFailed:\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...statuses,\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.ExecuteRequested:\n        return {\n            ...statuses,\n            isExecuting: true,\n            executeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.ExecuteFailed:\n    case PaymentStrategyActionType.ExecuteSucceeded:\n        return {\n            ...statuses,\n            isExecuting: false,\n            executeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.FinalizeRequested:\n        return {\n            ...statuses,\n            isFinalizing: true,\n            finalizeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.FinalizeFailed:\n    case PaymentStrategyActionType.FinalizeSucceeded:\n        return {\n            ...statuses,\n            isFinalizing: false,\n            finalizeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.WidgetInteractionStarted:\n    return {\n        ...statuses,\n        isWidgetInteracting: true,\n        widgetInteractionMethodId: action.meta.methodId,\n     };\n\n    case PaymentStrategyActionType.WidgetInteractionFinished:\n    case PaymentStrategyActionType.WidgetInteractionFailed:\n     return {\n        ...statuses,\n        isWidgetInteracting: false,\n        widgetInteractionMethodId: undefined,\n     };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../../common/error';\n\nimport Instrument from './instrument';\nimport { InstrumentAction, InstrumentActionType } from './instrument-actions';\nimport InstrumentState, { InstrumentErrorState, InstrumentMeta, InstrumentStatusState } from './instrument-state';\n\nconst DEFAULT_STATE = {\n    data: [],\n    errors: {},\n    statuses: {},\n};\n\nexport default function instrumentReducer(\n    state: InstrumentState = DEFAULT_STATE,\n    action: Action\n): InstrumentState {\n    const reducer = combineReducers<InstrumentState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Instrument[] = DEFAULT_STATE.data,\n    action: InstrumentAction\n): Instrument[] {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n        return action.payload ? action.payload.vaultedInstruments : [];\n\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n        return data.filter(instrument =>\n            instrument.bigpayToken !== action.meta.instrumentId\n        );\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: InstrumentMeta | undefined,\n    action: InstrumentAction\n): InstrumentMeta | undefined {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n        return { ...meta, ...action.meta };\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: InstrumentErrorState = DEFAULT_STATE.errors,\n    action: InstrumentAction\n): InstrumentErrorState {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsRequested:\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case InstrumentActionType.DeleteInstrumentRequested:\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n        return {\n            ...errors,\n            deleteError: undefined,\n            failedInstrument: undefined,\n        };\n\n    case InstrumentActionType.LoadInstrumentsFailed:\n        return { ...errors, loadError: action.payload };\n\n    case InstrumentActionType.DeleteInstrumentFailed:\n        return {\n            ...errors,\n            deleteError: action.payload,\n            failedInstrument: action.meta.instrumentId,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: InstrumentStatusState = DEFAULT_STATE.statuses,\n    action: InstrumentAction\n): InstrumentStatusState {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsRequested:\n        return { ...statuses, isLoading: true };\n\n    case InstrumentActionType.DeleteInstrumentRequested:\n        return {\n            ...statuses,\n            isDeleting: true,\n            deletingInstrument: action.meta.instrumentId,\n        };\n\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n    case InstrumentActionType.LoadInstrumentsFailed:\n        return { ...statuses, isLoading: false };\n\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n    case InstrumentActionType.DeleteInstrumentFailed:\n        return {\n            ...statuses,\n            isDeleting: false,\n            deletingInstrument: undefined,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport RemoteCheckout from './remote-checkout';\nimport { RemoteCheckoutAction, RemoteCheckoutActionType } from './remote-checkout-actions';\nimport RemoteCheckoutState, { RemoteCheckoutStateData } from './remote-checkout-state';\n\nconst DEFAULT_STATE: RemoteCheckoutState = {\n    data: {},\n};\n\nexport default function remoteCheckoutReducer(\n    state: RemoteCheckoutState = DEFAULT_STATE,\n    action: RemoteCheckoutAction\n): RemoteCheckoutState {\n    if (!action.meta || !action.meta.methodId) {\n        return state;\n    }\n\n    const reducer = combineReducers<RemoteCheckoutState>({\n        data: combineReducers<RemoteCheckoutStateData>({\n            [action.meta.methodId]: dataReducer,\n        }),\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: RemoteCheckout = DEFAULT_STATE.data,\n    action: RemoteCheckoutAction\n): RemoteCheckout {\n    switch (action.type) {\n    case RemoteCheckoutActionType.InitializeRemoteBillingSucceeded:\n        return action.payload ? { ...data, billing: action.payload.billing } : data;\n\n    case RemoteCheckoutActionType.InitializeRemoteShippingSucceeded:\n        return action.payload ? { ...data, shipping: action.payload.shipping } : data;\n\n    case RemoteCheckoutActionType.LoadRemoteSettingsSucceeded:\n        return { ...data, settings: action.payload };\n\n    case RemoteCheckoutActionType.UpdateRemoteCheckout:\n        return { ...data, ...action.payload };\n\n    default:\n        return data;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { CouponAction, CouponActionType } from '../coupon';\nimport { CustomerAction, CustomerActionType } from '../customer';\n\nimport Consignment from './consignment';\nimport { ConsignmentAction, ConsignmentActionType } from './consignment-actions';\nimport ConsignmentState, { ConsignmentErrorsState, ConsignmentStatusesState } from './consignment-state';\n\nconst DEFAULT_STATE: ConsignmentState = {\n    errors: {\n        updateShippingOptionError: {},\n        updateError: {},\n        deleteError: {},\n    },\n    statuses: {\n        isUpdating: {},\n        isUpdatingShippingOption: {},\n        isDeleting: {},\n    },\n};\n\nexport default function consignmentReducer(\n    state: ConsignmentState = DEFAULT_STATE,\n    action: Action\n): ConsignmentState {\n    const reducer = combineReducers<ConsignmentState, ConsignmentAction | CheckoutAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Consignment[] | undefined,\n    action: ConsignmentAction | CheckoutAction | CouponAction | CustomerAction\n): Consignment[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n        return action.payload ? action.payload.consignments : data;\n\n    case CustomerActionType.SignOutCustomerSucceeded:\n        return [];\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ConsignmentErrorsState = DEFAULT_STATE.errors,\n    action: ConsignmentAction | CheckoutAction\n): ConsignmentErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsRequested:\n        return { ...errors, loadError: undefined };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case ConsignmentActionType.LoadShippingOptionsFailed:\n        return { ...errors, loadError: action.payload };\n\n    case ConsignmentActionType.CreateConsignmentsRequested:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n        return { ...errors, createError: undefined };\n\n    case ConsignmentActionType.CreateConsignmentsFailed:\n        return { ...errors, createError: action.payload };\n\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentRequested:\n        if (action.meta) {\n            errors.updateError[action.meta.id] = undefined;\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateConsignmentFailed:\n        if (action.meta) {\n            errors.updateError[action.meta.id] = action.payload;\n        }\n\n        return errors;\n\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentRequested:\n        if (action.meta) {\n            errors.deleteError[action.meta.id] = undefined;\n        }\n\n        return errors;\n\n    case ConsignmentActionType.DeleteConsignmentFailed:\n        if (action.meta) {\n            errors.deleteError[action.meta.id] = action.payload;\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateShippingOptionRequested:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n        if (action.meta) {\n            errors.updateShippingOptionError[action.meta.id] = undefined;\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateShippingOptionFailed:\n        if (action.meta) {\n            errors.updateShippingOptionError[action.meta.id] = action.payload;\n        }\n\n        return errors;\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ConsignmentStatusesState = DEFAULT_STATE.statuses,\n    action: ConsignmentAction | CheckoutAction\n): ConsignmentStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return { ...statuses, isLoading: true };\n\n    case ConsignmentActionType.LoadShippingOptionsRequested:\n        return { ...statuses, isLoadingShippingOptions: true };\n\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.LoadCheckoutFailed:\n        return { ...statuses, isLoading: false };\n\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsFailed:\n        return { ...statuses, isLoadingShippingOptions: false };\n\n    case ConsignmentActionType.CreateConsignmentsRequested:\n        return { ...statuses, isCreating: true };\n\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.CreateConsignmentsFailed:\n        return { ...statuses, isCreating: false };\n\n    case ConsignmentActionType.UpdateConsignmentRequested:\n        if (action.meta) {\n            statuses.isUpdating[action.meta.id] = true;\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentFailed:\n        if (action.meta) {\n            statuses.isUpdating[action.meta.id] = false;\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.DeleteConsignmentRequested:\n        if (action.meta) {\n            statuses.isDeleting[action.meta.id] = true;\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentFailed:\n        if (action.meta) {\n            statuses.isDeleting[action.meta.id] = false;\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateShippingOptionRequested:\n        if (action.meta) {\n            statuses.isUpdatingShippingOption[action.meta.id] = true;\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionFailed:\n        if (action.meta) {\n            statuses.isUpdatingShippingOption[action.meta.id] = false;\n        }\n\n        return statuses;\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { Country } from '../geography';\n\nimport { LoadShippingCountriesAction, ShippingCountryActionType } from './shipping-country-actions';\nimport ShippingCountryState, { ShippingCountryErrorsState, ShippingCountryStatusesState } from './shipping-country-state';\n\nconst DEFAULT_STATE: ShippingCountryState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function shippingCountryReducer(\n    state: ShippingCountryState = DEFAULT_STATE,\n    action: Action\n): ShippingCountryState {\n    const reducer = combineReducers<ShippingCountryState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Country[] | undefined,\n    action: LoadShippingCountriesAction\n): Country[] | undefined {\n    switch (action.type) {\n    case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n        return action.payload || [];\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ShippingCountryErrorsState = DEFAULT_STATE.errors,\n    action: LoadShippingCountriesAction\n): ShippingCountryErrorsState {\n    switch (action.type) {\n    case ShippingCountryActionType.LoadShippingCountriesRequested:\n    case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case ShippingCountryActionType.LoadShippingCountriesFailed:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ShippingCountryStatusesState = DEFAULT_STATE.statuses,\n    action: LoadShippingCountriesAction\n): ShippingCountryStatusesState {\n    switch (action.type) {\n    case ShippingCountryActionType.LoadShippingCountriesRequested:\n        return { ...statuses, isLoading: true };\n\n    case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n    case ShippingCountryActionType.LoadShippingCountriesFailed:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n","export default interface ShippingStrategyState {\n    data: ShippingStrategyDataState;\n    errors: ShippingStrategyErrorsState;\n    statuses: ShippingStrategyStatusesState;\n}\n\nexport interface ShippingStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean,\n    };\n}\n\nexport interface ShippingStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    updateAddressError?: Error;\n    updateAddressMethodId?: string;\n    selectOptionError?: Error;\n    selectOptionMethodId?: string;\n}\n\nexport interface ShippingStrategyStatusesState {\n    deinitializeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isInitializing?: boolean;\n    isUpdatingAddress?: boolean;\n    isSelectingOption?: boolean;\n    updateAddressMethodId?: string;\n    selectOptionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: ShippingStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\n\nimport { ShippingStrategyAction, ShippingStrategyActionType } from './shipping-strategy-actions';\nimport ShippingStrategyState, { DEFAULT_STATE, ShippingStrategyDataState, ShippingStrategyErrorsState, ShippingStrategyStatusesState } from './shipping-strategy-state';\n\nexport default function shippingStrategyReducer(\n    state: ShippingStrategyState = DEFAULT_STATE,\n    action: Action\n): ShippingStrategyState {\n    const reducer = combineReducers<ShippingStrategyState, ShippingStrategyAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: ShippingStrategyDataState = DEFAULT_STATE.data,\n    action: ShippingStrategyAction\n): ShippingStrategyDataState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return {\n            ...data,\n            [action.meta && action.meta.methodId]: {\n                isInitialized: true,\n            },\n        };\n\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...data,\n            [action.meta && action.meta.methodId]: {\n                isInitialized: false,\n            },\n        };\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: ShippingStrategyErrorsState = DEFAULT_STATE.errors,\n    action: ShippingStrategyAction\n): ShippingStrategyErrorsState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeRequested:\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return {\n            ...errors,\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.InitializeFailed:\n        return {\n            ...errors,\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.DeinitializeRequested:\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...errors,\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.DeinitializeFailed:\n        return {\n            ...errors,\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.UpdateAddressRequested:\n    case ShippingStrategyActionType.UpdateAddressSucceeded:\n        return {\n            ...errors,\n            updateAddressError: undefined,\n            updateAddressMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.UpdateAddressFailed:\n        return {\n            ...errors,\n            updateAddressError: action.payload,\n            updateAddressMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.SelectOptionRequested:\n    case ShippingStrategyActionType.SelectOptionSucceeded:\n        return {\n            ...errors,\n            selectOptionError: undefined,\n            selectOptionMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.SelectOptionFailed:\n        return {\n            ...errors,\n            selectOptionError: action.payload,\n            selectOptionMethodId: action.meta && action.meta.methodId,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ShippingStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: ShippingStrategyAction\n): ShippingStrategyStatusesState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeRequested:\n        return {\n            ...statuses,\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.InitializeFailed:\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return {\n            ...statuses,\n            isInitializing: false,\n            initializeMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.DeinitializeRequested:\n        return {\n            ...statuses,\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.DeinitializeFailed:\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...statuses,\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.UpdateAddressRequested:\n        return {\n            ...statuses,\n            isUpdatingAddress: true,\n            updateAddressMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.UpdateAddressFailed:\n    case ShippingStrategyActionType.UpdateAddressSucceeded:\n        return {\n            ...statuses,\n            isUpdatingAddress: false,\n            updateAddressMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.SelectOptionRequested:\n        return {\n            ...statuses,\n            isSelectingOption: true,\n            selectOptionMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.SelectOptionFailed:\n    case ShippingStrategyActionType.SelectOptionSucceeded:\n        return {\n            ...statuses,\n            isSelectingOption: false,\n            selectOptionMethodId: undefined,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\nimport { omit } from 'lodash';\n\nimport { BillingAddressAction, BillingAddressActionType } from '../billing';\nimport { clearErrorReducer } from '../common/error';\nimport { CouponAction, CouponActionType, GiftCertificateAction, GiftCertificateActionType } from '../coupon';\nimport { OrderAction, OrderActionType } from '../order';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping';\n\nimport { CheckoutAction, CheckoutActionType } from './checkout-actions';\nimport CheckoutState, { CheckoutDataState, CheckoutErrorsState, CheckoutStatusesState } from './checkout-state';\n\nconst DEFAULT_STATE: CheckoutState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function checkoutReducer(\n    state: CheckoutState = DEFAULT_STATE,\n    action: Action\n): CheckoutState {\n    const reducer = combineReducers<CheckoutState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CheckoutDataState | undefined,\n    action: CheckoutAction | BillingAddressAction | ConsignmentAction | CouponAction | GiftCertificateAction | OrderAction\n): CheckoutDataState | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return action.payload\n            ? omit({ ...data, ...action.payload }, ['billingAddress', 'cart', 'consignments', 'customer', 'coupons', 'giftCertifcates'])\n            : data;\n\n    case OrderActionType.SubmitOrderSucceeded:\n        return action.payload && data\n            ? { ...data, orderId: action.payload.order.orderId }\n            : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CheckoutErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction | OrderAction\n): CheckoutErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return {\n            ...errors,\n            loadError: undefined,\n        };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return {\n            ...errors,\n            loadError: action.payload,\n        };\n\n    case CheckoutActionType.UpdateCheckoutRequested:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n        return {\n            ...errors,\n            updateError: undefined,\n        };\n\n    case CheckoutActionType.UpdateCheckoutFailed:\n        return {\n            ...errors,\n            updateError: action.payload,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CheckoutStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction | OrderAction\n): CheckoutStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return {\n            ...statuses,\n            isLoading: true,\n        };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return {\n            ...statuses,\n            isLoading: false,\n        };\n\n    case CheckoutActionType.UpdateCheckoutRequested:\n        return {\n            ...statuses,\n            isUpdating: true,\n        };\n\n    case CheckoutActionType.UpdateCheckoutFailed:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n        return {\n            ...statuses,\n            isUpdating: false,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport BillingAddress from './billing-address';\nimport BillingAddressState from './billing-address-state';\n\n@selector\nexport default class BillingAddressSelector {\n    constructor(\n        private _billingAddress: BillingAddressState\n    ) {}\n\n    getBillingAddress(): BillingAddress | undefined {\n        return this._billingAddress.data;\n    }\n\n    getUpdateError(): Error | undefined {\n        return this._billingAddress.errors.updateError;\n    }\n\n    getContinueAsGuestError(): Error | undefined {\n        return this._billingAddress.errors.continueAsGuestError;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._billingAddress.errors.loadError;\n    }\n\n    isUpdating(): boolean {\n        return !!this._billingAddress.statuses.isUpdating;\n    }\n\n    isContinuingAsGuest(): boolean {\n        return !!this._billingAddress.statuses.isContinuingAsGuest;\n    }\n\n    isLoading(): boolean {\n        return !!this._billingAddress.statuses.isLoading;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport Cart from './cart';\nimport CartState from './cart-state';\n\n@selector\nexport default class CartSelector {\n    constructor(\n        private _cart: CartState\n    ) {}\n\n    getCart(): Cart | undefined {\n        return this._cart.data;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._cart.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._cart.statuses.isLoading;\n    }\n}\n","import { find, some, values } from 'lodash';\n\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonState from './checkout-button-state';\nimport { CheckoutButtonMethodType } from './strategies';\n\n@selector\nexport default class CheckoutButtonSelector {\n    constructor(\n        private _checkoutButton: CheckoutButtonState\n    ) {}\n\n    getState(): CheckoutButtonState {\n        return this._checkoutButton;\n    }\n\n    isInitializing(methodId?: CheckoutButtonMethodType): boolean {\n        if (methodId) {\n            const method = this._checkoutButton.statuses[methodId];\n\n            return (method && method.isInitializing) === true;\n        }\n\n        return some(this._checkoutButton.statuses, { isInitializing: true });\n    }\n\n    isInitialized(methodId: CheckoutButtonMethodType, containerId?: string): boolean {\n        const method = this._checkoutButton.data[methodId];\n\n        if (!method) {\n            return false;\n        }\n\n        if (!containerId) {\n            return some(method.initializedContainers, isInitialized => isInitialized === true);\n        }\n\n        return method.initializedContainers[containerId] === true;\n    }\n\n    isDeinitializing(methodId?: CheckoutButtonMethodType): boolean {\n        if (methodId) {\n            const method = this._checkoutButton.statuses[methodId];\n\n            return (method && method.isDeinitializing) === true;\n        }\n\n        return some(this._checkoutButton.statuses, { isDeinitializing: true });\n    }\n\n    getInitializeError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        const method = methodId ?\n            this._checkoutButton.errors[methodId] :\n            find(values(this._checkoutButton.errors), method => !!(method && method.initializeError));\n\n        return method && method.initializeError;\n    }\n\n    getDeinitializeError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        const method = methodId ?\n            this._checkoutButton.errors[methodId] :\n            find(values(this._checkoutButton.errors), method => !!(method && method.deinitializeError));\n\n        return method && method.deinitializeError;\n    }\n}\n","import { deepFreeze } from '@bigcommerce/data-store';\n\n// tslint:disable-next-line:ban-types\ntype FunctionProperties<T> = { [K in keyof T]: T[K] extends Function ? T[K] : never };\n\nexport default function createFreezeProxy<T extends object>(target: T): T {\n    return createProxy(target, (target, name) =>\n        (...args: any[]) => deepFreeze(target[name].call(target, ...args))\n    );\n}\n\nexport function createFreezeProxies<T extends { [key: string]: object }>(map: T): T {\n    return Object.keys(map)\n        .reduce((result, key) => {\n            result[key] = createFreezeProxy(map[key]);\n\n            return result;\n        }, {} as T);\n}\n\nfunction createProxy<T extends object>(target: T, trap: (target: FunctionProperties<T>, name: keyof FunctionProperties<T>, proxy: T) => any): T {\n    const proxy = Object.create(target);\n\n    traversePrototypeOf(target, prototype => {\n        Object.getOwnPropertyNames(prototype)\n            .forEach(name => {\n                if (name === 'constructor' || typeof proxy[name] !== 'function' || name.charAt(0) === '_') {\n                    return;\n                }\n\n                proxy[name] = trap(target as FunctionProperties<T>, name as keyof T, proxy);\n            });\n    });\n\n    return proxy;\n}\n\nfunction traversePrototypeOf(target: object, iteratee: (prototype: object) => void): void {\n    let prototype = Object.getPrototypeOf(target);\n\n    while (prototype) {\n        iteratee(prototype);\n\n        prototype = Object.getPrototypeOf(prototype);\n    }\n}\n","import { selector } from '../common/selector';\n\nimport Config, { ContextConfig, StoreConfig } from './config';\nimport ConfigState from './config-state';\n\n@selector\nexport default class ConfigSelector {\n    constructor(\n        private _config: ConfigState\n    ) {}\n\n    getConfig(): Config | undefined {\n        return this._config.data;\n    }\n\n    getStoreConfig(): StoreConfig | undefined {\n        return this._config.data && this._config.data.storeConfig;\n    }\n\n    getContextConfig(): ContextConfig | undefined {\n        return this._config.data && this._config.data.context;\n    }\n\n    getExternalSource(): string | undefined {\n        return this._config.meta && this._config.meta.externalSource;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._config.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._config.statuses.isLoading;\n    }\n}\n","import { RequestError } from '../common/error/errors';\nimport { selector } from '../common/selector';\n\nimport Coupon from './coupon';\nimport CouponState from './coupon-state';\n\n@selector\nexport default class CouponSelector {\n    constructor(\n        private _coupon: CouponState\n    ) {}\n\n    getCoupons(): Coupon[] | undefined {\n        return this._coupon.data;\n    }\n\n    getRemoveError(): RequestError | undefined {\n        return this._coupon.errors.removeCouponError;\n    }\n\n    getApplyError(): RequestError | undefined {\n        return this._coupon.errors.applyCouponError;\n    }\n\n    isApplying(): boolean {\n        return !!this._coupon.statuses.isApplyingCoupon;\n    }\n\n    isRemoving(): boolean {\n        return !!this._coupon.statuses.isRemovingCoupon;\n    }\n}\n","import { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\nimport { selector } from '../common/selector';\n\nimport GiftCertificate from './gift-certificate';\nimport GiftCertificateState from './gift-certificate-state';\n\n@selector\nexport default class GiftCertificateSelector {\n    constructor(\n        private _giftCertificate: GiftCertificateState\n    ) {}\n\n    getGiftCertificates(): GiftCertificate[] | undefined {\n        return this._giftCertificate.data;\n    }\n\n    getRemoveError(): RequestError<StorefrontErrorResponseBody> | undefined {\n        return this._giftCertificate.errors.removeGiftCertificateError;\n    }\n\n    getApplyError(): RequestError<StorefrontErrorResponseBody> | undefined {\n        return this._giftCertificate.errors.applyGiftCertificateError;\n    }\n\n    isApplying(): boolean {\n        return !!this._giftCertificate.statuses.isApplyingGiftCertificate;\n    }\n\n    isRemoving(): boolean {\n        return !!this._giftCertificate.statuses.isRemovingGiftCertificate;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport Customer from './customer';\nimport CustomerState from './customer-state';\n\n@selector\nexport default class CustomerSelector {\n    constructor(\n        private _customer: CustomerState\n    ) {}\n\n    getCustomer(): Customer | undefined {\n        return this._customer.data;\n    }\n}\n","import CustomerStrategyState from './customer-strategy-state';\n\nexport default class CustomerStrategySelector {\n    constructor(\n        private _customerStrategies: CustomerStrategyState\n    ) {}\n\n    getSignInError(methodId?: string): Error | undefined {\n        if (methodId && this._customerStrategies.errors.signInMethodId !== methodId) {\n            return;\n        }\n\n        return this._customerStrategies.errors.signInError;\n    }\n\n    getSignOutError(methodId?: string): Error | undefined {\n        if (methodId && this._customerStrategies.errors.signOutMethodId !== methodId) {\n            return;\n        }\n\n        return this._customerStrategies.errors.signOutError;\n    }\n\n    getInitializeError(methodId?: string): Error | undefined {\n        if (methodId && this._customerStrategies.errors.initializeMethodId !== methodId) {\n            return;\n        }\n\n        return this._customerStrategies.errors.initializeError;\n    }\n\n    getWidgetInteractionError(methodId?: string): Error | undefined {\n        if (methodId && this._customerStrategies.errors.widgetInteractionMethodId !== methodId) {\n            return;\n        }\n\n        return this._customerStrategies.errors.widgetInteractionError;\n    }\n\n    isSigningIn(methodId?: string): boolean {\n        if (methodId && this._customerStrategies.statuses.signInMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._customerStrategies.statuses.isSigningIn;\n    }\n\n    isSigningOut(methodId?: string): boolean {\n        if (methodId && this._customerStrategies.statuses.signOutMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._customerStrategies.statuses.isSigningOut;\n    }\n\n    isInitializing(methodId?: string): boolean {\n        if (methodId && this._customerStrategies.statuses.initializeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._customerStrategies.statuses.isInitializing;\n    }\n\n    isInitialized(methodId: string): boolean {\n        return !!(\n            this._customerStrategies.data[methodId] &&\n            this._customerStrategies.data[methodId].isInitialized\n        );\n    }\n\n    isWidgetInteracting(methodId?: string): boolean {\n        if (methodId && this._customerStrategies.statuses.widgetInteractionMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._customerStrategies.statuses.isWidgetInteracting;\n    }}\n","import { find } from 'lodash';\n\nimport { selector } from '../common/selector';\nimport { ConfigState } from '../config';\nimport { Country } from '../geography';\n\nimport FormField from './form-field';\n\n@selector\nexport default class FormSelector {\n    constructor(\n        private _config: ConfigState\n    ) {}\n\n    getShippingAddressFields(countries: Country[] = [], countryCode: string): FormField[] {\n        const selectedCountry = find(countries, { code: countryCode });\n        const fields = this._config.data ? this._config.data.storeConfig.formFields.shippingAddressFields : [];\n\n        return fields.map((field: any) => this._processField(field, countries, selectedCountry));\n    }\n\n    getBillingAddressFields(countries: Country[] = [], countryCode: string): FormField[] {\n        const selectedCountry = find(countries, { code: countryCode });\n        const fields = this._config.data ? this._config.data.storeConfig.formFields.billingAddressFields : [];\n\n        return fields.map((field: any) => this._processField(field, countries, selectedCountry));\n    }\n\n    private _processField(field: FormField, countries: Country[], selectedCountry?: Country): FormField {\n        if (field.name === 'countryCode') {\n            return this._processCountry(field, countries, selectedCountry);\n        }\n\n        if (field.name === 'stateOrProvince') {\n            return this._processProvince(field, selectedCountry);\n        }\n\n        if (field.name === 'postalCode') {\n            return this._processsPostCode(field, selectedCountry);\n        }\n\n        return field;\n    }\n\n    private _processCountry(field: FormField, countries: Country[] = [], country?: Country): FormField {\n        if (!countries.length) {\n            return field;\n        }\n\n        const { code = '' } = country || {};\n        const items = countries.map(({ code, name }: any) => ({\n            value: code,\n            label: name,\n        }));\n\n        return {\n            ...field,\n            options: { items },\n            default: code,\n            type: 'array',\n            fieldType: 'dropdown',\n            itemtype: 'string',\n        };\n    }\n\n    private _processProvince(field: FormField, country?: Country): FormField {\n        const { subdivisions = [] } = country || {};\n\n        if (!subdivisions.length) {\n            return {\n                ...field,\n                required: false,\n            };\n        }\n\n        const items = subdivisions.map(({ code, name }: any) => ({\n            value: code,\n            label: name,\n        }));\n\n        return {\n            ...field,\n            name: 'stateOrProvinceCode',\n            options: { items },\n            required: true,\n            type: 'array',\n            fieldType: 'dropdown',\n            itemtype: 'string',\n        };\n    }\n\n    private _processsPostCode(field: FormField, country?: Country): FormField {\n        const { hasPostalCodes = [] } = country || {};\n\n        if (hasPostalCodes === undefined) {\n            return field;\n        }\n\n        return { ...field, required: Boolean(hasPostalCodes) };\n    }\n}\n","import { selector } from '../common/selector';\n\nimport Country from './country';\nimport CountryState from './country-state';\n\n@selector\nexport default class CountrySelector {\n    constructor(\n        private _countries: CountryState\n    ) {}\n\n    getCountries(): Country[] | undefined {\n        return this._countries.data;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._countries.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._countries.statuses.isLoading;\n    }\n}\n","import { BillingAddressSelector } from '../billing';\nimport { selector } from '../common/selector';\nimport { CouponSelector } from '../coupon';\n\nimport Order from './order';\nimport OrderState, { OrderMetaState } from './order-state';\n\n@selector\nexport default class OrderSelector {\n    constructor(\n        private _order: OrderState,\n        private _billingAddress: BillingAddressSelector,\n        private _coupons: CouponSelector\n    ) {}\n\n    getOrder(): Order | undefined {\n        const { data } = this._order;\n        const billingAddress = this._billingAddress.getBillingAddress();\n        const coupons = this._coupons.getCoupons() || [];\n\n        if (!data || !billingAddress) {\n            return;\n        }\n\n        return {\n            ...data,\n            billingAddress,\n            coupons,\n        };\n    }\n\n    getOrderMeta(): OrderMetaState | undefined {\n        return this._order.meta;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._order.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._order.statuses.isLoading;\n    }\n}\n","import { find } from 'lodash';\n\nimport { CheckoutPayment, CheckoutSelector } from '../checkout';\nimport { selector } from '../common/selector';\nimport { GatewayOrderPayment, InternalOrderPayment, OrderSelector } from '../order';\n\nimport PaymentMethod from './payment-method';\nimport { HOSTED } from './payment-method-types';\nimport { ACKNOWLEDGE, FINALIZE } from './payment-status-types';\n\n@selector\nexport default class PaymentSelector {\n    constructor(\n        private _checkout: CheckoutSelector,\n        private _order: OrderSelector\n    ) {}\n\n    getPaymentId(): { providerId: string, gatewayId?: string } | undefined {\n        const internalPayment = this._getInternalPayment();\n\n        if (internalPayment && internalPayment.id) {\n            return {\n                providerId: internalPayment.id,\n                gatewayId: internalPayment.gateway,\n            };\n        }\n\n        const payment = this._getHostedPayment() || this._getGatewayPayment();\n\n        if (payment && payment.providerId) {\n            return {\n                providerId: payment.providerId,\n                gatewayId: payment.gatewayId,\n            };\n        }\n    }\n\n    getPaymentStatus(): string | undefined {\n        const internalPayment = this._getInternalPayment();\n\n        if (internalPayment && internalPayment.status) {\n            return internalPayment.status.replace('PAYMENT_STATUS_', '');\n        }\n\n        const payment = this._getHostedPayment() || this._getGatewayPayment();\n\n        if (payment) {\n            return payment.detail.step;\n        }\n    }\n\n    getPaymentToken(): string | undefined {\n        const meta = this._order.getOrderMeta();\n\n        return meta && meta.token;\n    }\n\n    getPaymentRedirectUrl(): string | undefined {\n        const payment = this._getInternalPayment();\n\n        return payment && payment.redirectUrl;\n    }\n\n    isPaymentDataRequired(useStoreCredit: boolean = false): boolean {\n        const grandTotal = this._checkout.getGrandTotal(useStoreCredit);\n\n        return grandTotal ? grandTotal > 0 : false;\n    }\n\n    isPaymentDataSubmitted(paymentMethod?: PaymentMethod): boolean {\n        if (paymentMethod && paymentMethod.nonce) {\n            return true;\n        }\n\n        return this.getPaymentStatus() === ACKNOWLEDGE || this.getPaymentStatus() === FINALIZE;\n    }\n\n    private _getInternalPayment(): InternalOrderPayment | undefined {\n        const meta = this._order.getOrderMeta();\n\n        return meta && meta.payment;\n    }\n\n    private _getGatewayPayment(): GatewayOrderPayment | undefined {\n        const order = this._order.getOrder();\n\n        return find(order && order.payments, ({ providerId }) =>\n            providerId !== 'giftcertificate' && providerId !== 'storecredit'\n        ) as GatewayOrderPayment;\n    }\n\n    private _getHostedPayment(): CheckoutPayment | undefined {\n        const checkout = this._checkout.getCheckout();\n\n        return find(checkout && checkout.payments, ({ providerType }) =>\n            providerType === HOSTED\n        );\n    }\n}\n","import { find } from 'lodash';\n\nimport { selector } from '../common/selector';\n\nimport PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\nimport PaymentMethodState from './payment-method-state';\n\n@selector\nexport default class PaymentMethodSelector {\n    constructor(\n        private _paymentMethods: PaymentMethodState\n    ) {}\n\n    getPaymentMethods(): PaymentMethod[] | undefined {\n        return this._paymentMethods.data;\n    }\n\n    getPaymentMethodsMeta(): PaymentMethodMeta | undefined {\n        return this._paymentMethods.meta;\n    }\n\n    getPaymentMethod(methodId: string, gatewayId?: string): PaymentMethod | undefined {\n        return gatewayId ?\n            find(this._paymentMethods.data, { id: methodId, gateway: gatewayId }) :\n            find(this._paymentMethods.data, { id: methodId });\n    }\n\n    getLoadError(): Error | undefined {\n        return this._paymentMethods.errors && this._paymentMethods.errors.loadError;\n    }\n\n    getLoadMethodError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentMethods.errors.loadMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentMethods.errors.loadMethodError;\n    }\n\n    isLoading(): boolean {\n        return !!this._paymentMethods.statuses.isLoading;\n    }\n\n    isLoadingMethod(methodId?: string): boolean {\n        if (methodId && this._paymentMethods.statuses.loadMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentMethods.statuses.isLoadingMethod;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport PaymentStrategyState, { DEFAULT_STATE } from './payment-strategy-state';\n\n@selector\nexport default class PaymentStrategySelector {\n    constructor(\n        private _paymentStrategies: PaymentStrategyState = DEFAULT_STATE\n    ) {}\n\n    getInitializeError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentStrategies.errors.initializeMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentStrategies.errors.initializeError;\n    }\n\n    getExecuteError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentStrategies.errors.executeMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentStrategies.errors.executeError;\n    }\n\n    getFinalizeError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentStrategies.errors.finalizeMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentStrategies.errors.finalizeError;\n    }\n\n    getWidgetInteractingError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentStrategies.errors.widgetInteractionMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentStrategies.errors.widgetInteractionError;\n    }\n\n    isInitializing(methodId?: string): boolean {\n        if (methodId && this._paymentStrategies.statuses.initializeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentStrategies.statuses.isInitializing;\n    }\n\n    isInitialized(methodId: string): boolean {\n        return !!(\n            this._paymentStrategies.data[methodId] &&\n            this._paymentStrategies.data[methodId].isInitialized\n        );\n    }\n\n    isExecuting(methodId?: string): boolean {\n        if (methodId && this._paymentStrategies.statuses.executeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentStrategies.statuses.isExecuting;\n    }\n\n    isFinalizing(methodId?: string): boolean {\n        if (methodId && this._paymentStrategies.statuses.finalizeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentStrategies.statuses.isFinalizing;\n    }\n\n    isWidgetInteracting(methodId?: string): boolean {\n        if (methodId && this._paymentStrategies.statuses.widgetInteractionMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentStrategies.statuses.isWidgetInteracting;\n    }\n}\n","import Instrument from './instrument';\nimport InstrumentState, { InstrumentMeta } from './instrument-state';\n\nexport default class InstrumentSelector {\n    constructor(\n        private _instruments: InstrumentState\n    ) {}\n\n    getInstruments(): Instrument[] | undefined {\n        return this._instruments.data;\n    }\n\n    getInstrumentsMeta(): InstrumentMeta | undefined {\n        return this._instruments.meta;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._instruments.errors && this._instruments.errors.loadError;\n    }\n\n    getDeleteError(instrumentId?: string): Error | undefined {\n        if (!this._instruments.errors || (instrumentId && this._instruments.errors.failedInstrument !== instrumentId)) {\n            return;\n        }\n\n        return this._instruments.errors.deleteError;\n    }\n\n    isLoading(): boolean {\n        return !!(this._instruments.statuses && this._instruments.statuses.isLoading);\n    }\n\n    isDeleting(instrumentId?: string): boolean {\n        if (!this._instruments.statuses || (instrumentId && this._instruments.statuses.deletingInstrument !== instrumentId)) {\n            return false;\n        }\n\n        return !!this._instruments.statuses.isDeleting;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport RemoteCheckoutState, { RemoteCheckoutStateData } from './remote-checkout-state';\n\n@selector\nexport default class RemoteCheckoutSelector {\n    constructor(\n        private _remoteCheckout: RemoteCheckoutState\n    ) {}\n\n    getCheckout<TMethodId extends keyof RemoteCheckoutStateData>(\n        methodId: TMethodId\n    ): RemoteCheckoutStateData[TMethodId] | undefined {\n        return this._remoteCheckout.data[methodId];\n    }\n}\n","import { selector } from '../common/selector';\n\nimport { Address } from '../address';\n\nimport ConsignmentState from './consignment-state';\n\n@selector\nexport default class ShippingAddressSelector {\n    constructor(\n        private _consignments: ConsignmentState\n    ) {}\n\n    getShippingAddress(): Address | undefined {\n        const consignments = this._consignments.data;\n\n        if (!consignments || !consignments[0]) {\n            return;\n        }\n\n        return consignments[0].shippingAddress;\n    }\n}\n","import { selector } from '../common/selector';\nimport { Country } from '../geography';\n\nimport ShippingCountryState from './shipping-country-state';\n\n@selector\nexport default class ShippingCountrySelector {\n    constructor(\n        private _shippingCountries: ShippingCountryState\n    ) {}\n\n    getShippingCountries(): Country[] | undefined {\n        return this._shippingCountries.data;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._shippingCountries.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._shippingCountries.statuses.isLoading;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport ShippingStrategyState from './shipping-strategy-state';\n\n@selector\nexport default class ShippingStrategySelector {\n    constructor(\n        private _shippingStrategies: ShippingStrategyState\n    ) {}\n\n    getUpdateAddressError(methodId?: string): Error | undefined {\n        if (methodId && this._shippingStrategies.errors.updateAddressMethodId !== methodId) {\n            return;\n        }\n\n        return this._shippingStrategies.errors.updateAddressError;\n    }\n\n    getSelectOptionError(methodId?: string): Error | undefined {\n        if (methodId && this._shippingStrategies.errors.selectOptionMethodId !== methodId) {\n            return;\n        }\n\n        return this._shippingStrategies.errors.selectOptionError;\n    }\n\n    getInitializeError(methodId?: string): Error | undefined {\n        if (methodId && this._shippingStrategies.errors.initializeMethodId !== methodId) {\n            return;\n        }\n\n        return this._shippingStrategies.errors.initializeError;\n    }\n\n    isUpdatingAddress(methodId?: string): boolean {\n        if (methodId && this._shippingStrategies.statuses.updateAddressMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._shippingStrategies.statuses.isUpdatingAddress;\n    }\n\n    isSelectingOption(methodId?: string): boolean {\n        if (methodId && this._shippingStrategies.statuses.selectOptionMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._shippingStrategies.statuses.isSelectingOption;\n    }\n\n    isInitializing(methodId?: string): boolean {\n        if (methodId && this._shippingStrategies.statuses.initializeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._shippingStrategies.statuses.isInitializing;\n    }\n\n    isInitialized(methodId: string): boolean {\n        return !!(\n            this._shippingStrategies.data[methodId] &&\n            this._shippingStrategies.data[methodId].isInitialized\n        );\n    }\n}\n","import { identity, isEqual, pickBy } from 'lodash';\n\nimport Address from './address';\n\nexport default function isAddressEqual(addressA: Partial<Address>, addressB: Partial<Address>): boolean {\n    return isEqual(normalize(addressA), normalize(addressB));\n}\n\nfunction normalize(address: Partial<Address>): Partial<Address> {\n    return pickBy({\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        address1: address.address1,\n        address2: address.address2,\n        city: address.city,\n        stateOrProvince: address.stateOrProvince,\n        countryCode: address.countryCode,\n        postalCode: address.postalCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    }, identity);\n}\n","import { find } from 'lodash';\n\nimport { isAddressEqual, AddressRequestBody } from '../address';\nimport { CartSelector, PhysicalItem } from '../cart';\nimport { selector } from '../common/selector';\n\nimport Consignment from './consignment';\nimport ConsignmentState from './consignment-state';\nimport ShippingOption from './shipping-option';\n\n@selector\nexport default class ConsignmentSelector {\n    constructor(\n        private _consignments: ConsignmentState,\n        private _cart: CartSelector\n    ) {}\n\n    getConsignments(): Consignment[] | undefined {\n        return this._consignments.data;\n    }\n\n    getConsignmentById(id: string): Consignment | undefined {\n        const consignments = this._consignments.data;\n\n        if (!consignments || !consignments.length) {\n            return;\n        }\n\n        return find(consignments, { id });\n    }\n\n    getConsignmentByAddress(address: AddressRequestBody): Consignment | undefined {\n        const consignments = this._consignments.data;\n\n        if (!consignments || !consignments.length) {\n            return;\n        }\n\n        return find(consignments, consignment =>\n            isAddressEqual(consignment.shippingAddress, address)\n        );\n    }\n\n    getShippingOption(): ShippingOption | undefined {\n        const consignments = this._consignments.data;\n\n        if (consignments && consignments.length) {\n            return consignments[0].selectedShippingOption;\n        }\n    }\n\n    getLoadError(): Error | undefined {\n        return this._consignments.errors.loadError;\n    }\n\n    getCreateError(): Error | undefined {\n        return this._consignments.errors.createError;\n    }\n\n    getLoadShippingOptionsError(): Error | undefined {\n        return this._consignments.errors.loadShippingOptionsError;\n    }\n\n    getUnassignedItems(): PhysicalItem[] {\n        const cart = this._cart.getCart();\n\n        if (!cart) {\n            return [];\n        }\n\n        const assignedLineItemIds = (this.getConsignments() || []).reduce(\n            (itemIds, consignment) => itemIds.concat(consignment.lineItemIds),\n            [] as string[]\n        );\n\n        return (cart.lineItems.physicalItems || []).filter(\n            item => assignedLineItemIds.indexOf(item.id as string) < 0\n        );\n    }\n\n    getUpdateError(consignmentId?: string): Error | undefined {\n        if (consignmentId) {\n            return this._consignments.errors.updateError[consignmentId];\n        }\n\n        return find(this._consignments.errors.updateError);\n    }\n\n    getDeleteError(consignmentId?: string): Error | undefined {\n        if (consignmentId) {\n            return this._consignments.errors.deleteError[consignmentId];\n        }\n\n        return find(this._consignments.errors.deleteError);\n    }\n\n    getItemAssignmentError(address: AddressRequestBody): Error | undefined {\n        const consignment = this.getConsignmentByAddress(address);\n\n        return consignment ? this.getUpdateError(consignment.id) : this.getCreateError();\n    }\n\n    getUpdateShippingOptionError(consignmentId?: string): Error | undefined {\n        if (consignmentId) {\n            return this._consignments.errors.updateShippingOptionError[consignmentId];\n        }\n\n        return find(this._consignments.errors.updateShippingOptionError);\n    }\n\n    isLoading(): boolean {\n        return this._consignments.statuses.isLoading === true;\n    }\n\n    isLoadingShippingOptions(): boolean {\n        return this._consignments.statuses.isLoadingShippingOptions === true;\n    }\n\n    isCreating(): boolean {\n        return this._consignments.statuses.isCreating === true;\n    }\n\n    isUpdating(consignmentId?: string): boolean {\n        if (consignmentId) {\n            return this._consignments.statuses.isUpdating[consignmentId] === true;\n        }\n\n        return find(this._consignments.statuses.isUpdating) === true;\n    }\n\n    isDeleting(consignmentId?: string): boolean {\n        if (consignmentId) {\n            return this._consignments.statuses.isDeleting[consignmentId] === true;\n        }\n\n        return find(this._consignments.statuses.isDeleting) === true;\n    }\n\n    isAssigningItems(address: AddressRequestBody): boolean {\n        const consignment = this.getConsignmentByAddress(address);\n\n        return consignment ? this.isUpdating(consignment.id) : this.isCreating();\n    }\n\n    isUpdatingShippingOption(consignmentId?: string): boolean {\n        if (consignmentId) {\n            return this._consignments.statuses.isUpdatingShippingOption[consignmentId] === true;\n        }\n\n        return find(this._consignments.statuses.isUpdatingShippingOption) === true;\n    }\n}\n","import { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { selector } from '../common/selector';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerSelector } from '../customer';\nimport { ConsignmentSelector } from '../shipping';\n\nimport Checkout from './checkout';\nimport CheckoutState from './checkout-state';\n\n@selector\nexport default class CheckoutSelector {\n    constructor(\n        private _checkout: CheckoutState,\n        private _billingAddress: BillingAddressSelector,\n        private _cart: CartSelector,\n        private _consignments: ConsignmentSelector,\n        private _coupons: CouponSelector,\n        private _customer: CustomerSelector,\n        private _giftCertificates: GiftCertificateSelector\n    ) {}\n\n    getCheckout(): Checkout | undefined {\n        const { data } = this._checkout;\n        const billingAddress = this._billingAddress.getBillingAddress();\n        const cart = this._cart.getCart();\n        const customer = this._customer.getCustomer();\n        const consignments = this._consignments.getConsignments() || [];\n        const coupons = this._coupons.getCoupons() || [];\n        const giftCertificates = this._giftCertificates.getGiftCertificates() || [];\n\n        if (!data || !cart || !customer) {\n            return;\n        }\n\n        return {\n            ...data,\n            billingAddress,\n            cart,\n            customer,\n            consignments,\n            coupons,\n            giftCertificates,\n        };\n    }\n\n    getGrandTotal(useStoreCredit?: boolean): number | undefined {\n        const checkout = this.getCheckout();\n\n        if (!checkout) {\n            return;\n        }\n\n        const grandTotal = checkout.grandTotal || 0;\n        const storeCredit = checkout.customer.storeCredit || 0;\n\n        return useStoreCredit ? Math.max(grandTotal - storeCredit, 0) : grandTotal;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._checkout.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return this._checkout.statuses.isLoading === true;\n    }\n\n    getUpdateError(): Error | undefined {\n        return this._checkout.errors.updateError;\n    }\n\n    isUpdating(): boolean {\n        return this._checkout.statuses.isUpdating === true;\n    }\n}\n","import { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { CheckoutButtonSelector } from '../checkout-buttons';\nimport { createFreezeProxies } from '../common/utility';\nimport { ConfigSelector } from '../config';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerSelector, CustomerStrategySelector } from '../customer';\nimport { FormSelector } from '../form';\nimport { CountrySelector } from '../geography';\nimport { OrderSelector } from '../order';\nimport { PaymentSelector } from '../payment';\nimport { PaymentMethodSelector, PaymentStrategySelector } from '../payment';\nimport { InstrumentSelector } from '../payment/instrument';\nimport { RemoteCheckoutSelector } from '../remote-checkout';\nimport { ConsignmentSelector, ShippingAddressSelector, ShippingCountrySelector, ShippingStrategySelector } from '../shipping';\n\nimport CheckoutSelector from './checkout-selector';\nimport { CheckoutStoreOptions } from './checkout-store';\nimport CheckoutStoreState from './checkout-store-state';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\nexport default function createInternalCheckoutSelectors(state: CheckoutStoreState, options: CheckoutStoreOptions = {}): InternalCheckoutSelectors {\n    const billingAddress = new BillingAddressSelector(state.billingAddress);\n    const cart = new CartSelector(state.cart);\n    const checkoutButton = new CheckoutButtonSelector(state.checkoutButton);\n    const config = new ConfigSelector(state.config);\n    const countries = new CountrySelector(state.countries);\n    const coupons = new CouponSelector(state.coupons);\n    const customer = new CustomerSelector(state.customer);\n    const customerStrategies = new CustomerStrategySelector(state.customerStrategies);\n    const form = new FormSelector(state.config);\n    const giftCertificates = new GiftCertificateSelector(state.giftCertificates);\n    const instruments = new InstrumentSelector(state.instruments);\n    const paymentMethods = new PaymentMethodSelector(state.paymentMethods);\n    const paymentStrategies = new PaymentStrategySelector(state.paymentStrategies);\n    const shippingAddress = new ShippingAddressSelector(state.consignments);\n    const remoteCheckout = new RemoteCheckoutSelector(state.remoteCheckout);\n    const shippingCountries = new ShippingCountrySelector(state.shippingCountries);\n    const shippingStrategies = new ShippingStrategySelector(state.shippingStrategies);\n\n    // Compose selectors\n    const consignments = new ConsignmentSelector(state.consignments, cart);\n    const checkout = new CheckoutSelector(state.checkout, billingAddress, cart, consignments, coupons, customer, giftCertificates);\n    const order = new OrderSelector(state.order, billingAddress, coupons);\n    const payment = new PaymentSelector(checkout, order);\n\n    const selectors = {\n        billingAddress,\n        cart,\n        checkout,\n        checkoutButton,\n        config,\n        consignments,\n        countries,\n        coupons,\n        customer,\n        customerStrategies,\n        form,\n        giftCertificates,\n        instruments,\n        order,\n        payment,\n        paymentMethods,\n        paymentStrategies,\n        remoteCheckout,\n        shippingAddress,\n        shippingCountries,\n        shippingStrategies,\n    };\n\n    return options.shouldWarnMutation ? createFreezeProxies(selectors) : selectors;\n}\n","import { createDataStore } from '@bigcommerce/data-store';\n\nimport { createRequestErrorFactory } from '../common/error';\n\nimport CheckoutStore, { CheckoutStoreOptions } from './checkout-store';\nimport CheckoutStoreState from './checkout-store-state';\nimport createActionTransformer from './create-action-transformer';\nimport createCheckoutStoreReducer from './create-checkout-store-reducer';\nimport createInternalCheckoutSelectors from './create-internal-checkout-selectors';\n\nexport default function createCheckoutStore(\n    initialState: Partial<CheckoutStoreState> = {},\n    options?: CheckoutStoreOptions\n): CheckoutStore {\n    const actionTransformer = createActionTransformer(createRequestErrorFactory());\n    const stateTransformer = (state: CheckoutStoreState) => createInternalCheckoutSelectors(state);\n\n    return createDataStore(\n        createCheckoutStoreReducer(),\n        initialState,\n        { actionTransformer, stateTransformer, ...options }\n    );\n}\n","import { Action } from '@bigcommerce/data-store';\nimport { from, Observable, Subscribable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { RequestErrorFactory } from '../common/error';\n\nexport default function createActionTransformer(\n    requestErrorFactory: RequestErrorFactory\n): (action: Subscribable<Action>) => Observable<Action> {\n    return action$ => from(action$).pipe(catchError<Action, never>(action => {\n        if (action instanceof Error || action.payload instanceof Error) {\n            throw action;\n        }\n\n        if (isResponse(action.payload)) {\n            const message = action.payload.body && action.payload.body.detail;\n\n            throw { ...action, payload: requestErrorFactory.createError(action.payload, message) };\n        }\n\n        throw action;\n    }));\n}\n\nfunction isResponse(object: any) {\n    if (!object || typeof object !== 'object') {\n        return false;\n    }\n\n    return ['body', 'headers', 'status', 'statusText'].every(key =>\n        object.hasOwnProperty(key)\n    );\n}\n","import { PaymentMethodInvalidError } from '../../payment/errors';\n\nimport { UnrecoverableError } from './errors';\nimport RequestErrorFactory from './request-error-factory';\n\nexport default function createRequestErrorFactory(): RequestErrorFactory {\n    const factory = new RequestErrorFactory();\n\n    const unrecoverableErrorTypes = [\n        'catalog_only',\n        'empty_cart',\n        'invalid_order_id',\n        'invalid_order_token',\n        'missing_order_token',\n        'missing_provider_token',\n        'missing_shipping_method',\n        'order_completion_error',\n        'order_could_not_be_finalized_error',\n        'order_create_failed',\n        'provider_fatal_error',\n        'provider_setup_error',\n        'stock_too_low',\n    ];\n\n    unrecoverableErrorTypes.forEach(type => {\n        factory.register(type, (response, message) => new UnrecoverableError(response, message));\n    });\n\n    factory.register('invalid_payment_provider', response => new PaymentMethodInvalidError(response));\n    factory.register('payment_config_not_found', response => new PaymentMethodInvalidError(response));\n\n    return factory;\n}\n","import { combineReducers, Action, Reducer } from '@bigcommerce/data-store';\n\nimport { billingAddressReducer } from '../billing';\nimport { cartReducer } from '../cart';\nimport { checkoutButtonReducer } from '../checkout-buttons';\nimport { configReducer } from '../config';\nimport { couponReducer, giftCertificateReducer } from '../coupon';\nimport { customerReducer, customerStrategyReducer } from '../customer';\nimport { countryReducer } from '../geography';\nimport { orderReducer } from '../order';\nimport { paymentMethodReducer, paymentReducer, paymentStrategyReducer } from '../payment';\nimport { instrumentReducer } from '../payment/instrument';\nimport { remoteCheckoutReducer } from '../remote-checkout';\nimport { consignmentReducer, shippingCountryReducer, shippingStrategyReducer } from '../shipping';\n\nimport checkoutReducer from './checkout-reducer';\nimport CheckoutStoreState from './checkout-store-state';\n\nexport default function createCheckoutStoreReducer(): Reducer<CheckoutStoreState, Action> {\n    return combineReducers({\n        billingAddress: billingAddressReducer,\n        cart: cartReducer,\n        checkout: checkoutReducer,\n        checkoutButton: checkoutButtonReducer,\n        config: configReducer,\n        consignments: consignmentReducer,\n        countries: countryReducer,\n        coupons: couponReducer,\n        customer: customerReducer,\n        customerStrategies: customerStrategyReducer,\n        giftCertificates: giftCertificateReducer,\n        instruments: instrumentReducer,\n        order: orderReducer,\n        payment: paymentReducer,\n        paymentMethods: paymentMethodReducer,\n        paymentStrategies: paymentStrategyReducer,\n        remoteCheckout: remoteCheckoutReducer,\n        shippingCountries: shippingCountryReducer,\n        shippingStrategies: shippingStrategyReducer,\n    });\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { InternalErrorResponseBody } from '../../common/error';\nimport { RequestError } from '../../common/error/errors';\n\nexport default class CheckoutNotAvailableError extends RequestError {\n    constructor(response: Response<InternalErrorResponseBody>) {\n        super(response, { message: response.body.title });\n\n        this.type = 'checkout_not_available';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { joinIncludes, ContentType, RequestOptions } from '../common/http-request';\n\nimport Checkout, { CheckoutRequestBody } from './checkout';\nimport CHECKOUT_DEFAULT_INCLUDES from './checkout-default-includes';\nimport CheckoutParams from './checkout-params';\nimport { CheckoutNotAvailableError } from './errors';\n\nexport default class CheckoutRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadCheckout(id: string, { params, timeout }: RequestOptions<CheckoutParams> = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkout/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.get(url, {\n            params: {\n                include: joinIncludes([\n                    ...CHECKOUT_DEFAULT_INCLUDES,\n                    ...(params && params.include || []),\n                ]),\n            },\n            headers,\n            timeout,\n        }).catch(error => {\n            if (error.status >= 400 && error.status < 500) {\n                throw new CheckoutNotAvailableError(error);\n            }\n\n            throw error;\n        });\n    }\n\n    updateCheckout(id: string, body: CheckoutRequestBody, { params, timeout }: RequestOptions<CheckoutParams> = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkout/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, {\n            params: {\n                include: joinIncludes([\n                    ...CHECKOUT_DEFAULT_INCLUDES,\n                    ...(params && params.include || []),\n                ]),\n            },\n            body,\n            headers,\n            timeout,\n        });\n    }\n}\n","import Coupon from './coupon';\nimport InternalCoupon from './internal-coupon';\n\nconst couponTypes = [\n    'per_item_discount',\n    'percentage_discount',\n    'per_total_discount',\n    'shipping_discount',\n    'free_shipping',\n];\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalCoupon(coupon: Coupon): InternalCoupon {\n    return {\n        code: coupon.code,\n        discount: coupon.displayName,\n        discountType: couponTypes.indexOf(coupon.couponType),\n    };\n}\n","import { isBillingAddressLike } from '../billing';\nimport BillingAddress from '../billing/billing-address';\nimport { Consignment } from '../shipping';\n\nimport Address from './address';\nimport InternalAddress from './internal-address';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalAddress(address: Address | BillingAddress, consignments?: Consignment[]): InternalAddress {\n    let addressId;\n\n    if (isBillingAddressLike(address)) {\n        addressId = address.id;\n    } else if (consignments && consignments.length) {\n        addressId = consignments[0].id;\n    }\n\n    return {\n        id: addressId,\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        addressLine1: address.address1,\n        addressLine2: address.address2,\n        city: address.city,\n        province: address.stateOrProvince,\n        provinceCode: address.stateOrProvinceCode,\n        postCode: address.postalCode,\n        country: address.country,\n        countryCode: address.countryCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    };\n}\n","import Address from '../address/address';\n\nimport BillingAddress from './billing-address';\n\nexport default function isBillingAddressLike(address: Address): address is BillingAddress {\n    const billingAddress = address as BillingAddress;\n\n    return typeof billingAddress.id !== 'undefined';\n}\n","import { InternalCheckoutSelectors } from '../checkout';\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonSelector from './checkout-button-selector';\nimport { CheckoutButtonMethodType } from './strategies';\n\n@selector\nexport default class CheckoutButtonErrorSelector {\n    private _checkoutButton: CheckoutButtonSelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._checkoutButton = selectors.checkoutButton;\n    }\n\n    getInitializeButtonError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        return this._checkoutButton.getInitializeError(methodId);\n    }\n\n    getDeinitializeButtonError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        return this._checkoutButton.getDeinitializeError(methodId);\n    }\n}\n","import { InternalCheckoutSelectors } from '../checkout';\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonSelector from './checkout-button-selector';\nimport { CheckoutButtonMethodType } from './strategies';\n\n@selector\nexport default class CheckoutButtonStatusSelector {\n    private _checkoutButton: CheckoutButtonSelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._checkoutButton = selectors.checkoutButton;\n    }\n\n    isInitializingButton(methodId?: CheckoutButtonMethodType): boolean {\n        return this._checkoutButton.isInitializing(methodId);\n    }\n\n    isDeinitializingButton(methodId?: CheckoutButtonMethodType): boolean {\n        return this._checkoutButton.isDeinitializing(methodId);\n    }\n}\n","import { InternalCheckoutSelectors } from '../checkout';\n\nimport CheckoutButtonErrorSelector from './checkout-button-error-selector';\nimport CheckoutButtonSelectors from './checkout-button-selectors';\nimport CheckoutButtonStatusSelector from './checkout-button-status-selector';\n\nexport default function createCheckoutButtonSelectors(selectors: InternalCheckoutSelectors): CheckoutButtonSelectors {\n    const errors = new CheckoutButtonErrorSelector(selectors);\n    const statuses = new CheckoutButtonStatusSelector(selectors);\n\n    return {\n        errors,\n        statuses,\n    };\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../checkout';\nimport { isElementId, setUniqueElementId } from '../common/dom';\n\nimport { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from './checkout-button-options';\nimport CheckoutButtonSelectors from './checkout-button-selectors';\nimport CheckoutButtonStrategyActionCreator from './checkout-button-strategy-action-creator';\nimport createCheckoutButtonSelectors from './create-checkout-button-selectors';\n\nexport default class CheckoutButtonInitializer {\n    private _state: CheckoutButtonSelectors;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _store: CheckoutStore,\n        private _buttonStrategyActionCreator: CheckoutButtonStrategyActionCreator\n    ) {\n        this._state = createCheckoutButtonSelectors(this._store.getState());\n\n        this._store.subscribe(state => {\n            this._state = createCheckoutButtonSelectors(state);\n        });\n    }\n\n    /**\n     * Returns a snapshot of the current state.\n     *\n     * The method returns a new instance every time there is a change in the\n     * state. You can query the state by calling any of its getter methods.\n     *\n     * ```js\n     * const state = service.getState();\n     *\n     * console.log(state.errors.getInitializeButtonError());\n     * console.log(state.statuses.isInitializingButton());\n     * ```\n     *\n     * @returns The current customer's checkout state\n     */\n    getState(): CheckoutButtonSelectors {\n        return this._state;\n    }\n\n    /**\n     * Subscribes to any changes to the current state.\n     *\n     * The method registers a callback function and executes it every time there\n     * is a change in the current state.\n     *\n     * ```js\n     * service.subscribe(state => {\n     *     console.log(state.statuses.isInitializingButton());\n     * });\n     * ```\n     *\n     * The method can be configured to notify subscribers only regarding\n     * relevant changes, by providing a filter function.\n     *\n     * ```js\n     * const filter = state => state.errors.getInitializeButtonError();\n     *\n     * // Only trigger the subscriber when the cart changes.\n     * service.subscribe(state => {\n     *     console.log(state.errors.getInitializeButtonError())\n     * }, filter);\n     * ```\n     *\n     * @param subscriber - The function to subscribe to state changes.\n     * @param filters - One or more functions to filter out irrelevant state\n     * changes. If more than one function is provided, the subscriber will only\n     * be triggered if all conditions are met.\n     * @returns A function, if called, will unsubscribe the subscriber.\n     */\n    subscribe(\n        subscriber: (state: CheckoutButtonSelectors) => void,\n        ...filters: Array<(state: CheckoutButtonSelectors) => any>\n    ): () => void {\n        return this._store.subscribe(\n            () => subscriber(this.getState()),\n            state => state.checkoutButton.getState(),\n            ...filters.map(filter => (state: InternalCheckoutSelectors) => filter(createCheckoutButtonSelectors(state)))\n        );\n    }\n\n    /**\n     * Initializes the checkout button of a payment method.\n     *\n     * When the checkout button is initialized, it will be inserted into the DOM,\n     * ready to be interacted with by the customer.\n     *\n     * ```js\n     * initializer.initializeButton({\n     *     methodId: 'braintreepaypal',\n     *     containerId: 'checkoutButton',\n     *     braintreepaypal: {\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the checkout button.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeButton(options: CheckoutButtonInitializeOptions): Promise<CheckoutButtonSelectors> {\n        const containerIds = isElementId(options.containerId) ?\n            [options.containerId] :\n            setUniqueElementId(options.containerId, `${options.methodId}-container`);\n\n        return Promise.all(\n            containerIds.map(containerId => {\n                const action = this._buttonStrategyActionCreator.initialize({ ...options, containerId });\n                const queueId = `checkoutButtonStrategy:${options.methodId}:${containerId}`;\n\n                return this._store.dispatch(action, { queueId });\n            })\n        )\n            .then(() => this.getState());\n    }\n\n    /**\n     * De-initializes the checkout button by performing any necessary clean-ups.\n     *\n     * ```js\n     * await service.deinitializeButton({\n     *     methodId: 'braintreepaypal',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the checkout button.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeButton(options: CheckoutButtonOptions): Promise<CheckoutButtonSelectors> {\n        const action = this._buttonStrategyActionCreator.deinitialize(options);\n        const queueId = `checkoutButtonStrategy:${options.methodId}`;\n\n        return this._store.dispatch(action, { queueId })\n            .then(() => this.getState());\n    }\n}\n","enum CheckoutButtonMethodType {\n    BRAINTREE_PAYPAL = 'braintreepaypal',\n    BRAINTREE_PAYPAL_CREDIT = 'braintreepaypalcredit',\n    GOOGLEPAY_BRAINTREE = 'googlepaybraintree',\n    GOOGLEPAY_STRIPE = 'googlepaystripe',\n    MASTERPASS = 'masterpass',\n    PAYPALEXPRESS = 'paypalexpress',\n}\n\nexport default CheckoutButtonMethodType;\n","export default function isElementId(id: string): boolean {\n    return /^\\w[\\w\\-\\:\\.]*$/.test(id);\n}\n","import { uniqueId } from 'lodash';\n\nimport { InvalidArgumentError } from '../error/errors';\n\nexport default function setUniqueElementId(selector: string, idPrefix: string): string[] {\n    const containers = document.querySelectorAll(selector);\n\n    if (!containers.length) {\n        throw new InvalidArgumentError(`Unable to find any element with the specified selector: ${selector}`);\n    }\n\n    return Array.prototype.slice.call(containers)\n        .map((container: HTMLElement) => {\n            if (!container.id) {\n                container.id = uniqueId(idPrefix);\n            }\n\n            return container.id;\n        });\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, empty, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { Registry } from '../common/registry';\nimport { PaymentMethodActionCreator } from '../payment';\n\nimport { CheckoutButtonActionType, DeinitializeButtonAction, InitializeButtonAction } from './checkout-button-actions';\nimport { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from './checkout-button-options';\nimport { CheckoutButtonStrategy } from './strategies';\n\nexport default class CheckoutButtonStrategyActionCreator {\n    constructor(\n        private _registry: Registry<CheckoutButtonStrategy>,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): ThunkAction<InitializeButtonAction, InternalCheckoutSelectors> {\n        return store => {\n            const meta = { methodId: options.methodId, containerId: options.containerId };\n\n            if (store.getState().checkoutButton.isInitialized(options.methodId, options.containerId)) {\n                return empty();\n            }\n\n            return concat(\n                of(createAction(CheckoutButtonActionType.InitializeButtonRequested, undefined, meta)),\n                this._paymentMethodActionCreator.loadPaymentMethod(options.methodId, { timeout: options.timeout, useCache: true }),\n                defer(() => this._registry.get(options.methodId).initialize(options)\n                    .then(() => createAction(CheckoutButtonActionType.InitializeButtonSucceeded, undefined, meta)))\n            ).pipe(\n                catchError(error => throwErrorAction(CheckoutButtonActionType.InitializeButtonFailed, error, meta))\n            );\n        };\n    }\n\n    deinitialize(options: CheckoutButtonOptions): ThunkAction<DeinitializeButtonAction, InternalCheckoutSelectors> {\n        return store => {\n            const meta = { methodId: options.methodId };\n\n            if (!store.getState().checkoutButton.isInitialized(options.methodId)) {\n                return empty();\n            }\n\n            return concat(\n                of(createAction(CheckoutButtonActionType.DeinitializeButtonRequested, undefined, meta)),\n                defer(() => this._registry.get(options.methodId).deinitialize()\n                    .then(() => createAction(CheckoutButtonActionType.DeinitializeButtonSucceeded, undefined, meta)))\n            ).pipe(\n                catchError(error => throwErrorAction(CheckoutButtonActionType.DeinitializeButtonFailed, error, meta))\n            );\n        };\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { pick } from 'lodash';\n\nimport { Address, LegacyAddress } from '../../../address';\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../../common/error/errors';\nimport { PaymentMethod } from '../../../payment';\nimport { BraintreeAddress, BraintreeError, BraintreePaypalCheckout, BraintreeSDKCreator, BraintreeTokenizePayload } from '../../../payment/strategies/braintree';\nimport { PaypalAuthorizeData, PaypalScriptLoader } from '../../../payment/strategies/paypal';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\n\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class BraintreePaypalButtonStrategy implements CheckoutButtonStrategy {\n    private _paypalCheckout?: BraintreePaypalCheckout;\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _paypalScriptLoader: PaypalScriptLoader,\n        private _formPoster: FormPoster,\n        private _offerCredit: boolean = false\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const paypalOptions = (this._offerCredit ? options.braintreepaypalcredit : options.braintreepaypal) || {};\n        const state = this._store.getState();\n        const paymentMethod = this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n        if (!paymentMethod || !paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._braintreeSDKCreator.initialize(paymentMethod.clientToken);\n\n        return Promise.all([\n            this._braintreeSDKCreator.getPaypalCheckout(),\n            this._paypalScriptLoader.loadPaypal(),\n        ])\n            .then(([paypalCheckout, paypal]) => {\n                this._paypalCheckout = paypalCheckout;\n\n                const allowedSources = [];\n                const disallowedSources = [];\n\n                if (paypalOptions.allowCredit) {\n                    allowedSources.push(paypal.FUNDING.CREDIT);\n                } else {\n                    disallowedSources.push(paypal.FUNDING.CREDIT);\n                }\n\n                return paypal.Button.render({\n                    env: paymentMethod.config.testMode ? 'sandbox' : 'production',\n                    commit: paypalOptions.shouldProcessPayment ? true : false,\n                    funding: {\n                        allowed: allowedSources,\n                        disallowed: disallowedSources,\n                    },\n                    style: {\n                        shape: 'rect',\n                        label: this._offerCredit ? 'credit' : undefined,\n                        ...pick(paypalOptions.style, 'layout', 'size', 'color', 'label', 'shape', 'tagline', 'fundingicons'),\n                    },\n                    payment: () => this._setupPayment(paypalOptions.onPaymentError),\n                    onAuthorize: data => this._tokenizePayment(data, paypalOptions.shouldProcessPayment, paypalOptions.onAuthorizeError),\n                }, options.containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        this._paypalCheckout = undefined;\n        this._paymentMethod = undefined;\n\n        this._braintreeSDKCreator.teardown();\n\n        return Promise.resolve();\n    }\n\n    private _setupPayment(onError?: (error: BraintreeError | StandardError) => void): Promise<string> {\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(state => {\n                const checkout = state.checkout.getCheckout();\n                const config = state.config.getStoreConfig();\n                const customer = state.customer.getCustomer();\n                const address = customer && customer.addresses && customer.addresses[0];\n\n                if (!this._paypalCheckout) {\n                    throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n                }\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!config) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                return this._paypalCheckout.createPayment({\n                    flow: 'checkout',\n                    enableShippingAddress: true,\n                    shippingAddressEditable: false,\n                    shippingAddressOverride: address ? this._mapToBraintreeAddress(address) : undefined,\n                    amount: checkout.grandTotal,\n                    currency: config.currency.code,\n                    offerCredit: this._offerCredit,\n                });\n            })\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _tokenizePayment(\n        data: PaypalAuthorizeData,\n        shouldProcessPayment?: boolean,\n        onError?: (error: BraintreeError | StandardError) => void\n    ): Promise<BraintreeTokenizePayload> {\n        if (!this._paypalCheckout || !this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        const methodId = this._paymentMethod.id;\n\n        return Promise.all([\n            this._paypalCheckout.tokenizePayment(data),\n            this._braintreeSDKCreator.getDataCollector({ paypal: true }),\n        ])\n            .then(([payload, { deviceData }]) => {\n                this._formPoster.postForm('/checkout.php', {\n                    payment_type: 'paypal',\n                    provider: methodId,\n                    action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\n                    nonce: payload.nonce,\n                    device_data: deviceData,\n                    shipping_address: JSON.stringify(this._mapToLegacyShippingAddress(payload)),\n                    billing_address: JSON.stringify(this._mapToLegacyBillingAddress(payload)),\n                });\n\n                return payload;\n            })\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _mapToLegacyShippingAddress(payload: BraintreeTokenizePayload): Partial<LegacyAddress> {\n        const shippingAddress = payload.details.shippingAddress;\n        const recipientName = shippingAddress && shippingAddress.recipientName || '';\n        const [firstName, lastName] = recipientName.split(' ');\n\n        return {\n            email: payload.details.email,\n            first_name: firstName,\n            last_name: lastName,\n            phone_number: shippingAddress && shippingAddress.phone || payload.details.phone,\n            address_line_1: shippingAddress && shippingAddress.line1,\n            address_line_2: shippingAddress && shippingAddress.line2,\n            city: shippingAddress && shippingAddress.city,\n            state: shippingAddress && shippingAddress.state,\n            country_code: shippingAddress && shippingAddress.countryCode,\n            postal_code: shippingAddress && shippingAddress.postalCode,\n        };\n    }\n\n    private _mapToLegacyBillingAddress(payload: BraintreeTokenizePayload): Partial<LegacyAddress> {\n        const billingAddress = payload.details.billingAddress;\n        const shippingAddress = payload.details.shippingAddress;\n\n        if (billingAddress) {\n            return {\n                email: payload.details.email,\n                first_name: billingAddress.firstName || payload.details.firstName,\n                last_name: billingAddress.lastName || payload.details.lastName,\n                phone_number: billingAddress.phone || payload.details.phone,\n                address_line_1: billingAddress.line1,\n                address_line_2: billingAddress.line2,\n                city: billingAddress.city,\n                state: billingAddress.state,\n                country_code: billingAddress.countryCode,\n                postal_code: billingAddress.postalCode,\n            };\n        }\n\n        return {\n            email: payload.details.email,\n            first_name: payload.details.firstName,\n            last_name: payload.details.lastName,\n            phone_number: payload.details.phone,\n            address_line_1: shippingAddress && shippingAddress.line1,\n            address_line_2: shippingAddress && shippingAddress.line2,\n            city: shippingAddress && shippingAddress.city,\n            state: shippingAddress && shippingAddress.state,\n            country_code: shippingAddress && shippingAddress.countryCode,\n            postal_code: shippingAddress && shippingAddress.postalCode,\n        };\n    }\n\n    private _mapToBraintreeAddress(address: Address): BraintreeAddress {\n        return {\n            line1: address.address1,\n            line2: address.address2,\n            city: address.city,\n            state: address.stateOrProvinceCode,\n            postalCode: address.postalCode,\n            countryCode: address.countryCode,\n            phone: address.phone,\n            recipientName: `${address.firstName} ${address.lastName}`,\n        };\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { InvalidArgumentError, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { GooglePayPaymentProcessor } from '../../../payment/strategies/googlepay';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class GooglePayButtonStrategy implements CheckoutButtonStrategy {\n    private _methodId?: string;\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _formPoster: FormPoster,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { containerId, methodId } = options;\n\n        if (!containerId || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"containerId\" argument is not provided.');\n        }\n\n        this._methodId = methodId;\n\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(() => this._googlePayPaymentProcessor.initialize(this._getMethodId()))\n            .then(() => {\n                this._walletButton = this._createSignInButton(containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        if (this._walletButton && this._walletButton.parentNode) {\n            this._walletButton.parentNode.removeChild(this._walletButton);\n            this._walletButton = undefined;\n        }\n\n        return this._googlePayPaymentProcessor.deinitialize();\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const container = document.getElementById(containerId);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n        }\n\n        const googlePayButton = this._googlePayPaymentProcessor.createButton(this._handleWalletButtonClick);\n\n        container.appendChild(googlePayButton);\n\n        return googlePayButton;\n    }\n\n    private _getMethodId(): string {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._methodId;\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): Promise<void> {\n        event.preventDefault();\n\n        return this._googlePayPaymentProcessor.displayWallet()\n            .then(paymentData => this._googlePayPaymentProcessor.handleSuccess(paymentData)\n            .then(() => {\n                if (paymentData.shippingAddress) {\n                    this._googlePayPaymentProcessor.updateShippingAddress(paymentData.shippingAddress);\n                }\n            }))\n            .then(() => this._onPaymentSelectComplete())\n            .catch(error => this._onError(error));\n    }\n\n    private _onPaymentSelectComplete(): void {\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n        });\n    }\n\n    private _onError(error?: Error): void {\n        if (error && error.message !== 'CANCELED') {\n            throw error;\n        }\n    }\n}\n","import { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType\n} from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { getCallbackUrl, Masterpass, MasterpassCheckoutOptions, MasterpassScriptLoader } from '../../../payment/strategies/masterpass';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\n\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class MasterpassButtonStrategy implements CheckoutButtonStrategy {\n    private _masterpassClient?: Masterpass;\n    private _methodId?: string;\n    private _signInButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _masterpassScriptLoader: MasterpassScriptLoader\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { containerId, methodId } = options;\n\n        if (!containerId || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"containerId\" argument is not provided.');\n        }\n\n        this._methodId = methodId;\n\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!paymentMethod || !paymentMethod.initializationData.checkoutId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                return this._masterpassScriptLoader.load(paymentMethod.config.testMode);\n            })\n            .then(masterpass => {\n                this._masterpassClient = masterpass;\n                this._signInButton = this._createSignInButton(containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        if (this._signInButton && this._signInButton.parentNode) {\n            this._signInButton.removeEventListener('click', this._handleWalletButtonClick);\n            this._signInButton.parentNode.removeChild(this._signInButton);\n            this._signInButton = undefined;\n        }\n\n        return Promise.resolve();\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const buttonContainer = document.getElementById(containerId);\n\n        if (!buttonContainer) {\n            throw new Error('Need a container to place the button');\n        }\n\n        const button = document.createElement('input');\n\n        button.type = 'image';\n        button.src = 'https://static.masterpass.com/dyn/img/btn/global/mp_chk_btn_160x037px.svg';\n        buttonContainer.appendChild(button);\n\n        button.addEventListener('click', this._handleWalletButtonClick);\n\n        return button;\n    }\n\n    private _createMasterpassPayload(): MasterpassCheckoutOptions {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const paymentMethod = this._methodId ? state.paymentMethods.getPaymentMethod(this._methodId) : null;\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return {\n            checkoutId: paymentMethod.initializationData.checkoutId,\n            allowedCardTypes: paymentMethod.initializationData.allowedCardTypes,\n            amount: checkout.cart.cartAmount.toString(),\n            currency: checkout.cart.currency.code,\n            cartId: checkout.cart.id,\n            suppressShippingAddress: false,\n            callbackUrl: getCallbackUrl('cart'),\n        };\n    }\n\n    @bind\n    private _handleWalletButtonClick(): void {\n        if (!this._masterpassClient) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        this._masterpassClient.checkout(this._createMasterpassPayload());\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { pick } from 'lodash';\n\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../../common/error/errors';\nimport { INTERNAL_USE_ONLY } from '../../../common/http-request';\nimport { PaymentMethod } from '../../../payment';\nimport { PaypalActions, PaypalAuthorizeData, PaypalClientToken } from '../../../payment/strategies/paypal';\nimport { PaypalScriptLoader } from '../../../payment/strategies/paypal';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class PaypalButtonStrategy implements CheckoutButtonStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paypalScriptLoader: PaypalScriptLoader,\n        private _formPoster: FormPoster,\n        private _host: string = ''\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const paypalOptions = options.paypal;\n        const state = this._store.getState();\n        const paymentMethod = this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n        if (!paypalOptions) {\n            throw new InvalidArgumentError();\n        }\n\n        return this._paypalScriptLoader.loadPaypal()\n            .then(paypal => {\n                if (!paymentMethod || !paymentMethod.config.merchantId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const merchantId = paymentMethod.config.merchantId;\n                const env = paymentMethod.config.testMode ? 'sandbox' : 'production';\n                const clientToken: PaypalClientToken = { [env]: paypalOptions.clientId };\n\n                const allowedSources = [];\n                const disallowedSources = [];\n\n                if (paypalOptions.allowCredit) {\n                    allowedSources.push(paypal.FUNDING.CREDIT);\n                } else {\n                    disallowedSources.push(paypal.FUNDING.CREDIT);\n                }\n\n                return paypal.Button.render({\n                    env,\n                    client: clientToken,\n                    commit: paypalOptions.shouldProcessPayment,\n                    funding: {\n                        allowed: allowedSources,\n                        disallowed: disallowedSources,\n                    },\n                    style: {\n                        shape: 'rect',\n                        ...pick(paypalOptions.style, 'layout', 'size', 'color', 'label', 'shape', 'tagline', 'fundingicons'),\n                    },\n                    payment: (data, actions) => this._setupPayment(merchantId, actions, paypalOptions.onPaymentError),\n                    onAuthorize: (data, actions) => this._tokenizePayment(data, actions, paypalOptions.shouldProcessPayment, paypalOptions.onAuthorizeError),\n                }, options.containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        this._paymentMethod = undefined;\n\n        return Promise.resolve();\n    }\n\n    private _setupPayment(merchantId: string, actions?: PaypalActions, onError?: (error: StandardError) => void): Promise<string> {\n        if (!actions) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(state => {\n                const cart = state.cart.getCart();\n                const cartId = cart ? cart.id : '';\n\n                return actions.request.post(`${this._host}/api/storefront/payment/paypalexpress`, { merchantId, cartId }, {\n                    headers: {\n                        'X-API-INTERNAL': INTERNAL_USE_ONLY,\n                    },\n                });\n            })\n            .then(res => res.id)\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _tokenizePayment(\n        data: PaypalAuthorizeData,\n        actions?: PaypalActions,\n        shouldProcessPayment?: boolean,\n        onError?: (error: StandardError) => void\n    ): Promise<void> {\n        if (!this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        if (!actions) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        if (!data.paymentID || !data.payerID) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        const methodId = this._paymentMethod.id;\n\n        return actions.payment.get(data.paymentID).then(payload => {\n            this._formPoster.postForm('/checkout.php', {\n                payment_type: 'paypal',\n                provider: methodId,\n                action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\n                paymentId: data.paymentID,\n                payerId: data.payerID,\n                payerInfo: JSON.stringify(payload.payer.payer_info),\n            });\n        });\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport { createCheckoutStore } from '../checkout';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\n\nimport CheckoutButtonInitializer from './checkout-button-initializer';\nimport CheckoutButtonInitializerOptions from './checkout-button-initializer-options';\nimport CheckoutButtonStrategyActionCreator from './checkout-button-strategy-action-creator';\nimport createCheckoutButtonRegistry from './create-checkout-button-registry';\n\n/**\n * Creates an instance of `CheckoutButtonInitializer`.\n *\n * @remarks\n * ```js\n * const initializer = createCheckoutButtonInitializer();\n *\n * initializer.initializeButton({\n *     methodId: 'braintreepaypal',\n *     braintreepaypal: {\n *         container: '#checkoutButton',\n *     },\n * });\n * ```\n *\n * @alpha\n * Please note that `CheckoutButtonInitializer` is currently in an early stage\n * of development. Therefore the API is unstable and not ready for public\n * consumption.\n *\n * @param options - A set of construction options.\n * @returns an instance of `CheckoutButtonInitializer`.\n */\nexport default function createCheckoutButtonInitializer(\n    options?: CheckoutButtonInitializerOptions\n): CheckoutButtonInitializer {\n    const host = options && options.host;\n    const store = createCheckoutStore();\n    const requestSender = createRequestSender({ host });\n    const formPoster = createFormPoster({ host });\n\n    return new CheckoutButtonInitializer(\n        store,\n        new CheckoutButtonStrategyActionCreator(\n            createCheckoutButtonRegistry(store, requestSender, formPoster, host),\n            new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender))\n        )\n    );\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { BraintreeScriptLoader, BraintreeSDKCreator } from '../payment/strategies/braintree';\nimport { createGooglePayPaymentProcessor, GooglePayBraintreeInitializer, GooglePayStripeInitializer } from '../payment/strategies/googlepay';\nimport { MasterpassScriptLoader } from '../payment/strategies/masterpass';\nimport { PaypalScriptLoader } from '../payment/strategies/paypal';\n\nimport { CheckoutButtonMethodType, CheckoutButtonStrategy } from './strategies';\nimport { BraintreePaypalButtonStrategy } from './strategies/braintree';\nimport { GooglePayButtonStrategy } from './strategies/googlepay';\nimport { MasterpassButtonStrategy } from './strategies/masterpass';\nimport { PaypalButtonStrategy } from './strategies/paypal';\n\nexport default function createCheckoutButtonRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender,\n    formPoster: FormPoster,\n    host?: string\n): Registry<CheckoutButtonStrategy, CheckoutButtonMethodType> {\n    const registry = new Registry<CheckoutButtonStrategy, CheckoutButtonMethodType>();\n    const scriptLoader = getScriptLoader();\n    const checkoutActionCreator = new CheckoutActionCreator(\n        new CheckoutRequestSender(requestSender),\n        new ConfigActionCreator(new ConfigRequestSender(requestSender))\n    );\n\n    registry.register(CheckoutButtonMethodType.BRAINTREE_PAYPAL, () =>\n        new BraintreePaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new BraintreeSDKCreator(new BraintreeScriptLoader(scriptLoader)),\n            new PaypalScriptLoader(scriptLoader),\n            formPoster\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.BRAINTREE_PAYPAL_CREDIT, () =>\n        new BraintreePaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new BraintreeSDKCreator(new BraintreeScriptLoader(scriptLoader)),\n            new PaypalScriptLoader(scriptLoader),\n            formPoster,\n            true\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.MASTERPASS, () =>\n        new MasterpassButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new MasterpassScriptLoader(scriptLoader)\n        ));\n\n    registry.register(CheckoutButtonMethodType.GOOGLEPAY_BRAINTREE, () =>\n        new GooglePayButtonStrategy(\n            store,\n            formPoster,\n            checkoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayBraintreeInitializer(\n                    new BraintreeSDKCreator(\n                        new BraintreeScriptLoader(scriptLoader)\n                    )\n                )\n            )\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.GOOGLEPAY_STRIPE, () =>\n        new GooglePayButtonStrategy(\n            store,\n            formPoster,\n            checkoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayStripeInitializer()\n            )\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.PAYPALEXPRESS, () =>\n        new PaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new PaypalScriptLoader(scriptLoader),\n            formPoster,\n            host\n        )\n    );\n\n    return registry;\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport enum NotEmbeddableErrorType {\n    MissingContainer = 'missing_container',\n    MissingContent = 'missing_content',\n    UnknownError = 'unknown_error',\n}\n\nexport default class NotEmbeddableError extends StandardError {\n    constructor(\n        message?: string,\n        public subtype: NotEmbeddableErrorType = NotEmbeddableErrorType.UnknownError\n    ) {\n        super(message || 'Unable to embed the checkout form.');\n\n        this.type = 'not_embeddable';\n    }\n}\n","import { default as storage } from 'local-storage-fallback';\n\nexport default class BrowserStorage {\n    constructor(\n        private _namespace: string\n    ) {}\n\n    getItem<TValue = any>(key: string): TValue | null {\n        const rawValue = storage.getItem(this.withNamespace(key));\n\n        if (rawValue === null) {\n            return null;\n        }\n\n        try {\n            return JSON.parse(rawValue);\n        } catch (error) {\n            // Clean up invalid values\n            this.removeItem(this.withNamespace(key));\n\n            return null;\n        }\n    }\n\n    getItemOnce<TValue = any>(key: string): TValue | null {\n        const value = this.getItem(key);\n\n        this.removeItem(key);\n\n        return value;\n    }\n\n    setItem<TValue = any>(key: string, value: TValue): void {\n        return storage.setItem(this.withNamespace(key), JSON.stringify(value));\n    }\n\n    removeItem(key: string): void {\n        return storage.removeItem(this.withNamespace(key));\n    }\n\n    private withNamespace(key: string): string {\n        return `${this._namespace}.${key}`;\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { InternalErrorResponseBody } from '../../common/error';\nimport { RequestError } from '../../common/error/errors';\n\nexport default class InvalidLoginTokenError extends RequestError {\n    constructor(response: Response<InternalErrorResponseBody>) {\n        super(response, { message: response.body.title });\n\n        this.type = 'invalid_login_token';\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { IFrameComponent } from 'iframe-resizer';\n\nimport { BrowserStorage } from '../common/storage';\nimport { parseUrl } from '../common/url';\n\nimport EmbeddedCheckoutError from './embedded-checkout-error';\nimport { EmbeddedCheckoutEventMap, EmbeddedCheckoutEventType } from './embedded-checkout-events';\nimport EmbeddedCheckoutOptions from './embedded-checkout-options';\nimport { InvalidLoginTokenError, NotEmbeddableError, NotEmbeddableErrorType } from './errors';\nimport { EmbeddedContentEvent, EmbeddedContentEventType } from './iframe-content/embedded-content-events';\nimport IframeEventListener from './iframe-event-listener';\nimport IframeEventPoster from './iframe-event-poster';\nimport LoadingIndicator from './loading-indicator';\nimport ResizableIframeCreator from './resizable-iframe-creator';\n\nconst CAN_RETRY_ALLOW_COOKIE = 'canRetryAllowCookie';\nconst IS_COOKIE_ALLOWED_KEY = 'isCookieAllowed';\n\nexport default class EmbeddedCheckout {\n    private _iframe?: IFrameComponent;\n    private _isAttached: boolean;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _iframeCreator: ResizableIframeCreator,\n        private _messageListener: IframeEventListener<EmbeddedCheckoutEventMap>,\n        private _messagePoster: IframeEventPoster<EmbeddedContentEvent>,\n        private _loadingIndicator: LoadingIndicator,\n        private _requestSender: RequestSender,\n        private _storage: BrowserStorage,\n        private _location: Location,\n        private _options: EmbeddedCheckoutOptions\n    ) {\n        this._isAttached = false;\n\n        if (this._options.onComplete) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.CheckoutComplete, this._options.onComplete);\n        }\n\n        if (this._options.onError) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.CheckoutError, this._options.onError);\n        }\n\n        if (this._options.onLoad) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.CheckoutLoaded, this._options.onLoad);\n        }\n\n        if (this._options.onFrameLoad) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.FrameLoaded, this._options.onFrameLoad);\n        }\n\n        if (this._options.onSignOut) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.SignedOut, this._options.onSignOut);\n        }\n\n        this._messageListener.addListener(EmbeddedCheckoutEventType.FrameLoaded, () => this._configureStyles());\n    }\n\n    attach(): Promise<this> {\n        if (this._isAttached) {\n            return Promise.resolve(this);\n        }\n\n        this._isAttached = true;\n        this._messageListener.listen();\n        this._loadingIndicator.show(this._options.containerId);\n\n        return this._allowCookie()\n            .then(() => this._attemptLogin())\n            .then(url => this._iframeCreator.createFrame(url, this._options.containerId))\n            .then(iframe => {\n                this._iframe = iframe;\n\n                this._configureStyles();\n                this._loadingIndicator.hide();\n            })\n            .catch(error => {\n                this._isAttached = false;\n\n                return this._retryAllowCookie(error)\n                    .catch(() => {\n                        this._messageListener.trigger({\n                            type: EmbeddedCheckoutEventType.FrameError,\n                            payload: error,\n                        });\n\n                        this._loadingIndicator.hide();\n\n                        throw error;\n                    });\n            })\n            .then(() => this);\n    }\n\n    detach(): void {\n        if (!this._isAttached) {\n            return;\n        }\n\n        this._isAttached = false;\n        this._messageListener.stopListen();\n\n        if (this._iframe && this._iframe.parentNode) {\n            this._iframe.parentNode.removeChild(this._iframe);\n            this._iframe.iFrameResizer.close();\n        }\n    }\n\n    private _configureStyles(): void {\n        if (!this._iframe || !this._iframe.contentWindow || !this._options.styles) {\n            return;\n        }\n\n        this._messagePoster.setTarget(this._iframe.contentWindow);\n\n        this._messagePoster.post({\n            type: EmbeddedContentEventType.StyleConfigured,\n            payload: this._options.styles,\n        });\n    }\n\n    private _attemptLogin(): Promise<string> {\n        if (!/^\\/login\\/token/.test(parseUrl(this._options.url).pathname)) {\n            return Promise.resolve(this._options.url);\n        }\n\n        return this._requestSender.post(this._options.url)\n            .then(({ body: { redirectUrl } }) => redirectUrl)\n            .catch(response => Promise.reject(new InvalidLoginTokenError(response)));\n    }\n\n    /**\n     * This workaround is required for certain browsers (namely Safari) that\n     * prevent session cookies to be set for a third party website unless the\n     * user has recently visited such website. Therefore, before we attempt to\n     * login or set an active cart in the session, we need to first redirect the\n     * user to the domain of Embedded Checkout.\n     */\n    private _allowCookie(): Promise<void> {\n        if (this._storage.getItem(IS_COOKIE_ALLOWED_KEY)) {\n            // It could be possible that the flag is set to true but the browser\n            // has already removed the permission to store cookie. In that case,\n            // we should try to redirect the user again.\n            this._storage.setItem(CAN_RETRY_ALLOW_COOKIE, true);\n\n            return Promise.resolve();\n        }\n\n        this._storage.removeItem(CAN_RETRY_ALLOW_COOKIE);\n        this._storage.setItem(IS_COOKIE_ALLOWED_KEY, true);\n\n        const { origin } = parseUrl(this._options.url);\n        const redirectUrl = `${origin}/embedded-checkout/allow-cookie?returnUrl=${encodeURIComponent(this._location.href)}`;\n\n        document.body.style.visibility = 'hidden';\n        this._location.replace(redirectUrl);\n\n        return new Promise<never>(() => {});\n    }\n\n    private _retryAllowCookie(error: EmbeddedCheckoutError): Promise<void> {\n        const canRetry = (\n            this._storage.getItem(CAN_RETRY_ALLOW_COOKIE) &&\n            error instanceof NotEmbeddableError &&\n            error.subtype === NotEmbeddableErrorType.MissingContent\n        );\n\n        if (!canRetry) {\n            return Promise.reject();\n        }\n\n        this._storage.removeItem(CAN_RETRY_ALLOW_COOKIE);\n        this._storage.removeItem(IS_COOKIE_ALLOWED_KEY);\n\n        return this._allowCookie();\n    }\n}\n","import { LoadingIndicatorStyles } from './embedded-checkout-styles';\n\nconst DEFAULT_STYLES: LoadingIndicatorStyles = {\n    size: 70,\n    color: '#d9d9d9',\n    backgroundColor: '#ffffff',\n};\n\nconst ROTATION_ANIMATION = 'embedded-checkout-loading-indicator-rotation';\n\nexport default class LoadingIndicator {\n    private _container: HTMLElement;\n    private _indicator: HTMLElement;\n    private _styles: LoadingIndicatorStyles;\n\n    constructor(\n        options?: { styles?: LoadingIndicatorStyles }\n    ) {\n        this._styles = { ...DEFAULT_STYLES, ...options && options.styles };\n\n        this._defineAnimation();\n\n        this._container = this._buildContainer();\n        this._indicator = this._buildIndicator();\n\n        this._container.appendChild(this._indicator);\n    }\n\n    show(parentId?: string): void {\n        if (parentId) {\n            const parent = document.getElementById(parentId);\n\n            if (!parent) {\n                throw new Error('Unable to attach the loading indicator because the parent ID is not valid.');\n            }\n\n            parent.appendChild(this._container);\n        }\n\n        this._container.style.visibility = 'visible';\n        this._container.style.opacity = '1';\n    }\n\n    hide(): void {\n        const handleTransitionEnd = () => {\n            this._container.style.visibility = 'hidden';\n\n            this._container.removeEventListener('transitionend', handleTransitionEnd);\n        };\n\n        this._container.addEventListener('transitionend', handleTransitionEnd);\n\n        this._container.style.opacity = '0';\n    }\n\n    private _buildContainer(): HTMLElement {\n        const container = document.createElement('div');\n\n        container.style.display = 'block';\n        container.style.bottom = '0';\n        container.style.left = '0';\n        container.style.height = '100%';\n        container.style.width = '100%';\n        container.style.position = 'absolute';\n        container.style.right = '0';\n        container.style.top = '0';\n        container.style.transition = 'all 250ms ease-out';\n        container.style.opacity = '0';\n\n        return container;\n    }\n\n    private _buildIndicator(): HTMLElement {\n        const indicator = document.createElement('div');\n\n        indicator.style.display = 'block';\n        indicator.style.width = `${this._styles.size}px`;\n        indicator.style.height = `${this._styles.size}px`;\n        indicator.style.borderRadius = `${this._styles.size}px`;\n        indicator.style.border = 'solid 1px';\n        indicator.style.borderColor = `${this._styles.backgroundColor} ${this._styles.backgroundColor} ${this._styles.color} ${this._styles.color}`;\n        indicator.style.margin = '0 auto';\n        indicator.style.position = 'absolute';\n        indicator.style.left = '0';\n        indicator.style.right = '0';\n        indicator.style.top = '50%';\n        indicator.style.transform = 'translateY(-50%) rotate(0deg)';\n        indicator.style.transformStyle = 'preserve-3d';\n        indicator.style.animation = `${ROTATION_ANIMATION} 500ms infinite cubic-bezier(0.69, 0.31, 0.56, 0.83)`;\n\n        return indicator;\n    }\n\n    private _defineAnimation(): void {\n        // In order to define CSS animation, we need to insert a stylesheet into the host frame.\n        // We only have to do it once.\n        if (document.getElementById(ROTATION_ANIMATION)) {\n            return;\n        }\n\n        const style = document.createElement('style');\n\n        style.id = ROTATION_ANIMATION;\n\n        document.head.appendChild(style);\n\n        if (style.sheet instanceof CSSStyleSheet) {\n            style.sheet.insertRule(`\n                @keyframes ${ROTATION_ANIMATION} {\n                    0% { transform: translateY(-50%) rotate(0deg); }\n                    100% { transform: translateY(-50%) rotate(360deg); }\n                }\n            `);\n        }\n    }\n}\n","import { iframeResizer, IFrameComponent } from 'iframe-resizer';\n\nimport { parseUrl } from '../common/url';\n\nimport { EmbeddedCheckoutEventType } from './embedded-checkout-events';\nimport { NotEmbeddableError, NotEmbeddableErrorType } from './errors';\nimport isIframeEvent from './is-iframe-event';\n\nexport default class ResizableIframeCreator {\n    constructor(\n        private _options?: { timeout: number }\n    ) {}\n\n    createFrame(src: string, containerId: string): Promise<IFrameComponent> {\n        const container = document.getElementById(containerId);\n        const { timeout = 60000 } = this._options || {};\n\n        if (!container) {\n            throw new NotEmbeddableError(\n                'Unable to embed the iframe because the container element could not be found.',\n                NotEmbeddableErrorType.MissingContainer\n            );\n        }\n\n        const iframe = document.createElement('iframe');\n\n        iframe.src = src;\n        iframe.style.border = 'none';\n        iframe.style.display = 'none';\n        iframe.style.width = '100%';\n        iframe.allowPaymentRequest = true;\n\n        container.appendChild(iframe);\n\n        return this._toResizableFrame(iframe, timeout)\n            .catch(error => {\n                container.removeChild(iframe);\n\n                throw error;\n            });\n    }\n\n    private _toResizableFrame(iframe: HTMLIFrameElement, timeoutInterval: number): Promise<IFrameComponent> {\n        // Can't simply listen to `load` event because it always gets triggered even if there's an error.\n        // Instead, listen to the `load` inside the iframe and let the parent frame know when it happens.\n        return new Promise((resolve, reject) => {\n            const timeout = window.setTimeout(() => {\n                reject(new NotEmbeddableError('Unable to embed the iframe because the content could not be loaded.'));\n            }, timeoutInterval);\n\n            const handleMessage = (event: MessageEvent) => {\n                if (event.origin !== parseUrl(iframe.src).origin) {\n                    return;\n                }\n\n                if (isIframeEvent(event.data, EmbeddedCheckoutEventType.FrameError)) {\n                    teardown();\n                    reject(new NotEmbeddableError(event.data.payload.message, NotEmbeddableErrorType.MissingContent));\n                }\n\n                if (isIframeEvent(event.data, EmbeddedCheckoutEventType.FrameLoaded)) {\n                    iframe.style.display = '';\n\n                    const contentId = event.data.payload && event.data.payload.contentId;\n                    const iframes = iframeResizer({\n                        scrolling: false,\n                        sizeWidth: false,\n                        heightCalculationMethod: contentId ? 'taggedElement' : 'lowestElement',\n                    }, iframe);\n\n                    teardown();\n                    resolve(iframes[iframes.length - 1]);\n                }\n            };\n\n            const teardown = () => {\n                window.removeEventListener('message', handleMessage);\n                window.clearTimeout(timeout);\n            };\n\n            window.addEventListener('message', handleMessage);\n        });\n    }\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\n\nimport { BrowserStorage } from '../common/storage';\nimport { parseUrl } from '../common/url';\n\nimport EmbeddedCheckout from './embedded-checkout';\nimport { EmbeddedCheckoutEventMap } from './embedded-checkout-events';\nimport EmbeddedCheckoutOptions from './embedded-checkout-options';\nimport { EmbeddedContentEvent } from './iframe-content/embedded-content-events';\nimport IframeEventListener from './iframe-event-listener';\nimport IframeEventPoster from './iframe-event-poster';\nimport LoadingIndicator from './loading-indicator';\nimport ResizableIframeCreator from './resizable-iframe-creator';\n\nconst STORAGE_PREFIX = 'BigCommerce.EmbeddedCheckout';\n\n/**\n * Embed the checkout form in an iframe.\n *\n * @remarks\n * Once the iframe is embedded, it will automatically resize according to the\n * size of the checkout form. It will also notify the parent window when certain\n * events have occurred. i.e.: when the form is loaded and ready to be used.\n *\n * ```js\n * embedCheckout({\n *     url: 'https://checkout/url',\n *     containerId: 'container-id',\n * });\n * ```\n *\n * @param options - Options for embedding the checkout form.\n * @returns A promise that resolves to an instance of `EmbeddedCheckout`.\n */\nexport default function embedCheckout(options: EmbeddedCheckoutOptions): Promise<EmbeddedCheckout> {\n    const origin = parseUrl(options.url).origin;\n    const embeddedCheckout = new EmbeddedCheckout(\n        new ResizableIframeCreator(),\n        new IframeEventListener<EmbeddedCheckoutEventMap>(origin),\n        new IframeEventPoster<EmbeddedContentEvent>(origin),\n        new LoadingIndicator({ styles: options.styles && options.styles.loadingIndicator }),\n        createRequestSender(),\n        new BrowserStorage(STORAGE_PREFIX),\n        window.location,\n        options\n    );\n\n    return embeddedCheckout.attach();\n}\n","module.exports = require(\"@bigcommerce/bigpay-client\");","module.exports = require(\"messageformat\");","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\nexport default class TimeoutError extends RequestError<{}> {\n    constructor(response?: Response) {\n        super(response, {\n            message: 'The request has timed out or aborted.',\n        });\n\n        this.type = 'timeout';\n    }\n}\n","import { memoize } from 'lodash';\n\nimport { bindDecorator, isEqual, isPrivate, CacheKeyResolver } from '../utility';\n\n/**\n * Decorates a class by patching all of its methods to cache their return values\n * and return them if they are called again with the same set of parameters. The\n * decorator also binds all the methods to the calling instance so it can be\n * destructed.\n */\nexport default function selectorDecorator<T extends Constructor<object>>(target: T): T {\n    const decoratedTarget = class extends target {};\n\n    Object.getOwnPropertyNames(target.prototype)\n        .forEach(key => {\n            const descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);\n\n            if (!descriptor || key === 'constructor') {\n                return;\n            }\n\n            Object.defineProperty(\n                decoratedTarget.prototype,\n                key,\n                selectorMethodDecorator(target.prototype, key, descriptor)\n            );\n        });\n\n    return decoratedTarget;\n}\n\nfunction selectorMethodDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T> {\n    if (typeof descriptor.value !== 'function') {\n        return descriptor;\n    }\n\n    let resolver = new CacheKeyResolver();\n    let method = descriptor.value;\n    let memoizedMethod = memoize(method, (...args) => resolver.getKey(...args));\n\n    return bindDecorator(target, key, {\n        get() {\n            const value = ((...args: any[]) => {\n                const cachedValue = memoizedMethod.call(this, ...args);\n\n                if (resolver.getUsedCount(...args) === 1) {\n                    return cachedValue;\n                }\n\n                const newValue = method.call(this, ...args);\n\n                if (isEqual(newValue, cachedValue, { keyFilter: key => !isPrivate(key) })) {\n                    return cachedValue;\n                }\n\n                memoizedMethod.cache.set(resolver.getKey(...args), newValue);\n\n                return newValue;\n            }) as T;\n\n            Object.defineProperty(this, key, { ...descriptor, value });\n\n            return value;\n        },\n        set(value) {\n            resolver = new CacheKeyResolver();\n            method = value;\n            memoizedMethod = memoize(method, (...args) => resolver.getKey(...args));\n        },\n    });\n}\n\nexport type Constructor<T> = new (...args: any[]) => T;\ntype Method = (...args: any[]) => any;\n","import { uniq } from 'lodash';\n\nexport default function joinIncludes(includes: string[]): string {\n    return uniq(includes).join(',');\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { cachableAction, ActionOptions } from '../common/action';\nimport { RequestOptions } from '../common/http-request';\n\nimport { ConfigRequestSender } from '.';\nimport { ConfigActionType, LoadConfigAction } from './config-actions';\n\nexport default class ConfigActionCreator {\n    constructor(\n        private _configRequestSender: ConfigRequestSender\n    ) {}\n\n    @cachableAction\n    loadConfig(options?: RequestOptions & ActionOptions): Observable<LoadConfigAction> {\n        return Observable.create((observer: Observer<LoadConfigAction>) => {\n            observer.next(createAction(ConfigActionType.LoadConfigRequested));\n\n            this._configRequestSender.loadConfig(options)\n                .then(response => {\n                    observer.next(createAction(ConfigActionType.LoadConfigSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConfigActionType.LoadConfigFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, INTERNAL_USE_ONLY, RequestOptions } from '../common/http-request';\n\nimport Config from './config';\n\nexport default class ConfigRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadConfig({ timeout }: RequestOptions = {}): Promise<Response<Config>> {\n        const url = '/api/storefront/checkout-settings';\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Response } from '@bigcommerce/request-sender';\nimport { Observable, Observer } from 'rxjs';\n\nimport { Checkout, InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType, StandardError } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { GuestCredentials } from '../customer';\n\nimport { BillingAddressRequestSender } from '.';\nimport { BillingAddressUpdateRequestBody } from './billing-address';\nimport { BillingAddressActionType, ContinueAsGuestAction, UpdateBillingAddressAction } from './billing-address-actions';\n\nexport default class BillingAddressActionCreator {\n    constructor(\n        private _requestSender: BillingAddressRequestSender\n    ) {}\n\n    continueAsGuest(\n        credentials: GuestCredentials,\n        options?: RequestOptions\n    ): ThunkAction<ContinueAsGuestAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ContinueAsGuestAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const customer = state.customer.getCustomer();\n\n            if (customer && !customer.isGuest) {\n                throw new StandardError('Cannot continue as guest: customer is logged in.');\n            }\n\n            const billingAddress = state.billingAddress.getBillingAddress();\n\n            let billingAddressRequestBody;\n\n            if (!billingAddress) {\n                billingAddressRequestBody = credentials;\n            } else {\n                const { country, ...existingBillingAddressRequestBody } = billingAddress;\n\n                billingAddressRequestBody = {\n                    ...existingBillingAddressRequestBody,\n                    ...credentials,\n                };\n            }\n\n            observer.next(createAction(BillingAddressActionType.ContinueAsGuestRequested));\n\n            this._createOrUpdateBillingAddress(checkout.id, billingAddressRequestBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(BillingAddressActionType.ContinueAsGuestSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(BillingAddressActionType.ContinueAsGuestFailed, response));\n                });\n        });\n    }\n\n    updateAddress(\n        address: Partial<BillingAddressUpdateRequestBody>,\n        options?: RequestOptions\n    ): ThunkAction<UpdateBillingAddressAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateBillingAddressAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(BillingAddressActionType.UpdateBillingAddressRequested));\n\n            const billingAddress = state.billingAddress.getBillingAddress();\n\n            // If email is not present in the address provided by the client, then\n            // fall back to the stored email as it could have been set separately\n            // using a convenience method. We can't rely on billingAddress having\n            // an ID to consider that there's a preexisting email, as billingAddress\n            // object from Order doesn't have an ID.\n            const billingAddressRequestBody = {\n                ...address,\n                email: typeof address.email === 'undefined' && billingAddress ? billingAddress.email : address.email,\n            };\n\n            if (billingAddress && billingAddress.id) {\n                billingAddressRequestBody.id = billingAddress.id;\n            }\n\n            this._createOrUpdateBillingAddress(checkout.id, billingAddressRequestBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(BillingAddressActionType.UpdateBillingAddressSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(BillingAddressActionType.UpdateBillingAddressFailed, response));\n                });\n        });\n    }\n\n    private _createOrUpdateBillingAddress(\n        checkoutId: string,\n        address: Partial<BillingAddressUpdateRequestBody>,\n        options?: RequestOptions\n    ): Promise<Response<Checkout>> {\n        if (!address.id) {\n            return this._requestSender.createAddress(checkoutId, address, options);\n        }\n\n        return this._requestSender.updateAddress(checkoutId, address, options);\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { AddressRequestBody } from '../address';\nimport { Checkout } from '../checkout';\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport { BillingAddressUpdateRequestBody } from './billing-address';\n\nconst DEFAULT_PARAMS = {\n    include: [\n        'cart.lineItems.physicalItems.options',\n        'cart.lineItems.digitalItems.options',\n        'customer',\n        'promotions.banners',\n    ].join(','),\n};\n\nexport default class BillingAddressRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    createAddress(checkoutId: string, address: Partial<AddressRequestBody>, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/billing-address`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, { body: address, params: DEFAULT_PARAMS, headers, timeout });\n    }\n\n    updateAddress(checkoutId: string, address: Partial<BillingAddressUpdateRequestBody>, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const { id, ...body } = address;\n        const url = `/api/storefront/checkouts/${checkoutId}/billing-address/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, { params: DEFAULT_PARAMS, body, headers, timeout });\n    }\n}\n","import { InvalidArgumentError } from '../error/errors';\n\nexport default class Registry<T, K extends string = string> {\n    private _factories: { [key: string]: Factory<T> };\n    private _instances: { [key: string]: T };\n    private _options: RegistryOptions;\n\n    constructor(options?: RegistryOptions) {\n        this._factories = {};\n        this._instances = {};\n        this._options = { defaultToken: 'default', ...options };\n    }\n\n    get(token?: K, cacheToken?: string): T {\n        try {\n            return this._getInstance(\n                token || this._options.defaultToken,\n                cacheToken || token || this._options.defaultToken\n            );\n        } catch (error) {\n            return this._getInstance(\n                this._options.defaultToken,\n                cacheToken || this._options.defaultToken\n            );\n        }\n    }\n\n    register(token: K, factory: Factory<T>): void {\n        if (this._hasFactory(token)) {\n            throw new InvalidArgumentError(`'${token}' is already registered.`);\n        }\n\n        this._factories[token] = factory;\n    }\n\n    protected _hasFactory(token: string): boolean {\n        return !!this._factories[token];\n    }\n\n    private _hasInstance(token: string): boolean {\n        return !!this._instances[token];\n    }\n\n    private _getInstance(token: string, cacheToken: string): T {\n        if (!this._hasInstance(cacheToken)) {\n            const factory = this._factories[token];\n\n            if (!factory) {\n                throw new InvalidArgumentError(`'${token}' is not registered.`);\n            }\n\n            this._instances[cacheToken] = factory();\n        }\n\n        return this._instances[cacheToken];\n    }\n}\n\nexport type Factory<T> = () => T;\n\nexport interface RegistryOptions {\n    defaultToken: string;\n}\n","export default function toFormUrlEncoded(data: { [key: string]: object | string | undefined }): string {\n    return Object.keys(data)\n        .filter(key => data[key] !== undefined)\n        .map(key => {\n            const value = data[key];\n\n            if (typeof value === 'string') {\n                return `${key}=${encodeURIComponent(value)}`;\n            }\n\n            return `${key}=${encodeURIComponent(JSON.stringify(value) || '')}`;\n        })\n        .join('&');\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { Masterpass, MasterpassHostWindow } from './masterpass';\n\nexport default class MasterpassScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        public _window: MasterpassHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<Masterpass> {\n        return this._scriptLoader\n            .loadScript(`//${testMode ? 'sandbox.' : ''}masterpass.com/integration/merchant.js`)\n            .then(() => {\n                if (!this._window.masterpass) {\n                    throw new StandardError();\n                }\n\n                return this._window.masterpass;\n            });\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class RemoteCheckoutSynchronizationError extends StandardError {\n    constructor(\n        public error?: Error\n    ) {\n        super('Unable to synchronize your checkout details with a third party provider. Please try again later.');\n\n        this.type = 'remote_checkout_synchronization';\n    }\n}\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport PaymentMethod from '../../payment-method';\nimport { BraintreeSDKCreator, GooglePayBraintreeSDK } from '../braintree';\n\nimport {\n    GooglePaymentData,\n    GooglePayInitializer,\n    GooglePayPaymentDataRequestV2,\n    TokenizePayload\n} from './googlepay';\nimport { GooglePayBraintreeDataRequest, GooglePayBraintreePaymentDataRequestV1 } from './googlepay-braintree';\n\nexport default class GooglePayBraintreeInitializer implements GooglePayInitializer {\n    private _googlePaymentInstance!: GooglePayBraintreeSDK;\n\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator\n    ) {}\n\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        if (!paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._braintreeSDKCreator.initialize(paymentMethod.clientToken);\n\n        return this._braintreeSDKCreator.getGooglePaymentComponent()\n            .then(googleBraintreePaymentInstance => {\n                this._googlePaymentInstance = googleBraintreePaymentInstance;\n\n                return this._createGooglePayPayload(\n                    checkout,\n                    paymentMethod.initializationData,\n                    hasShippingAddress\n                );\n            });\n    }\n\n    teardown(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): TokenizePayload {\n        const payload = JSON.parse(paymentData.paymentMethodData.tokenizationData.token).androidPayCards[0];\n\n        return {\n            nonce: payload.nonce,\n            type: payload.type,\n            description: payload.description,\n            details: {\n                cardType: payload.details.cardType,\n                lastFour: payload.details.lastFour,\n                lastTwo: payload.details.lastTwo,\n            },\n            binData: payload.binData,\n        };\n    }\n\n    private _createGooglePayPayload(\n        checkout: Checkout,\n        initializationData: any,\n        hasShippingAddress: boolean\n    ): GooglePayPaymentDataRequestV2 {\n        if (!initializationData.platformToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const googlePayBraintreePaymentDataRequest: GooglePayBraintreeDataRequest = {\n            merchantInfo: {\n                authJwt: initializationData.platformToken,\n                merchantName: initializationData.googleMerchantName,\n                merchantId: initializationData.googleMerchantId,\n            },\n            transactionInfo: {\n                currencyCode: checkout.cart.currency.code,\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(checkout.grandTotal, 2).toFixed(2),\n            },\n            cardRequirements: {\n                billingAddressRequired: true,\n                billingAddressFormat: 'FULL',\n            },\n            shippingAddressRequired: !hasShippingAddress,\n            emailRequired: true,\n            phoneNumberRequired: true,\n        };\n\n        return this._mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2(\n            this._googlePaymentInstance.createPaymentDataRequest(googlePayBraintreePaymentDataRequest)\n        );\n    }\n\n    private _mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2(googlePayBraintreeDataRequestV1: GooglePayBraintreePaymentDataRequestV1): GooglePayPaymentDataRequestV2 {\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt: googlePayBraintreeDataRequestV1.merchantInfo.authJwt,\n                merchantId: googlePayBraintreeDataRequestV1.merchantInfo.merchantId,\n                merchantName: googlePayBraintreeDataRequestV1.merchantInfo.merchantName,\n            },\n            allowedPaymentMethods: [{\n                type: 'CARD',\n                parameters: {\n                    allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                    allowedCardNetworks: googlePayBraintreeDataRequestV1.cardRequirements.allowedCardNetworks,\n                    billingAddressRequired: true,\n                    billingAddressParameters: {\n                        format: 'FULL',\n                        phoneNumberRequired: true,\n                    },\n                },\n                tokenizationSpecification: {\n                    type: 'PAYMENT_GATEWAY',\n                    parameters: {\n                        gateway: 'braintree',\n                        'braintree:apiVersion': 'v1',\n                        'braintree:authorizationFingerprint': googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters.parameters['braintree:authorizationFingerprint'],\n                        'braintree:merchantId': googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters.parameters['braintree:merchantId'],\n                        'braintree:sdkVersion': googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters.parameters['braintree:sdkVersion'],\n                    },\n                },\n            }],\n            transactionInfo: googlePayBraintreeDataRequestV1.transactionInfo,\n            emailRequired: true,\n            shippingAddressRequired: googlePayBraintreeDataRequestV1.shippingAddressRequired,\n            shippingAddressParameters: {\n                phoneNumberRequired: googlePayBraintreeDataRequestV1.phoneNumberRequired,\n            },\n        };\n    }\n}\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport { InvalidArgumentError } from '../../../common/error/errors';\nimport PaymentMethod from '../../payment-method';\n\nimport {\n    GooglePaymentData,\n    GooglePayInitializer,\n    GooglePayPaymentDataRequestV2,\n    TokenizePayload\n} from './googlepay';\n\nexport default class GooglePayStripeInitializer implements GooglePayInitializer {\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        return Promise.resolve(this._mapGooglePayStripeDataRequestToGooglePayDataRequestV2(\n            checkout,\n            paymentMethod.initializationData,\n            hasShippingAddress\n        ));\n    }\n\n    teardown(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): TokenizePayload {\n        try {\n            const payload = JSON.parse(paymentData.paymentMethodData.tokenizationData.token);\n\n            return {\n                nonce: payload.id,\n                type: payload.type,\n                details: {\n                    cardType: payload.card.brand,\n                    lastFour: payload.card.last4,\n                },\n            };\n        } catch (err) {\n            throw new InvalidArgumentError('Unable to parse response from Google Pay.');\n        }\n    }\n\n    private _mapGooglePayStripeDataRequestToGooglePayDataRequestV2(\n        checkout: Checkout,\n        initializationData: any,\n        hasShippingAddress: boolean\n    ): GooglePayPaymentDataRequestV2 {\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt: initializationData.platformToken,\n                merchantId: initializationData.googleMerchantId,\n                merchantName: initializationData.googleMerchantName,\n            },\n            allowedPaymentMethods: [{\n                type: 'CARD',\n                parameters: {\n                    allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                    allowedCardNetworks: ['AMEX', 'DISCOVER', 'JCB', 'MASTERCARD', 'VISA'],\n                    billingAddressRequired: true,\n                    billingAddressParameters: {\n                        format: 'FULL',\n                        phoneNumberRequired: true,\n                    },\n                },\n                tokenizationSpecification: {\n                    type: 'PAYMENT_GATEWAY',\n                    parameters: {\n                        gateway: 'stripe',\n                        'stripe:version': initializationData.stripeVersion,\n                        'stripe:publishableKey': initializationData.stripePublishableKey,\n                    },\n                },\n            }],\n            transactionInfo: {\n                currencyCode: checkout.cart.currency.code,\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(checkout.grandTotal, 2).toFixed(2),\n            },\n            emailRequired: true,\n            shippingAddressRequired: !hasShippingAddress,\n            shippingAddressParameters: {\n                phoneNumberRequired: true,\n            },\n        };\n    }\n}\n","import { mapToInternalAddress } from '../address';\nimport { BillingAddress } from '../billing';\n\nimport { Customer } from '.';\nimport InternalCustomer from './internal-customer';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalCustomer(customer: Customer, billingAddress: BillingAddress): InternalCustomer {\n    const firstName = customer.firstName || billingAddress.firstName || '';\n    const lastName = customer.lastName || billingAddress.lastName || '';\n\n    return {\n        addresses: (customer.addresses || []).map(address => mapToInternalAddress(address)),\n        customerId: customer.id,\n        isGuest: customer.isGuest,\n        storeCredit: customer.storeCredit,\n        email: customer.email || billingAddress.email || '',\n        firstName,\n        lastName,\n        name: customer.fullName || [firstName, lastName].join(' '),\n    };\n}\n","import GiftCertificate from './gift-certificate';\nimport InternalGiftCertificate from './internal-gift-certificate';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalGiftCertificate(giftCertificate: GiftCertificate): InternalGiftCertificate {\n    return {\n        code: giftCertificate.code,\n        discountedAmount: giftCertificate.used,\n        remainingBalance: giftCertificate.remaining,\n        giftCertificate: {\n            balance: giftCertificate.balance,\n            code: giftCertificate.code,\n            purchaseDate: giftCertificate.purchaseDate,\n        },\n    };\n}\n","import { filter, find, keyBy, reduce } from 'lodash';\n\nimport { AmountTransformer, LineItem } from '../cart';\nimport { mapToInternalLineItems } from '../cart';\nimport { Checkout } from '../checkout';\nimport { mapToInternalCoupon } from '../coupon';\nimport { HOSTED } from '../payment';\n\nimport InternalOrder, { InternalGiftCertificateList, InternalIncompleteOrder, InternalOrderPayment, InternalSocialDataList } from './internal-order';\nimport Order, { GatewayOrderPayment, GiftCertificateOrderPayment, OrderPayment, OrderPayments } from './order';\nimport { OrderMetaState } from './order-state';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalOrder(order: Order, orderMeta: OrderMetaState = {}): InternalOrder {\n    const decimalPlaces = order.currency.decimalPlaces;\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: order.orderId,\n        items: mapToInternalLineItems(order.lineItems, order.currency.decimalPlaces, 'productId'),\n        orderId: order.orderId,\n        currency: order.currency.code,\n        customerCanBeCreated: order.customerCanBeCreated,\n        payment: mapToInteralOrderPayment(order.payments, orderMeta.payment),\n        subtotal: {\n            amount: order.baseAmount,\n            integerAmount: amountTransformer.toInteger(order.baseAmount),\n        },\n        coupon: {\n            discountedAmount: reduce(order.coupons, (sum, coupon) => {\n                return sum + coupon.discountedAmount;\n            }, 0),\n            coupons: order.coupons.map(mapToInternalCoupon),\n        },\n        discount: {\n            amount: order.discountAmount,\n            integerAmount: amountTransformer.toInteger(order.discountAmount),\n        },\n        token: orderMeta.orderToken,\n        callbackUrl: orderMeta.callbackUrl,\n        discountNotifications: [],\n        giftCertificate: mapToGiftCertificates(order.payments),\n        socialData: mapToInternalSocialDataList(order),\n        status: order.status,\n        hasDigitalItems: order.hasDigitalItems,\n        isDownloadable: order.isDownloadable,\n        isComplete: order.isComplete,\n        shipping: {\n            amount: order.shippingCostTotal,\n            integerAmount: amountTransformer.toInteger(order.shippingCostTotal),\n            amountBeforeDiscount: order.shippingCostBeforeDiscount,\n            integerAmountBeforeDiscount: amountTransformer.toInteger(order.shippingCostBeforeDiscount),\n        },\n        storeCredit: {\n            amount: mapToStoreCredit(order.payments),\n        },\n        taxes: order.taxes,\n        taxTotal: {\n            amount: order.taxTotal,\n            integerAmount: amountTransformer.toInteger(order.taxTotal),\n        },\n        handling: {\n            amount: order.handlingCostTotal,\n            integerAmount: amountTransformer.toInteger(order.handlingCostTotal),\n        },\n        grandTotal: {\n            amount: order.orderAmount,\n            integerAmount: order.orderAmountAsInteger,\n        },\n    };\n}\n\nexport function mapToInternalIncompleteOrder(checkout: Checkout): InternalIncompleteOrder {\n    const payment = find(checkout.payments, { providerType: HOSTED });\n\n    return {\n        orderId: null,\n        isComplete: false,\n        payment: !payment ? {} : {\n            id: payment.providerId,\n            gateway: payment.gatewayId,\n            status: mapToInternalPaymentStatus(payment.detail.step),\n        },\n    };\n}\n\nfunction mapToInternalPaymentStatus(status: string): string {\n    return `PAYMENT_STATUS_${status}`;\n}\n\nfunction mapToStoreCredit(payments?: OrderPayments): number {\n    const item = find(payments, { providerId: 'storecredit' });\n\n    return item ? item.amount : 0;\n}\n\nfunction mapToGiftCertificates(payments?: OrderPayments): InternalGiftCertificateList {\n    const items = filter(payments, { providerId: 'giftcertificate' }) as GiftCertificateOrderPayment[];\n\n    return {\n        totalDiscountedAmount: reduce(items, (sum, item) => item.amount + sum, 0),\n        appliedGiftCertificates: keyBy(items.map(item => ({\n            code: item.detail.code,\n            discountedAmount: item.amount,\n            remainingBalance: item.detail.remaining,\n            giftCertificate: {\n                balance: item.amount + item.detail.remaining,\n                code: item.detail.code,\n                purchaseDate: '',\n            },\n        })), 'code'),\n    };\n}\n\nfunction mapToInteralOrderPayment(payments?: OrderPayments, payment: InternalOrderPayment = {}): InternalOrderPayment {\n    const item = find(payments, isDefaultOrderPayment) as GatewayOrderPayment;\n\n    if (!item) {\n        return {};\n    }\n\n    return {\n        id: item.providerId,\n        status: mapToInternalPaymentStatus(item.detail.step),\n        helpText: item.detail.instructions,\n        returnUrl: payment.returnUrl,\n    };\n}\n\nfunction isDefaultOrderPayment(payment: OrderPayment): payment is GatewayOrderPayment {\n    return payment.providerId !== 'giftcertificate' && payment.providerId !== 'storecredit';\n}\n\nfunction mapToInternalSocialDataList(order: Order): { [itemId: string]: InternalSocialDataList } | undefined {\n    const socialDataObject: { [itemId: string]: InternalSocialDataList } = {};\n    const items = [\n        ...order.lineItems.physicalItems,\n        ...order.lineItems.digitalItems,\n    ];\n\n    items.forEach(item => {\n        socialDataObject[item.id] = mapToInternalSocialData(item);\n    });\n\n    return socialDataObject;\n}\n\nfunction mapToInternalSocialData(lineItem: LineItem): InternalSocialDataList {\n    const codes = ['fb', 'tw', 'gp'];\n\n    return codes.reduce((socialData, code) => {\n        const item = lineItem.socialMedia && lineItem.socialMedia.find(item => item.code === code);\n\n        if (!item) {\n            return socialData;\n        }\n\n        socialData[code] = {\n            name: lineItem.name,\n            description: lineItem.name,\n            image: lineItem.imageUrl,\n            url: item.link,\n            shareText: item.text,\n            sharingLink: item.link,\n            channelName: item.channel,\n            channelCode: item.code,\n        };\n\n        return socialData;\n    }, {} as InternalSocialDataList);\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { PaypalHostWindow, PaypalSDK } from './paypal-sdk';\n\nexport default class PaypalScriptLoader {\n    private _window: PaypalHostWindow;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    loadPaypal(): Promise<PaypalSDK> {\n        return this._scriptLoader\n            .loadScript('//www.paypalobjects.com/api/checkout.min.js')\n            .then(() => {\n                if (!this._window.paypal) {\n                    throw new StandardError();\n                }\n\n                return this._window.paypal;\n            });\n    }\n}\n","import { ClearErrorAction, ErrorActionType } from './error-actions';\n\nexport default class ErrorActionCreator {\n    clearError(error: Error): ClearErrorAction {\n        return {\n            type: ErrorActionType.ClearError,\n            payload: error,\n        };\n    }\n}\n","export default function getEnvironment(): string {\n    try {\n        return process.env.NODE_ENV || 'development';\n    } catch (e) {\n        return 'development';\n    }\n}\n","import Logger from './logger';\n\nexport default class ConsoleLogger implements Logger {\n    constructor(\n        private _console?: Console\n    ) {}\n\n    log(...messages: any[]): void {\n        this._logToConsole('log', ...messages);\n    }\n\n    info(...messages: any[]): void {\n        this._logToConsole('info', ...messages);\n    }\n\n    warn(...messages: any[]): void {\n        this._logToConsole('warn', ...messages);\n    }\n\n    error(...messages: any[]): void {\n        this._logToConsole('error', ...messages);\n    }\n\n    debug(...messages: any[]): void {\n        this._logToConsole('debug', ...messages);\n    }\n\n    private _logToConsole(type: keyof Console, ...messages: any[]): void {\n        if (!this._console || !this._console[type]) {\n            return;\n        }\n\n        this._console[type].call(this._console, ...messages);\n    }\n}\n","import Logger from './logger';\n\nexport default class NoopLogger implements Logger {\n    log(): void {}\n\n    info(): void {}\n\n    warn(): void {}\n\n    error(): void {}\n\n    debug(): void {}\n}\n","import { getEnvironment } from '../utility';\n\nimport createLogger from './create-logger';\nimport Logger from './logger';\n\nconst logger = createLogger(getEnvironment() !== 'test');\n\nexport default function getDefaultLogger(): Logger {\n    return logger;\n}\n","import ConsoleLogger from './console-logger';\nimport Logger from './logger';\nimport NoopLogger from './noop-logger';\n\nexport default function createLogger(isEnabled = true): Logger {\n    if (!isEnabled) {\n        return new NoopLogger();\n    }\n\n    return new ConsoleLogger(console);\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport { ApplyCouponAction, CouponAction, CouponActionType, RemoveCouponAction } from './coupon-actions';\nimport CouponRequestSender from './coupon-request-sender';\n\nexport default class CouponActionCreator {\n    constructor(\n        private _couponRequestSender: CouponRequestSender\n    ) {}\n\n    applyCoupon(code: string, options?: RequestOptions): ThunkAction<CouponAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ApplyCouponAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CouponActionType.ApplyCouponRequested));\n\n            this._couponRequestSender.applyCoupon(checkout.id, code, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CouponActionType.ApplyCouponSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CouponActionType.ApplyCouponFailed, response));\n                });\n        });\n    }\n\n    removeCoupon(code: string, options?: RequestOptions): ThunkAction<CouponAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<RemoveCouponAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CouponActionType.RemoveCouponRequested));\n\n            this._couponRequestSender.removeCoupon(checkout.id, code, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CouponActionType.RemoveCouponSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CouponActionType.RemoveCouponFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout, CheckoutIncludes, CHECKOUT_DEFAULT_INCLUDES } from '../checkout';\nimport { joinIncludes, ContentType, RequestOptions } from '../common/http-request';\n\nexport default class CouponRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    applyCoupon(checkoutId: string, couponCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/coupons`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes([\n                    ...CHECKOUT_DEFAULT_INCLUDES,\n                    CheckoutIncludes.AvailableShippingOptions,\n                ]),\n            },\n            body: { couponCode },\n        });\n    }\n\n    removeCoupon(checkoutId: string, couponCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/coupons/${couponCode}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes([\n                    ...CHECKOUT_DEFAULT_INCLUDES,\n                    CheckoutIncludes.AvailableShippingOptions,\n                ]),\n            },\n        });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable ,  Observer } from 'rxjs';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport { GiftCertificateRequestSender } from '.';\nimport { ApplyGiftCertificateAction, GiftCertificateActionType, RemoveGiftCertificateAction } from './gift-certificate-actions';\n\nexport default class GiftCertificateActionCreator {\n    constructor(\n        private _giftCertificateRequestSender: GiftCertificateRequestSender\n    ) {}\n\n    applyGiftCertificate(giftCertificate: string, options?: RequestOptions): ThunkAction<ApplyGiftCertificateAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ApplyGiftCertificateAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(GiftCertificateActionType.ApplyGiftCertificateRequested));\n\n            this._giftCertificateRequestSender.applyGiftCertificate(checkout.id, giftCertificate, options)\n                .then(({ body }) => {\n                    observer.next(createAction(GiftCertificateActionType.ApplyGiftCertificateSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(GiftCertificateActionType.ApplyGiftCertificateFailed, response));\n                });\n        });\n    }\n\n    removeGiftCertificate(giftCertificate: string, options?: RequestOptions): ThunkAction<RemoveGiftCertificateAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<RemoveGiftCertificateAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(GiftCertificateActionType.RemoveGiftCertificateRequested));\n\n            this._giftCertificateRequestSender.removeGiftCertificate(checkout.id, giftCertificate, options)\n                .then(({ body }) => {\n                    observer.next(createAction(GiftCertificateActionType.RemoveGiftCertificateSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(GiftCertificateActionType.RemoveGiftCertificateFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout, CHECKOUT_DEFAULT_INCLUDES } from '../checkout';\nimport { joinIncludes, ContentType, RequestOptions } from '../common/http-request';\n\nexport default class GiftCertificateRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    applyGiftCertificate(checkoutId: string, giftCertificateCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/gift-certificates`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes(CHECKOUT_DEFAULT_INCLUDES),\n            },\n            body: { giftCertificateCode },\n        });\n    }\n\n    removeGiftCertificate(checkoutId: string, giftCertificateCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/gift-certificates/${giftCertificateCode}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes(CHECKOUT_DEFAULT_INCLUDES),\n            },\n        });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { Registry } from '../common/registry';\n\nimport CustomerCredentials from './customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from './customer-request-options';\nimport {\n    CustomerStrategyActionType,\n    CustomerStrategyDeinitializeAction,\n    CustomerStrategyInitializeAction,\n    CustomerStrategySignInAction,\n    CustomerStrategySignOutAction,\n    CustomerStrategyWidgetAction,\n} from './customer-strategy-actions';\nimport { CustomerStrategy } from './strategies';\n\nexport default class CustomerStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: Registry<CustomerStrategy>\n    ) {}\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Observable<CustomerStrategySignInAction> {\n        return Observable.create((observer: Observer<CustomerStrategySignInAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.SignInRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .signIn(credentials, options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.SignInSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.SignInFailed, error, meta));\n                });\n        });\n    }\n\n    signOut(options?: CustomerRequestOptions): Observable<CustomerStrategySignOutAction> {\n        return Observable.create((observer: Observer<CustomerStrategySignOutAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.SignOutRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .signOut(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.SignOutSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.SignOutFailed, error, meta));\n                });\n        });\n    }\n\n    initialize(options?: CustomerInitializeOptions): ThunkAction<CustomerStrategyInitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<CustomerStrategyInitializeAction>) => {\n            const state = store.getState();\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            if (methodId && state.customerStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(CustomerStrategyActionType.InitializeRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .initialize(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.InitializeSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.InitializeFailed, error, meta));\n                });\n        });\n    }\n\n    deinitialize(options?: CustomerRequestOptions): ThunkAction<CustomerStrategyDeinitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<CustomerStrategyDeinitializeAction>) => {\n            const state = store.getState();\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            if (methodId && !state.customerStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(CustomerStrategyActionType.DeinitializeRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .deinitialize(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.DeinitializeSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.DeinitializeFailed, error, meta));\n                });\n        });\n    }\n\n    widgetInteraction(method: () => Promise<any>, options?: CustomerRequestOptions): Observable<CustomerStrategyWidgetAction> {\n        return Observable.create((observer: Observer<CustomerStrategyWidgetAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.WidgetInteractionStarted, undefined, meta));\n\n            method().then(() => {\n                observer.next(createAction(CustomerStrategyActionType.WidgetInteractionFinished, undefined, meta));\n                observer.complete();\n            })\n            .catch(error => {\n                observer.error(createErrorAction(CustomerStrategyActionType.WidgetInteractionFailed, error, meta));\n            });\n        });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport PaymentMethod from '../../payment-method';\n\nimport AmazonPayWindow from './amazon-pay-window';\n\nexport default class AmazonPayScriptLoader {\n    private _window: AmazonPayWindow;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    loadWidget(method: PaymentMethod, onPaymentReady?: () => void): Promise<Event> {\n        const {\n            config: { merchantId, testMode },\n            initializationData: { region = 'us' } = {},\n        } = method;\n\n        const url = 'https://' +\n            (region.toLowerCase() !== 'us' ? 'static-eu.' : 'static-na.') +\n            'payments-amazon.com/OffAmazonPayments/' +\n            `${region.toLowerCase()}/` +\n            (testMode ? 'sandbox/' : '') +\n            (region.toLowerCase() !== 'us' ? 'lpa/' : '') +\n            `js/Widgets.js?sellerId=${merchantId}`;\n\n        this._configureWidget(method, onPaymentReady);\n\n        return this._scriptLoader.loadScript(url);\n    }\n\n    private _configureWidget(method: PaymentMethod, onPaymentReady?: () => void): void {\n        const onLoginReady = () => {\n            if (!this._window.amazon) {\n                return;\n            }\n\n            this._window.amazon.Login.setClientId(method.initializationData.clientId);\n            this._window.amazon.Login.setUseCookie(true);\n        };\n\n        if (this._window.amazon && this._window.amazon.Login) {\n            onLoginReady();\n        } else {\n            this._window.onAmazonLoginReady = onLoginReady;\n        }\n\n        if (this._window.OffAmazonPayments && onPaymentReady) {\n            onPaymentReady();\n        } else {\n            this._window.onAmazonPaymentsReady = onPaymentReady;\n        }\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\n\nimport { Address, LegacyAddress } from '../../../address';\nimport { toFormUrlEncoded } from '../../../common/http-request';\n\nimport { BraintreeDataCollector } from './braintree';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\nimport {\n    VisaCheckoutAddress,\n    VisaCheckoutInitOptions,\n    VisaCheckoutPaymentSuccessPayload,\n    VisaCheckoutTokenizedPayload,\n} from './visacheckout';\n\nexport default class BraintreeVisaCheckoutPaymentProcessor {\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _requestSender: RequestSender\n    ) {}\n\n    initialize(clientToken: string, options: VisaCheckoutInitializeOptions): Promise<VisaCheckoutInitOptions> {\n        this._braintreeSDKCreator.initialize(clientToken);\n\n        return this._braintreeSDKCreator.getVisaCheckout()\n            .then(visaCheckout => visaCheckout.createInitOptions({\n                settings: {\n                    locale: options.locale,\n                    shipping: {\n                        collectShipping: options.collectShipping,\n                    },\n                },\n                paymentRequest: {\n                    currencyCode: options.currencyCode,\n                    subtotal: String(options.subtotal),\n                },\n            }));\n    }\n\n    deinitialize(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    handleSuccess(payment: VisaCheckoutPaymentSuccessPayload, shipping?: Address, billing?: Address): Promise<any> {\n        return this._braintreeSDKCreator.getVisaCheckout()\n            .then(braintreeVisaCheckout => Promise.all([\n                braintreeVisaCheckout.tokenize(payment),\n                this._braintreeSDKCreator.getDataCollector(),\n            ])\n            .then(([tokenizedPayload, dataCollector]) => {\n                const {\n                    shippingAddress = this._toVisaCheckoutAddress(shipping),\n                    billingAddress = this._toVisaCheckoutAddress(billing),\n                } = tokenizedPayload;\n\n                return this._postForm({\n                    ...tokenizedPayload,\n                    shippingAddress,\n                    billingAddress,\n                }, dataCollector);\n            }));\n    }\n\n    private _postForm(paymentData: VisaCheckoutTokenizedPayload, dataCollector: BraintreeDataCollector) {\n        const {\n            userData,\n            billingAddress,\n            shippingAddress,\n            details: cardInformation,\n        } = paymentData;\n        const { userEmail } = userData;\n        const { deviceData } = dataCollector;\n\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: toFormUrlEncoded({\n                payment_type: paymentData.type,\n                nonce: paymentData.nonce,\n                provider: 'braintreevisacheckout',\n                action: 'set_external_checkout',\n                device_data: deviceData,\n                card_information: this._getCardInformation(cardInformation),\n                billing_address: this._getAddress(userEmail, billingAddress),\n                shipping_address: this._getAddress(userEmail, shippingAddress),\n            }),\n        });\n    }\n\n    private _toVisaCheckoutAddress(address?: Address): VisaCheckoutAddress {\n        if (!address) {\n            return {};\n        }\n\n        return {\n            firstName: address.firstName,\n            lastName: address.lastName,\n            phoneNumber: address.phone,\n            streetAddress: address.address1,\n            extendedAddress: address.address2,\n            locality: address.city,\n            region: address.stateOrProvinceCode,\n            countryCode: address.countryCode,\n            postalCode: address.postalCode,\n        };\n    }\n\n    private _getAddress(email: string, address: VisaCheckoutAddress = {}): Partial<LegacyAddress> {\n        return {\n            email,\n            first_name: address.firstName,\n            last_name: address.lastName,\n            phone_number: address.phoneNumber,\n            address_line_1: address.streetAddress,\n            address_line_2: address.extendedAddress,\n            city: address.locality,\n            state: address.region,\n            country_code: address.countryCode,\n            postal_code: address.postalCode,\n        };\n    }\n\n    private _getCardInformation(cardInformation: { cardType: string, lastTwo: string }) {\n        return {\n            type: cardInformation.cardType,\n            number: cardInformation.lastTwo,\n        };\n    }\n}\n\nexport interface VisaCheckoutInitializeOptions {\n    locale?: string;\n    collectShipping?: boolean;\n    subtotal?: number;\n    currencyCode?: string;\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport BraintreeScriptLoader from './braintree-script-loader';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\nimport BraintreeVisaCheckoutPaymentProcessor from './braintree-visacheckout-payment-processor';\n\nexport default function createBraintreeVisaCheckoutPaymentProcessor(\n    scriptLoader: ScriptLoader,\n    requestSender: RequestSender\n) {\n    const braintreeScriptLoader = new BraintreeScriptLoader(scriptLoader);\n    const braintreeSDKCreator = new BraintreeSDKCreator(braintreeScriptLoader);\n\n    return new BraintreeVisaCheckoutPaymentProcessor(braintreeSDKCreator, requestSender);\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { VisaCheckoutHostWindow, VisaCheckoutSDK } from './visacheckout';\n\nexport default class VisaCheckoutScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: VisaCheckoutHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<VisaCheckoutSDK> {\n        return this._scriptLoader\n            .loadScript(`//${testMode ? 'sandbox-' : ''}assets.secure.checkout.visa.com/checkout-widget/resources/js/integration/v1/sdk.js`)\n            .then(() => {\n                if (!this._window.V) {\n                    throw new StandardError();\n                }\n\n                return this._window.V;\n            });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { ChasePayHostWindow, JPMC } from '../chasepay/chasepay';\n\nexport default class ChasePayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        public _window: ChasePayHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<JPMC> {\n        return this._scriptLoader\n            .loadScript(`//pwc${testMode ? 'psb' : ''}.chase.com/pwc/checkout/js/v20170521/list.action?type=raw&applId=PWC&channelId=CWC&version=1`)\n            .then(() => {\n                if (!this._window.JPMC) {\n                    throw new StandardError();\n                }\n\n                return this._window.JPMC;\n            });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class RemoteCheckoutRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    initializeBilling(methodName: string, params?: { referenceId: string }, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/billing`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    initializeShipping(methodName: string, params?: { referenceId: string }, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/shipping`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    initializePayment(methodName: string, params?: InitializePaymentOptions, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/payment`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    loadSettings(methodName: string, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/settings`;\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    signOut(methodName: string, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/signout`;\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    generateToken({ timeout }: RequestOptions = {}): Promise<Response> {\n        const url = '/remote-checkout-token';\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    trackAuthorizationEvent({ timeout }: RequestOptions = {}): Promise<Response> {\n        const url = '/remote-checkout/events/shopper-checkout-service-provider-authorization-requested';\n\n        return this._requestSender.post(url, { timeout });\n    }\n}\n\nexport interface InitializePaymentOptions {\n    authorizationToken?: string;\n    customerMessage?: string;\n    referenceId?: string;\n    useStoreCredit?: boolean;\n}\n","import { createAction, createErrorAction, Action } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { RemoteCheckoutActionType } from './remote-checkout-actions';\nimport RemoteCheckoutRequestSender, { InitializePaymentOptions } from './remote-checkout-request-sender';\nimport { RemoteCheckoutStateData } from './remote-checkout-state';\n\n/**\n * @todo Convert this file into TypeScript properly\n * i.e.: Action<T>\n */\nexport default class RemoteCheckoutActionCreator {\n    constructor(\n        private _remoteCheckoutRequestSender: RemoteCheckoutRequestSender\n    ) {}\n\n    initializeBilling(methodId: string, params?: { referenceId: string }, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteBillingRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializeBilling(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteBillingSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.InitializeRemoteBillingFailed, response, { methodId }));\n                });\n        });\n    }\n\n    initializeShipping(methodId: string, params?: { referenceId: string }, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteShippingRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializeShipping(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteShippingSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.InitializeRemoteShippingFailed, response, { methodId }));\n                });\n        });\n    }\n\n    initializePayment(methodId: string, params?: InitializePaymentOptions, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.InitializeRemotePaymentRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializePayment(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.InitializeRemotePaymentSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.InitializeRemotePaymentFailed, response, { methodId }));\n                });\n        });\n    }\n\n    loadSettings(methodId: string, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.LoadRemoteSettingsRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.loadSettings(methodId, options)\n                .then(({ body }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.LoadRemoteSettingsSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.LoadRemoteSettingsFailed, response, { methodId }));\n                });\n        });\n    }\n\n    signOut(methodId: string, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.SignOutRemoteCustomerRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.signOut(methodId, options)\n                .then(() => {\n                    observer.next(createAction(RemoteCheckoutActionType.SignOutRemoteCustomerSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.SignOutRemoteCustomerFailed, response, { methodId }));\n                });\n        });\n    }\n\n    updateCheckout<K extends keyof RemoteCheckoutStateData>(methodId: K, data: Partial<RemoteCheckoutStateData[K]>): Action {\n        return createAction(RemoteCheckoutActionType.UpdateRemoteCheckout, data, { methodId });\n    }\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, from, of } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { CheckoutActionCreator, InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\n\nimport { CustomerActionType, SignInCustomerAction, SignOutCustomerAction } from './customer-actions';\nimport CustomerCredentials from './customer-credentials';\nimport CustomerRequestSender from './customer-request-sender';\n\nexport default class CustomerActionCreator {\n    constructor(\n        private _customerRequestSender: CustomerRequestSender,\n        private _checkoutActionCreator: CheckoutActionCreator\n    ) {}\n\n    signInCustomer(\n        credentials: CustomerCredentials,\n        options?: RequestOptions\n    ): ThunkAction<SignInCustomerAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CustomerActionType.SignInCustomerRequested)),\n            from(this._customerRequestSender.signInCustomer(credentials, options))\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._checkoutActionCreator.loadCurrentCheckout(options)(store),\n                        of(createAction(CustomerActionType.SignInCustomerSucceeded, body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(CustomerActionType.SignInCustomerFailed, error))\n        );\n    }\n\n    signOutCustomer(\n        options?: RequestOptions\n    ): ThunkAction<SignOutCustomerAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CustomerActionType.SignOutCustomerRequested)),\n            from(this._customerRequestSender.signOutCustomer(options))\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._checkoutActionCreator.loadCurrentCheckout(options)(store),\n                        of(createAction(CustomerActionType.SignOutCustomerSucceeded, body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(CustomerActionType.SignOutCustomerFailed, error))\n        );\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport CustomerCredentials from './customer-credentials';\nimport { InternalCustomerResponseBody } from './internal-customer-responses';\n\nexport default class CustomerRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    signInCustomer(credentials: CustomerCredentials, { timeout }: RequestOptions = {}): Promise<Response<InternalCustomerResponseBody>> {\n        const url = '/internalapi/v1/checkout/customer';\n\n        return this._requestSender.post(url, { timeout, body: credentials });\n    }\n\n    signOutCustomer({ timeout }: RequestOptions = {}): Promise<Response<InternalCustomerResponseBody>> {\n        const url = '/internalapi/v1/checkout/customer';\n\n        return this._requestSender.delete(url, { timeout });\n    }\n}\n","import StandardError from './standard-error';\n\nexport default class NotImplementedError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Not implemented.');\n\n        this.type = 'not_implemented';\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors} from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { AmazonPayLoginButton, AmazonPayScriptLoader, AmazonPayWindow } from '../../../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../../../remote-checkout';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nimport AmazonPayCustomerInitializeOptions from './amazon-pay-customer-initialize-options';\n\nexport default class AmazonPayCustomerStrategy implements CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _window: AmazonPayWindow;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _remoteCheckoutRequestSender: RemoteCheckoutRequestSender,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { amazon: amazonOptions, methodId } = options;\n\n        if (!amazonOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.amazon\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise((resolve, reject) => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const { onError = () => {} } = amazonOptions;\n                const onReady = () => {\n                    this._createSignInButton({\n                        ...amazonOptions,\n                        onError: error => {\n                            reject(error);\n                            onError(error);\n                        },\n                    });\n\n                    resolve();\n                };\n\n                this._scriptLoader.loadWidget(this._paymentMethod, onReady)\n                    .catch(reject);\n            }))\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via AmazonPay, the shopper must click on \"Login with Amazon\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _createSignInButton(options: AmazonPayCustomerInitializeOptions): AmazonPayLoginButton {\n        if (!this._paymentMethod || !this._window.OffAmazonPayments) {\n            throw new NotInitializedError(NotInitializedErrorType.CustomerNotInitialized);\n        }\n\n        if (!this._paymentMethod.config.merchantId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { initializationData } = this._paymentMethod;\n\n        return new this._window.OffAmazonPayments.Button(options.container, this._paymentMethod.config.merchantId, {\n            color: options.color || 'Gold',\n            size: options.size || 'small',\n            type: 'PwA',\n            useAmazonAddressBook: true,\n            onError: options.onError,\n            authorization: () => {\n                this._handleAuthorization(initializationData);\n            },\n        });\n    }\n\n    private _handleAuthorization(options: AuthorizationOptions): void {\n        this._remoteCheckoutRequestSender.generateToken()\n            .then(({ body }) => {\n                if (!this._window.amazon) {\n                    throw new NotInitializedError(NotInitializedErrorType.ShippingNotInitialized);\n                }\n\n                this._window.amazon.Login.authorize({\n                    popup: false,\n                    scope: 'payments:shipping_address payments:billing_address payments:widget profile',\n                    state: `${options.tokenPrefix}${body.token}`,\n                }, options.redirectUrl);\n\n                this._remoteCheckoutRequestSender.trackAuthorizationEvent();\n            });\n    }\n}\n\ninterface AuthorizationOptions {\n    redirectUrl: string;\n    tokenPrefix: string;\n}\n","import { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError } from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { BraintreeVisaCheckoutPaymentProcessor } from '../../../payment/strategies/braintree';\nimport { VisaCheckoutScriptLoader } from '../../../payment/strategies/braintree';\nimport { VisaCheckoutPaymentSuccessPayload } from '../../../payment/strategies/braintree/visacheckout';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategyActionCreator from '../../customer-strategy-action-creator';\n\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class BraintreeVisaCheckoutCustomerStrategy implements CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _buttonClassName: string = 'visa-checkout-wrapper';\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _customerStrategyActionCreator: CustomerStrategyActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _braintreeVisaCheckoutPaymentProcessor: BraintreeVisaCheckoutPaymentProcessor,\n        private _visaCheckoutScriptLoader: VisaCheckoutScriptLoader\n    ) {}\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintreevisacheckout: visaCheckoutOptions, methodId } = options;\n\n        if (!visaCheckoutOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.braintreevisacheckout\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const checkout = state.checkout.getCheckout();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const {\n                    container,\n                    onError = () => {},\n                } = visaCheckoutOptions;\n\n                const initOptions = {\n                    locale: storeConfig.storeProfile.storeLanguage,\n                    collectShipping: true,\n                    subtotal: checkout.subtotal,\n                    currencyCode: storeConfig.currency.code,\n                };\n\n                return Promise.all([\n                    this._visaCheckoutScriptLoader.load(this._paymentMethod.config.testMode),\n                    this._braintreeVisaCheckoutPaymentProcessor.initialize(this._paymentMethod.clientToken, initOptions),\n                ])\n                .then(([visaCheckout, initOptions]) => {\n                    const signInButton = this._createSignInButton(container, this._buttonClassName);\n\n                    visaCheckout.init(initOptions);\n                    visaCheckout.on('payment.success', (paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) =>\n                        this._paymentInstrumentSelected(paymentSuccessPayload)\n                            .catch(error => onError(error))\n                    );\n                    visaCheckout.on('payment.error', (payment, error) => onError(error));\n\n                    return signInButton;\n                })\n                .then(signInButton => { signInButton.style.visibility = 'visible'; });\n            })\n            .then(() => this._store.getState());\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via VisaCheckout, the shopper must click on \"Visa Checkout\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut('braintreevisacheckout', options)\n        );\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        return this._braintreeVisaCheckoutPaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    private _paymentInstrumentSelected(paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) {\n        const state = this._store.getState();\n\n        if (!this._paymentMethod) {\n            throw new Error('Payment method not initialized');\n        }\n\n        const { id: methodId } = this._paymentMethod;\n\n        return this._store.dispatch(\n            this._customerStrategyActionCreator.widgetInteraction(() => {\n                return this._braintreeVisaCheckoutPaymentProcessor.handleSuccess(\n                    paymentSuccessPayload,\n                    state.shippingAddress.getShippingAddress(),\n                    state.billingAddress.getBillingAddress()\n                )\n                .then(() => this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _createSignInButton(containerId: string, buttonClass: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new Error('Need a container to place the button');\n        }\n\n        return (container.querySelector('.' + buttonClass) as HTMLElement) ||\n            this._insertVisaCheckoutButton(container, buttonClass);\n    }\n\n    private _insertVisaCheckoutButton(container: Element, buttonClass: string): HTMLElement {\n        const buttonSource = 'https://secure.checkout.visa.com/wallet-services-web/xo/button.png?acceptCanadianVisaDebit=false&cobrand=true&size=154';\n        const buttonTemplate = `\n            <img\n                alt=\"Visa Checkout\"\n                class=\"v-button\"\n                role=\"button\"\n                src=\"${buttonSource}\"\n                />\n            <a class=\"v-learn v-learn-default\" style=\"text-align: right; display: block; font-size: 10px; color: #003366;\" href=\"#\" data-locale=\"en_US\">Tell Me More</a>`;\n\n        const visaCheckoutButton = document.createElement('div');\n        visaCheckoutButton.style.visibility = 'hidden';\n        visaCheckoutButton.className = buttonClass;\n        visaCheckoutButton.innerHTML = buttonTemplate;\n\n        container.appendChild(visaCheckoutButton);\n\n        return visaCheckoutButton;\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { toFormUrlEncoded } from '../../../common/http-request';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { ChasePayScriptLoader, ChasePaySuccessPayload } from '../../../payment/strategies/chasepay';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\n\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class ChasePayCustomerStrategy implements CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _chasePayScriptLoader: ChasePayScriptLoader,\n        private _requestSender: RequestSender,\n        private _formPoster: FormPoster\n    ) {}\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { chasepay: chasePayOptions, methodId } = options;\n\n        if (!chasePayOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.chasepay\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const cart = state.cart.getCart();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!cart) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCart);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.initializationData.digitalSessionId) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n\n                const { container } = chasePayOptions;\n\n                return this._chasePayScriptLoader.load(this._paymentMethod.config.testMode)\n                    .then(JPMC => {\n                        const ChasePay = JPMC.ChasePay;\n\n                        ChasePay.configure({\n                            language: storeConfig.storeProfile.storeLanguage,\n                        });\n\n                        if (ChasePay.isChasePayUp) {\n                            ChasePay.insertButtons({\n                                containers: [container],\n                            });\n                        }\n\n                        ChasePay.on(ChasePay.EventType.START_CHECKOUT, () => {\n                            this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n                                .then(() => {\n                                    const state = this._store.getState();\n                                    const method = state.paymentMethods.getPaymentMethod(methodId);\n                                    const sessionId = method && method.initializationData && method.initializationData.digitalSessionId;\n\n                                    if (sessionId) {\n                                        ChasePay.startCheckout(sessionId);\n                                    }\n                                });\n                        });\n\n                        ChasePay.on(ChasePay.EventType.COMPLETE_CHECKOUT, (payload: ChasePaySuccessPayload) => {\n                            const state = this._store.getState();\n                            const method = state.paymentMethods.getPaymentMethod(methodId);\n                            const requestId = method && method.initializationData && method.initializationData.merchantRequestId;\n\n                            if (requestId) {\n                                this._setExternalCheckoutData(payload, requestId)\n                                    .then(() => {\n                                        this._reloadPage();\n                                });\n                            }\n                        });\n                    });\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Chase Pay®, the shopper must click on \"Chase Pay®\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _setExternalCheckoutData(payload: ChasePaySuccessPayload, requestId: string): Promise<Response> {\n        const url = `checkout.php?provider=chasepay&action=set_external_checkout`;\n        const options = {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n            },\n            body: toFormUrlEncoded({\n                sessionToken: payload.sessionToken,\n                merchantRequestId: requestId,\n            }),\n            method: 'post',\n        };\n\n        return this._requestSender.sendRequest(url, options);\n    }\n\n    private _reloadPage() {\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            params: {\n                fromChasePay: true,\n            },\n        });\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport CustomerActionCreator from '../../customer-action-creator';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\n\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class DefaultCustomerStrategy implements CustomerStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _customerActionCreator: CustomerActionCreator\n    ) {}\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._customerActionCreator.signInCustomer(credentials, options)\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._customerActionCreator.signOutCustomer(options)\n        );\n    }\n\n    initialize(options?: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { GooglePayPaymentProcessor } from '../../../payment/strategies/googlepay';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nimport GooglePayCustomerInitializeOptions from './googlepay-customer-initialize-options';\n\nexport default class GooglePayCustomerStrategy implements CustomerStrategy {\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor,\n        private _formPoster: FormPoster\n    ) {}\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId }  = options;\n\n        const googlePayOptions = this._getGooglePayOptions(options);\n\n        if (!methodId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._googlePayPaymentProcessor.initialize(methodId)\n            .then(() => {\n                this._walletButton = this._createSignInButton(googlePayOptions.container);\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._walletButton && this._walletButton.parentNode) {\n            this._walletButton.parentNode.removeChild(this._walletButton);\n            this._walletButton = undefined;\n        }\n\n        return this._googlePayPaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Google Pay, the shopper must click on \"Google Pay\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n        }\n\n        const button = this._googlePayPaymentProcessor.createButton(this._handleWalletButtonClick);\n\n        container.appendChild(button);\n\n        return button;\n    }\n\n    private _getGooglePayOptions(options: CustomerInitializeOptions): GooglePayCustomerInitializeOptions {\n        if (options.methodId === 'googlepaybraintree' && options.googlepaybraintree) {\n            return options.googlepaybraintree;\n        }\n\n        if (options.methodId === 'googlepaystripe' && options.googlepaystripe) {\n            return options.googlepaystripe;\n        }\n\n        throw new InvalidArgumentError();\n    }\n\n    private _onPaymentSelectComplete(): void {\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n        });\n    }\n\n    private _onError(error?: Error): void {\n        if (error && error.message !== 'CANCELED') {\n            throw error;\n        }\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): Promise<void> {\n        event.preventDefault();\n\n        return this._googlePayPaymentProcessor.displayWallet()\n            .then(paymentData => this._googlePayPaymentProcessor.handleSuccess(paymentData)\n            .then(() => {\n                if (paymentData.shippingAddress) {\n                    this._googlePayPaymentProcessor.updateShippingAddress(paymentData.shippingAddress);\n                }\n            }))\n            .then(() => this._onPaymentSelectComplete())\n            .catch(error => this._onError(error));\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotImplementedError\n} from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { getCallbackUrl, MasterpassScriptLoader } from '../../../payment/strategies/masterpass';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\n\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class MasterpassCustomerStrategy implements CustomerStrategy {\n    private _signInButton?: HTMLElement;\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _masterpassScriptLoader: MasterpassScriptLoader\n    ) {}\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { masterpass: masterpassOptions, methodId } = options;\n\n        if (!masterpassOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.masterpass\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n                if (!this._paymentMethod || !this._paymentMethod.initializationData.checkoutId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const cart = state.cart.getCart();\n                if (!cart) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCart);\n                }\n\n                const { container } = masterpassOptions;\n\n                const payload = {\n                    checkoutId: this._paymentMethod.initializationData.checkoutId,\n                    allowedCardTypes: this._paymentMethod.initializationData.allowedCardTypes,\n                    amount: cart.cartAmount.toString(),\n                    currency: cart.currency.code,\n                    cartId: cart.id,\n                    suppressShippingAddress: false,\n                    callbackUrl: getCallbackUrl('checkout'),\n                };\n\n                return this._masterpassScriptLoader.load(this._paymentMethod.config.testMode)\n                    .then(Masterpass => {\n                        this._signInButton = this._createSignInButton(container);\n\n                        this._signInButton.addEventListener('click', () => {\n                            Masterpass.checkout(payload);\n                        });\n                    });\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        if (this._signInButton && this._signInButton.parentNode) {\n            this._signInButton.parentNode.removeChild(this._signInButton);\n            this._signInButton = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Masterpass, the shopper must click on \"Masterpass\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n        }\n\n        const button = document.createElement('input');\n\n        button.type = 'image';\n        button.src = 'https://static.masterpass.com/dyn/img/btn/global/mp_chk_btn_160x037px.svg';\n        container.appendChild(button);\n\n        return button;\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { NotImplementedError} from '../../../common/error/errors';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\n\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class SquareCustomerStrategy implements CustomerStrategy {\n\n    constructor(\n        private _store: CheckoutStore,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator\n    ) {}\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Masterpass, the shopper must click on \"Masterpass\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    initialize(options?: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { createAction, createErrorAction, Action } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport Country from './country';\nimport { CountryActionType } from './country-actions';\nimport CountryRequestSender from './country-request-sender';\n\nexport default class CountryActionCreator {\n    constructor(\n        private _countryRequestSender: CountryRequestSender\n    ) {}\n\n    loadCountries(options?: RequestOptions): Observable<Action<Country[]>> {\n        return Observable.create((observer: Observer<Action<Country[]>>) => {\n            observer.next(createAction(CountryActionType.LoadCountriesRequested));\n\n            this._countryRequestSender.loadCountries(options)\n                .then(response => {\n                    observer.next(createAction(CountryActionType.LoadCountriesSucceeded, response.body.data));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CountryActionType.LoadCountriesFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { CountryResponseBody } from './country-responses';\n\nexport default class CountryRequestSender {\n    constructor(\n        private _requestSender: RequestSender,\n        private _config: { locale?: string }\n    ) {}\n\n    loadCountries({ timeout }: RequestOptions = {}): Promise<Response<CountryResponseBody>> {\n        const url = '/internalapi/v1/store/countries';\n        const headers = {\n            'Accept-Language': this._config.locale,\n        };\n\n        return this._requestSender.get(url, { headers, timeout });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport InternalOrderRequestBody from './internal-order-request-body';\nimport { InternalOrderResponseBody } from './internal-order-responses';\nimport Order from './order';\n\nexport default class OrderRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadOrder(orderId: number, { timeout }: RequestOptions = {}): Promise<Response<Order>> {\n        const url = `/api/storefront/orders/${orderId}`;\n        const headers = { Accept: ContentType.JsonV1 };\n        const params = {\n            include: [\n                'payments',\n                'lineItems.physicalItems.socialMedia',\n                'lineItems.physicalItems.options',\n                'lineItems.digitalItems.socialMedia',\n                'lineItems.digitalItems.options',\n            ].join(','),\n        };\n\n        return this._requestSender.get(url, {\n            params,\n            headers,\n            timeout,\n        });\n    }\n\n    submitOrder(body: InternalOrderRequestBody, { timeout }: RequestOptions = {}): Promise<Response<InternalOrderResponseBody>> {\n        const url = '/internalapi/v1/checkout/order';\n\n        return this._requestSender.post(url, { body, timeout });\n    }\n\n    finalizeOrder(orderId: number, { timeout }: RequestOptions = {}): Promise<Response<InternalOrderResponseBody>> {\n        const url = `/internalapi/v1/checkout/order/${orderId}`;\n\n        return this._requestSender.post(url, { timeout });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, from, of, Observable, Observer } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { CheckoutValidator, InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport InternalOrderRequestBody from './internal-order-request-body';\nimport { FinalizeOrderAction, LoadOrderAction, LoadOrderPaymentsAction, OrderActionType, SubmitOrderAction } from './order-actions';\nimport OrderRequestBody from './order-request-body';\nimport OrderRequestSender from './order-request-sender';\n\nexport default class OrderActionCreator {\n    constructor(\n        private _orderRequestSender: OrderRequestSender,\n        private _checkoutValidator: CheckoutValidator\n    ) {}\n\n    loadOrder(orderId: number, options?: RequestOptions): Observable<LoadOrderAction> {\n        return new Observable((observer: Observer<LoadOrderAction>) => {\n            observer.next(createAction(OrderActionType.LoadOrderRequested));\n\n            this._orderRequestSender.loadOrder(orderId, options)\n                .then(response => {\n                    observer.next(createAction(OrderActionType.LoadOrderSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(OrderActionType.LoadOrderFailed, response));\n                });\n        });\n    }\n\n    // TODO: Remove when checkout does not contain unrelated order data.\n    loadOrderPayments(orderId: number, options?: RequestOptions): Observable<LoadOrderPaymentsAction> {\n        return new Observable((observer: Observer<LoadOrderPaymentsAction>) => {\n            observer.next(createAction(OrderActionType.LoadOrderPaymentsRequested));\n\n            this._orderRequestSender.loadOrder(orderId, options)\n                .then(response => {\n                    observer.next(createAction(OrderActionType.LoadOrderPaymentsSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(OrderActionType.LoadOrderPaymentsFailed, response));\n                });\n        });\n    }\n\n    loadCurrentOrder(options?: RequestOptions): ThunkAction<LoadOrderAction, InternalCheckoutSelectors> {\n        return store => defer(() => {\n            const orderId = this._getCurrentOrderId(store.getState());\n\n            if (!orderId) {\n                throw new MissingDataError(MissingDataErrorType.MissingOrderId);\n            }\n\n            return this.loadOrder(orderId, options);\n        });\n    }\n\n    submitOrder(payload: OrderRequestBody, options?: RequestOptions): ThunkAction<SubmitOrderAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(OrderActionType.SubmitOrderRequested)),\n            defer(() => {\n                const state = store.getState();\n                const externalSource = state.config.getExternalSource();\n                const checkout = state.checkout.getCheckout();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                return from(\n                    this._checkoutValidator.validate(checkout, options)\n                        .then(() => this._orderRequestSender.submitOrder(this._mapToOrderRequestBody(payload, checkout.customerMessage, externalSource), options))\n                ).pipe(\n                    switchMap(response => concat(\n                        // TODO: Remove once we can submit orders using storefront API\n                        this.loadOrder(response.body.data.order.orderId, options),\n                        of(createAction(OrderActionType.SubmitOrderSucceeded, response.body.data, { ...response.body.meta, token: response.headers.token }))\n                    ))\n                );\n            }).pipe(\n                catchError(error => throwErrorAction(OrderActionType.SubmitOrderFailed, error))\n            )\n        );\n    }\n\n    finalizeOrder(orderId: number, options?: RequestOptions): Observable<FinalizeOrderAction | LoadOrderAction> {\n        return concat(\n            of(createAction(OrderActionType.FinalizeOrderRequested)),\n            from(this._orderRequestSender.finalizeOrder(orderId, options))\n                .pipe(\n                    switchMap(response => concat(\n                        this.loadOrder(orderId, options),\n                        of(createAction(OrderActionType.FinalizeOrderSucceeded, response.body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(OrderActionType.FinalizeOrderFailed, error))\n        );\n    }\n\n    private _getCurrentOrderId(state: InternalCheckoutSelectors): number | undefined {\n        const order = state.order.getOrder();\n        const checkout = state.checkout.getCheckout();\n\n        return (order && order.orderId) || (checkout && checkout.orderId);\n    }\n\n    private _mapToOrderRequestBody(payload: OrderRequestBody, customerMessage: string, externalSource?: string): InternalOrderRequestBody {\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            return {\n                ...order,\n                customerMessage,\n                externalSource,\n            };\n        }\n\n        return {\n            ...order,\n            customerMessage,\n            externalSource,\n            payment: {\n                paymentData: payment.paymentData,\n                name: payment.methodId,\n                gateway: payment.gatewayId,\n            },\n        };\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class OrderFinalizationNotRequiredError extends StandardError {\n    constructor() {\n        super('The current order does not need to be finalized at this stage.');\n\n        this.type = 'order_finalization_not_required';\n    }\n}\n","enum PaymentStrategyType {\n    AFFIRM = 'affirm',\n    AFTERPAY = 'afterpay',\n    AMAZON = 'amazon',\n    CREDIT_CARD = 'creditcard',\n    KLARNA = 'klarna',\n    LEGACY = 'legacy',\n    OFFLINE = 'offline',\n    OFFSITE = 'offsite',\n    PAYPAL = 'paypal',\n    PAYPAL_EXPRESS = 'paypalexpress',\n    PAYPAL_EXPRESS_CREDIT = 'paypalexpresscredit',\n    SAGE_PAY = 'sagepay',\n    SQUARE = 'squarev2',\n    NO_PAYMENT_DATA_REQUIRED = 'nopaymentdatarequired',\n    BRAINTREE = 'braintree',\n    BRAINTREE_PAYPAL = 'braintreepaypal',\n    BRAINTREE_PAYPAL_CREDIT = 'braintreepaypalcredit',\n    BRAINTREE_VISA_CHECKOUT = 'braintreevisacheckout',\n    BRAINTREE_GOOGLE_PAY = 'googlepaybraintree',\n    CHASE_PAY = 'chasepay',\n    WE_PAY = 'wepay',\n    MASTERPASS = 'masterpass',\n    STRIPE_GOOGLE_PAY = 'googlepaystripe',\n    ZIP = 'zip',\n    CONVERGE = 'converge',\n}\n\nexport default PaymentStrategyType;\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, empty, of, Observable, Observer } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { LoadOrderPaymentsAction, OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../order';\nimport { OrderFinalizationNotRequiredError } from '../order/errors';\n\nimport { PaymentInitializeOptions, PaymentRequestOptions } from './payment-request-options';\nimport {\n    PaymentStrategyActionType,\n    PaymentStrategyDeinitializeAction,\n    PaymentStrategyExecuteAction,\n    PaymentStrategyFinalizeAction,\n    PaymentStrategyInitializeAction,\n    PaymentStrategyWidgetAction,\n} from './payment-strategy-actions';\nimport PaymentStrategyRegistry from './payment-strategy-registry';\nimport PaymentStrategyType from './payment-strategy-type';\nimport { PaymentStrategy } from './strategies';\n\nexport default class PaymentStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: PaymentStrategyRegistry,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: RequestOptions): ThunkAction<PaymentStrategyExecuteAction, InternalCheckoutSelectors> {\n        return store => new Observable((observer: Observer<PaymentStrategyExecuteAction>) => {\n            const state = store.getState();\n            const { payment = {} as OrderPaymentRequestBody, useStoreCredit } = payload;\n            const meta = { methodId: payment.methodId };\n\n            let strategy: PaymentStrategy;\n\n            if (state.payment.isPaymentDataRequired(useStoreCredit)) {\n                const method = state.paymentMethods.getPaymentMethod(payment.methodId, payment.gatewayId);\n\n                if (!method) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                strategy = this._strategyRegistry.getByMethod(method);\n            } else {\n                strategy = this._strategyRegistry.get(PaymentStrategyType.NO_PAYMENT_DATA_REQUIRED);\n            }\n\n            observer.next(createAction(PaymentStrategyActionType.ExecuteRequested, undefined, meta));\n\n            strategy\n                .execute(payload, { ...options, methodId: payment.methodId, gatewayId: payment.gatewayId })\n                .then(() => {\n                    observer.next(createAction(PaymentStrategyActionType.ExecuteSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(PaymentStrategyActionType.ExecuteFailed, error, meta));\n                });\n        });\n    }\n\n    finalize(options?: RequestOptions): ThunkAction<PaymentStrategyFinalizeAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(PaymentStrategyActionType.FinalizeRequested)),\n            this._loadOrderPaymentsIfNeeded(store, options),\n            defer(() => {\n                const state = store.getState();\n                const payment = state.payment.getPaymentId();\n\n                if (!payment) {\n                    throw new OrderFinalizationNotRequiredError();\n                }\n\n                const method = state.paymentMethods.getPaymentMethod(payment.providerId, payment.gatewayId);\n\n                if (!method) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                return this._strategyRegistry.getByMethod(method)\n                    .finalize({ ...options, methodId: method.id, gatewayId: method.gateway })\n                    .then(() => createAction(PaymentStrategyActionType.FinalizeSucceeded, undefined, { methodId: payment.providerId }));\n            })\n        ).pipe(\n            catchError(error => {\n                const state = store.getState();\n                const payment = state.payment.getPaymentId();\n\n                return throwErrorAction(PaymentStrategyActionType.FinalizeFailed, error, { methodId: payment && payment.providerId });\n            })\n        );\n    }\n\n    initialize(options: PaymentInitializeOptions): ThunkAction<PaymentStrategyInitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<PaymentStrategyInitializeAction>) => {\n            const state = store.getState();\n            const { methodId, gatewayId } = options;\n            const method = state.paymentMethods.getPaymentMethod(methodId, gatewayId);\n\n            if (!method) {\n                throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n            }\n\n            if (methodId && state.paymentStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(PaymentStrategyActionType.InitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.getByMethod(method)\n                .initialize({ ...options, methodId, gatewayId })\n                .then(() => {\n                    observer.next(createAction(PaymentStrategyActionType.InitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(PaymentStrategyActionType.InitializeFailed, error, { methodId }));\n                });\n        });\n    }\n\n    deinitialize(options: PaymentRequestOptions): ThunkAction<PaymentStrategyDeinitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<PaymentStrategyDeinitializeAction>) => {\n            const state = store.getState();\n            const { methodId, gatewayId } = options;\n            const method = state.paymentMethods.getPaymentMethod(methodId, gatewayId);\n\n            if (!method) {\n                throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n            }\n\n            if (methodId && !state.paymentStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(PaymentStrategyActionType.DeinitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.getByMethod(method)\n                .deinitialize({ ...options, methodId, gatewayId })\n                .then(() => {\n                    observer.next(createAction(PaymentStrategyActionType.DeinitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(PaymentStrategyActionType.DeinitializeFailed, error, { methodId }));\n                });\n        });\n    }\n\n    widgetInteraction(method: () => Promise<any>, options?: PaymentRequestOptions): ThunkAction<PaymentStrategyWidgetAction> {\n        return store => Observable.create((observer: Observer<PaymentStrategyWidgetAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(PaymentStrategyActionType.WidgetInteractionStarted, undefined, meta));\n\n            method().then(() => {\n                observer.next(createAction(PaymentStrategyActionType.WidgetInteractionFinished, undefined, meta));\n                observer.complete();\n            })\n            .catch(error => {\n                observer.error(createErrorAction(PaymentStrategyActionType.WidgetInteractionFailed, error, meta));\n            });\n        });\n    }\n\n    private _loadOrderPaymentsIfNeeded(store: ReadableCheckoutStore, options?: RequestOptions): Observable<LoadOrderPaymentsAction> {\n        const state = store.getState();\n        const checkout = state.checkout.getCheckout();\n\n        if (checkout && checkout.orderId) {\n            return this._orderActionCreator.loadOrderPayments(checkout.orderId, options);\n        }\n\n        return empty();\n    }\n}\n","import { isEqual } from 'lodash';\n\nimport { PartialDeep } from '../common/types';\n\nimport Cart from './cart';\n\nexport default class CartComparator {\n    isEqual(cartA: Cart, cartB: Cart): boolean {\n        return isEqual(\n            this._normalize(cartA),\n            this._normalize(cartB)\n        );\n    }\n\n    private _normalize(cart: Cart): PartialDeep<Cart> {\n        return {\n            cartAmount: cart.cartAmount,\n            currency: cart.currency,\n            id: cart.id,\n            lineItems: {\n                digitalItems: cart.lineItems.digitalItems\n                    .slice()\n                    .sort((itemA, itemB) =>\n                        `${itemA.productId}${itemA.variantId}`.localeCompare(`${itemB.productId}${itemB.variantId}`)\n                    )\n                    .map(item => ({\n                        extendedSalePrice: item.extendedSalePrice,\n                        productId: item.productId,\n                        quantity: item.quantity,\n                        variantId: item.variantId,\n                    })),\n                giftCertificates: cart.lineItems.giftCertificates\n                    .slice()\n                    .sort((itemA, itemB) => `${itemA.id}`.localeCompare(`${itemB.id}`))\n                    .map(item => ({\n                        amount: item.amount,\n                        recipient: item.recipient,\n                    })),\n                physicalItems: cart.lineItems.physicalItems\n                    .slice()\n                    .sort((itemA, itemB) =>\n                        `${itemA.productId}${itemA.variantId}`.localeCompare(`${itemB.productId}${itemB.variantId}`)\n                    )\n                    .map(item => ({\n                        extendedSalePrice: item.extendedSalePrice,\n                        productId: item.productId,\n                        quantity: item.quantity,\n                        variantId: item.variantId,\n                        giftWrapping: item.giftWrapping,\n                    })),\n            },\n        };\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class CartChangedError extends StandardError {\n    constructor() {\n        super('An update to your shopping cart has been detected and your available shipping costs have been updated.');\n\n        this.type = 'cart_changed';\n    }\n}\n","import { isEqual, map } from 'lodash';\n\nimport { CartComparator } from '../cart';\nimport { CartChangedError } from '../cart/errors';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { Coupon, GiftCertificate } from '../coupon';\n\nimport Checkout from './checkout';\nimport CheckoutRequestSender from './checkout-request-sender';\n\nexport default class CheckoutValidator {\n    constructor(\n        private _checkoutRequestSender: CheckoutRequestSender\n    ) {}\n\n    validate(checkout?: Checkout, options?: RequestOptions): Promise<void> {\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        return this._checkoutRequestSender.loadCheckout(checkout.id, options)\n            .then(response => {\n                const comparator = new CartComparator();\n\n                if (checkout.grandTotal === response.body.grandTotal\n                    && this._compareCoupons(checkout.coupons, response.body.coupons)\n                    && this._compareGiftCertificates(checkout.giftCertificates, response.body.giftCertificates)\n                    && comparator.isEqual(checkout.cart, response.body.cart)\n                ) {\n                    return;\n                }\n\n                throw new CartChangedError();\n            });\n    }\n\n    private _compareCoupons(couponsA: Coupon[], couponsB: Coupon[]): boolean {\n        return isEqual(map(couponsA, 'code'), map(couponsB, 'code'));\n    }\n\n    private _compareGiftCertificates(giftCertificatesA: GiftCertificate[], giftCertificatesB: GiftCertificate[]): boolean {\n        return isEqual(map(giftCertificatesA, 'code'), map(giftCertificatesB, 'code'));\n    }\n}\n","import { PaymentInstrument, VaultedInstrument } from './payment';\n\nexport default function isVaultedInstrument(instrument: PaymentInstrument): instrument is VaultedInstrument {\n    return Boolean((instrument as VaultedInstrument).instrumentId);\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { pick } from 'lodash';\nimport { concat, from, of } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { mapToInternalAddress } from '../address';\nimport { mapToInternalCart } from '../cart';\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { StandardError } from '../common/error/errors';\nimport { mapToInternalCustomer } from '../customer';\nimport { mapToInternalOrder, OrderActionCreator } from '../order';\nimport { mapToInternalShippingOption } from '../shipping';\n\nimport isVaultedInstrument from './is-vaulted-instrument';\nimport Payment from './payment';\nimport { InitializeOffsitePaymentAction, PaymentActionType, SubmitPaymentAction } from './payment-actions';\nimport PaymentMethod from './payment-method';\nimport PaymentMethodSelector from './payment-method-selector';\nimport PaymentRequestBody from './payment-request-body';\nimport PaymentRequestSender from './payment-request-sender';\n\nexport default class PaymentActionCreator {\n    constructor(\n        private _paymentRequestSender: PaymentRequestSender,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    submitPayment(payment: Payment): ThunkAction<SubmitPaymentAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(PaymentActionType.SubmitPaymentRequested)),\n            from(this._paymentRequestSender.submitPayment(\n                this._getPaymentRequestBody(payment, store.getState())\n            ))\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._orderActionCreator.loadCurrentOrder()(store),\n                        of(createAction(PaymentActionType.SubmitPaymentSucceeded, body))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(PaymentActionType.SubmitPaymentFailed, error))\n        );\n    }\n\n    initializeOffsitePayment(\n        methodId: string,\n        gatewayId?: string\n    ): ThunkAction<InitializeOffsitePaymentAction, InternalCheckoutSelectors> {\n        return store => {\n            const payload = this._getPaymentRequestBody({ gatewayId, methodId }, store.getState());\n\n            return concat(\n                of(createAction(PaymentActionType.InitializeOffsitePaymentRequested)),\n                this._paymentRequestSender.initializeOffsitePayment(payload)\n                    .then(() => createAction(PaymentActionType.InitializeOffsitePaymentSucceeded))\n            ).pipe(\n                catchError(error => throwErrorAction(PaymentActionType.InitializeOffsitePaymentFailed, error))\n            );\n        };\n    }\n\n    private _getPaymentRequestBody(payment: Payment, state: InternalCheckoutSelectors): PaymentRequestBody {\n        const billingAddress = state.billingAddress.getBillingAddress();\n        const checkout = state.checkout.getCheckout();\n        const customer = state.customer.getCustomer();\n        const order = state.order.getOrder();\n        const paymentMethod = this._getPaymentMethod(state.paymentMethods, payment.methodId, payment.gatewayId);\n        const shippingAddress = state.shippingAddress.getShippingAddress();\n        const consignments = state.consignments.getConsignments();\n        const shippingOption = state.consignments.getShippingOption();\n        const storeConfig = state.config.getStoreConfig();\n        const contextConfig = state.config.getContextConfig();\n        const instrumentMeta = state.instruments.getInstrumentsMeta();\n        const paymentMeta = state.paymentMethods.getPaymentMethodsMeta();\n        const orderMeta = state.order.getOrderMeta();\n        const internalCustomer = customer && billingAddress && mapToInternalCustomer(customer, billingAddress);\n\n        const authToken = instrumentMeta && payment.paymentData && isVaultedInstrument(payment.paymentData) ?\n            `${state.payment.getPaymentToken()}, ${instrumentMeta.vaultAccessToken}` :\n            state.payment.getPaymentToken();\n\n        if (!authToken) {\n            throw new StandardError();\n        }\n\n        return {\n            authToken,\n            paymentMethod,\n            customer: internalCustomer,\n            billingAddress: billingAddress && mapToInternalAddress(billingAddress),\n            shippingAddress: shippingAddress && mapToInternalAddress(shippingAddress, consignments),\n            shippingOption: shippingOption && mapToInternalShippingOption(shippingOption, true),\n            cart: checkout && mapToInternalCart(checkout),\n            order: order && mapToInternalOrder(order, orderMeta),\n            orderMeta,\n            payment: payment.paymentData,\n            quoteMeta: {\n                request: {\n                    ...paymentMeta,\n                    geoCountryCode: contextConfig && contextConfig.geoCountryCode,\n                },\n            },\n            source: 'bigcommerce-checkout-js-sdk',\n            store: pick(storeConfig && storeConfig.storeProfile, [\n                'storeHash',\n                'storeId',\n                'storeLanguage',\n                'storeName',\n            ]),\n        };\n    }\n\n    private _getPaymentMethod(\n        paymentMethodSelector: PaymentMethodSelector,\n        methodId: string,\n        gatewayId?: string\n    ): PaymentMethod | undefined {\n        const paymentMethod = paymentMethodSelector.getPaymentMethod(methodId, gatewayId);\n\n        if (!paymentMethod) {\n            return;\n        }\n\n        if (paymentMethod.method === 'multi-option' && !paymentMethod.gateway) {\n            return { ...paymentMethod, gateway: paymentMethod.id };\n        }\n\n        if (paymentMethod.initializationData && paymentMethod.initializationData.gateway) {\n            return { ...paymentMethod, id: paymentMethod.initializationData.gateway };\n        }\n\n        return paymentMethod;\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport PaymentRequestBody from './payment-request-body';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class PaymentRequestSender {\n    /**\n     * @constructor\n     * @param {BigpayClient} client\n     */\n    constructor(\n        private _client: any\n    ) {}\n\n    submitPayment(payload: PaymentRequestBody): Promise<Response> {\n        return new Promise((resolve, reject) => {\n            this._client.submitPayment(payload, (error: any, response: any) => {\n                if (error) {\n                    reject(this._transformResponse(error));\n                } else {\n                    resolve(this._transformResponse(response));\n                }\n            });\n        });\n    }\n\n    initializeOffsitePayment(payload: PaymentRequestBody): Promise<void> {\n        return new Promise(() => {\n            this._client.initializeOffsitePayment(payload);\n        });\n    }\n\n    private _transformResponse(response: any): Response {\n        return {\n            headers: {},\n            body: response.data,\n            status: response.status,\n            statusText: response.statusText,\n        };\n    }\n}\n","import { ReadableDataStore } from '@bigcommerce/data-store';\nimport { some } from 'lodash';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { Registry } from '../common/registry';\nimport { RegistryOptions } from '../common/registry/registry';\n\nimport PaymentMethod from './payment-method';\nimport * as paymentMethodTypes from './payment-method-types';\nimport PaymentStrategyType from './payment-strategy-type';\nimport PaymentStrategy from './strategies/payment-strategy';\n\nexport default class PaymentStrategyRegistry extends Registry<PaymentStrategy, PaymentStrategyType> {\n    constructor(\n        private _store: ReadableDataStore<InternalCheckoutSelectors>,\n        options?: PaymentStrategyRegistryOptions\n    ) {\n        super(options);\n    }\n\n    getByMethod(paymentMethod?: PaymentMethod): PaymentStrategy {\n        if (!paymentMethod) {\n            return this.get();\n        }\n\n        const token = this._getToken(paymentMethod);\n        const cacheToken = paymentMethod.gateway || paymentMethod.id;\n\n        return this.get(token, cacheToken);\n    }\n\n    private _getToken(paymentMethod: PaymentMethod): PaymentStrategyType {\n        const methodId = paymentMethod.gateway || paymentMethod.id;\n\n        if (this._hasFactoryForMethod(methodId)) {\n            return methodId;\n        }\n\n        if (paymentMethod.type === paymentMethodTypes.OFFLINE) {\n            return PaymentStrategyType.OFFLINE;\n        }\n\n        if (this._isLegacyMethod(paymentMethod)) {\n            return PaymentStrategyType.LEGACY;\n        }\n\n        if (paymentMethod.type === paymentMethodTypes.HOSTED) {\n            return PaymentStrategyType.OFFSITE;\n        }\n\n        return PaymentStrategyType.CREDIT_CARD;\n    }\n\n    private _hasFactoryForMethod(\n        methodId: string\n    ): methodId is PaymentStrategyType {\n        return this._hasFactory(methodId);\n    }\n\n    private _isLegacyMethod(paymentMethod: PaymentMethod): boolean {\n        const config = this._store.getState().config.getStoreConfig();\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        const { clientSidePaymentProviders } = config.paymentSettings;\n\n        if (!clientSidePaymentProviders || paymentMethod.gateway === 'adyen') {\n            return false;\n        }\n\n        return !some(clientSidePaymentProviders, id =>\n            paymentMethod.id === id || paymentMethod.gateway === id\n        );\n    }\n}\n\nexport interface PaymentStrategyRegistryOptions extends RegistryOptions {\n    clientSidePaymentProviders?: string[];\n}\n","import { InvalidArgumentError } from '../../common/error/errors';\n\nexport default class PaymentArgumentInvalidError extends InvalidArgumentError {\n    constructor(invalidFields?: string[]) {\n        let message = 'Unable to submit payment for the order because the payload is invalid.';\n\n        if (invalidFields) {\n            message = `${message} Make sure the following fields are provided correctly: ${invalidFields.join(', ')}.`;\n        }\n\n        super(message);\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class PaymentMethodCancelledError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Payment process was cancelled.');\n\n        this.type = 'payment_cancelled';\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError, PaymentMethodCancelledError, PaymentMethodInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { Affirm, AffirmAddress, AffirmDiscount, AffirmFailResponse, AffirmItem, AffirmRequestData, AffirmSuccessResponse } from './affirm';\nimport AffirmScriptLoader from './affirm-script-loader';\n\nexport default class AffirmPaymentStrategy implements PaymentStrategy {\n    private _affirm?: Affirm;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _affirmScriptLoader: AffirmScriptLoader\n    ) { }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(options.methodId))\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n                if (!paymentMethod || !paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const { config: { testMode }, clientToken: publicKey } = paymentMethod;\n\n                return this._affirmScriptLoader.load(publicKey, testMode);\n            })\n            .then(affirm => {\n                this._affirm = affirm;\n\n                return this._store.getState();\n            });\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const methodId = payload.payment && payload.payment.methodId;\n        const { useStoreCredit } = payload;\n        const { _affirm } = this;\n\n        if (!_affirm) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!methodId) {\n            throw new PaymentArgumentInvalidError(['payment.methodId']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder({ useStoreCredit }, options))\n            .then<AffirmSuccessResponse>(() => {\n                _affirm.checkout(this._getCheckoutInformation(useStoreCredit));\n\n                return new Promise((resolve, reject) => {\n                    _affirm.checkout.open({\n                        onFail: (failObject: AffirmFailResponse) => {\n                            failObject.reason === 'canceled' ? reject(new PaymentMethodCancelledError()) : reject(new PaymentMethodInvalidError());\n                        },\n                        onSuccess: successObject => { resolve(successObject); },\n                    });\n                    _affirm.ui.error.on('close', () => {\n                        reject(new PaymentMethodCancelledError());\n                    });\n                });\n            })\n            .then(result => {\n                const paymentPayload = {\n                    methodId,\n                    paymentData: { nonce: result.checkout_token },\n                };\n\n                return this._store.dispatch(this._paymentActionCreator.submitPayment(paymentPayload));\n            });\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._affirm) {\n            this._affirm = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _getCheckoutInformation(useStoreCredit: boolean = false): AffirmRequestData {\n        const state = this._store.getState();\n        const config = state.config.getStoreConfig();\n        const consignments = state.consignments.getConsignments();\n        const order = state.order.getOrder();\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!order) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!consignments) {\n            throw new MissingDataError(MissingDataErrorType.MissingConsignments);\n        }\n\n        const consignment = consignments[0];\n\n        if (!consignment || !consignment.selectedShippingOption) {\n            throw new MissingDataError(MissingDataErrorType.MissingConsignments);\n        }\n\n        return {\n            merchant: {\n                user_confirmation_url: config.links.checkoutLink,\n                user_cancel_url: config.links.checkoutLink,\n                user_confirmation_url_action: 'POST',\n            },\n            shipping: this._getShippingAddress(),\n            billing: this._getBillingAddress(),\n            items: this._getItems(),\n            discounts: this._getDiscounts(),\n            metadata: {\n                shipping_type: consignment.selectedShippingOption.type,\n                mode: 'modal',\n            },\n            order_id: order.orderId ? order.orderId.toString() : '',\n            shipping_amount: order.shippingCostTotal * 100,\n            tax_amount: order.taxTotal * 100,\n            total: order.orderAmount * 100,\n        };\n\n    }\n\n    private _getBillingAddress(): AffirmAddress {\n        const state = this._store.getState();\n        const billingAddress = state.billingAddress.getBillingAddress();\n\n        if (!billingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n        }\n\n        const billingInformation = {\n            name: {\n                first: billingAddress.firstName,\n                last: billingAddress.lastName,\n                full: `${billingAddress.firstName} ${billingAddress.lastName}`,\n            },\n            address: {\n                line1: billingAddress.address1,\n                line2: billingAddress.address2,\n                city: billingAddress.city,\n                state: billingAddress.stateOrProvinceCode,\n                zipcode: billingAddress.postalCode,\n                country: billingAddress.countryCode,\n            },\n            phone_number: billingAddress.phone,\n            email: billingAddress.email,\n        };\n\n        return billingInformation;\n    }\n\n    private _getShippingAddress(): AffirmAddress {\n        const state = this._store.getState();\n        const shippingAddress = state.shippingAddress.getShippingAddress();\n\n        if (!shippingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingShippingAddress);\n        }\n\n        const shippingInformation = {\n            name: {\n                first: shippingAddress.firstName,\n                last: shippingAddress.lastName,\n                full: `${shippingAddress.firstName} ${shippingAddress.lastName}`,\n            },\n            address: {\n                line1: shippingAddress.address1,\n                line2: shippingAddress.address2,\n                city: shippingAddress.city,\n                state: shippingAddress.stateOrProvinceCode,\n                zipcode: shippingAddress.postalCode,\n                country: shippingAddress.countryCode,\n            },\n            phone_number: shippingAddress.phone,\n        };\n\n        return shippingInformation;\n    }\n\n    private _getItems(): AffirmItem[] {\n        const state = this._store.getState();\n        const cart = state.cart.getCart();\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n        const items: AffirmItem[] = [];\n\n        for (const item of cart.lineItems.physicalItems) {\n            items.push({\n                display_name: item.name,\n                sku: item.sku,\n                unit_price: item.salePrice,\n                qty: item.quantity,\n                item_image_url: item.imageUrl,\n                item_url: item.url,\n            });\n        }\n\n        for (const item of cart.lineItems.digitalItems) {\n            items.push({\n                display_name: item.name,\n                sku: item.sku,\n                unit_price: item.salePrice,\n                qty: item.quantity,\n                item_image_url: item.imageUrl,\n                item_url: item.url,\n            });\n        }\n\n        if (cart.lineItems.customItems) {\n            for (const item of cart.lineItems.customItems) {\n                items.push({\n                    display_name: item.name,\n                    sku: item.sku,\n                    unit_price: item.listPrice,\n                    qty: item.quantity,\n                    item_image_url: '',\n                    item_url: '',\n                });\n            }\n        }\n\n        for (const item of cart.lineItems.giftCertificates) {\n            items.push({\n                display_name: item.name,\n                sku: '',\n                unit_price: item.amount,\n                qty: 1,\n                item_image_url: '',\n                item_url: '',\n            });\n        }\n\n        return items;\n    }\n\n    private _getDiscounts(): AffirmDiscount {\n        const state = this._store.getState();\n        const cart = state.cart.getCart();\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        const discounts: AffirmDiscount = {};\n        for (const line of cart.coupons) {\n            discounts[line.code] = {\n                discount_amount: line.discountedAmount,\n                discount_display_name: line.displayName,\n            };\n        }\n        for (const line of cart.discounts) {\n            discounts[line.id] = {\n                discount_amount: line.discountedAmount,\n                discount_display_name: line.id,\n            };\n        }\n\n        return discounts;\n    }\n\n}\n","/**\n * Used this approach as Affirm uses snipped for initializing. Please refer to Affirm documentation in: https://docs.affirm.com/Integrate_Affirm/Direct_API#1._Add_Affirm.js\n */\nexport default Function(`\n'use strict';\nreturn function loadAffirmJS(apiKey, scriptURL) {\n    var _affirm_config = {\n        public_api_key:  apiKey,\n        script:          scriptURL\n    };\n    (function(l,g,m,e,a,f,b){var d,c=l[m]||{},h=document.createElement(f),n=document.getElementsByTagName(f)[0],k=function(a,b,c){return function(){a[b]._.push([c,arguments])}};c[e]=k(c,e,\"set\");d=c[e];c[a]={};c[a]._=[];d._=[];c[a][b]=k(c,a,b);a=0;for(b=\"set add save post open empty reset on off trigger ready setProduct\".split(\" \");a<b.length;a++)d[b[a]]=k(c,e,b[a]);a=0;for(b=[\"get\",\"token\",\"url\",\"items\"];a<b.length;a++)d[b[a]]=function(){};h.async=!0;h.src=g[f];n.parentNode.insertBefore(h,n);delete g[f];d(g);l[m]=c})(window,_affirm_config,\"affirm\",\"checkout\",\"ui\",\"script\",\"ready\");\n}`)();\n","import { StandardError } from '../../../common/error/errors';\n\nimport { Affirm, AffirmHostWindow, AffirmScripts } from './affirm';\nimport loadAffirmJS from './affirmJs';\n\nexport default class AffirmScriptLoader {\n    constructor(\n        public _window: AffirmHostWindow = window\n    ) { }\n\n    load(apikey?: string, testMode?: boolean): Promise<Affirm> {\n        const scriptURI = this._getScriptURI(testMode);\n\n        loadAffirmJS(apikey, scriptURI);\n        if (!this._window.affirm) {\n            throw new StandardError();\n        }\n\n        return Promise.resolve(this._window.affirm);\n    }\n\n    private _getScriptURI(testMode: boolean = false): string {\n        const SCRIPTS_DEFAULT: AffirmScripts = {\n            PROD: '//cdn1.affirm.com/js/v2/affirm.js',\n            SANDBOX: '//cdn1-sandbox.affirm.com/js/v2/affirm.js',\n        };\n\n        return testMode ? SCRIPTS_DEFAULT.SANDBOX : SCRIPTS_DEFAULT.PROD;\n    }\n}\n","import { CheckoutStore, CheckoutValidator, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport AfterpayScriptLoader from './afterpay-script-loader';\nimport AfterpaySdk from './afterpay-sdk';\n\nexport default class AfterpayPaymentStrategy implements PaymentStrategy {\n    private _afterpaySdk?: AfterpaySdk;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutValidator: CheckoutValidator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _afterpayScriptLoader: AfterpayScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId, options.gatewayId);\n        const config = state.config.getStoreConfig();\n        const storeCountryName = config ? config.storeProfile.storeCountry : '';\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._afterpayScriptLoader.load(paymentMethod, this._mapCountryToISO2(storeCountryName))\n            .then(afterpaySdk => {\n                this._afterpaySdk = afterpaySdk;\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._afterpaySdk) {\n            this._afterpaySdk = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const paymentId = payload.payment && payload.payment.gatewayId;\n\n        if (!paymentId) {\n            throw new PaymentArgumentInvalidError(['payment.gatewayId']);\n        }\n\n        const useStoreCredit = !!payload.useStoreCredit;\n        const state = this._store.getState();\n        const config = state.config.getStoreConfig();\n        const storeCountryName = config ? config.storeProfile.storeCountry : '';\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.initializePayment(paymentId, { useStoreCredit })\n        )\n            .then(state => this._checkoutValidator.validate(state.checkout.getCheckout(), options))\n            .then(() => this._store.dispatch(\n                this._paymentMethodActionCreator.loadPaymentMethod(paymentId, options)\n            ))\n            .then(state => this._displayModal(storeCountryName, state.paymentMethods.getPaymentMethod(paymentId)))\n            // Afterpay will handle the rest of the flow so return a promise that doesn't really resolve\n            .then(() => new Promise<never>(() => {}));\n    }\n\n    finalize(options: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._remoteCheckoutActionCreator.loadSettings(options.methodId))\n            .then(state => {\n                const payment = state.payment.getPaymentId();\n                const config = state.config.getContextConfig();\n                const afterpay = state.remoteCheckout.getCheckout('afterpay');\n\n                if (!payment) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!config || !config.payment.token) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!afterpay || !afterpay.settings) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n\n                const orderPayload = {\n                    useStoreCredit: afterpay.settings.useStoreCredit,\n                };\n\n                const paymentPayload = {\n                    methodId: payment.providerId,\n                    paymentData: { nonce: config.payment.token },\n                };\n\n                return this._store.dispatch(this._orderActionCreator.submitOrder(orderPayload, options))\n                    .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment(paymentPayload)));\n            });\n    }\n\n    private _displayModal(countryName: string, paymentMethod?: PaymentMethod): void {\n        if (!this._afterpaySdk || !paymentMethod || !paymentMethod.clientToken) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        this._afterpaySdk.initialize({ countryCode: this._mapCountryToISO2(countryName)});\n        this._afterpaySdk.display({ token: paymentMethod.clientToken });\n    }\n\n    private _mapCountryToISO2(countryName: string): string {\n        switch (countryName) {\n        case 'Australia':\n            return 'AU';\n\n        case 'New Zealand':\n            return 'NZ';\n\n        case 'United States':\n            return 'US';\n\n        default:\n            return 'AU';\n        }\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport PaymentMethod from '../../payment-method';\n\nimport AfterpaySdk from './afterpay-sdk';\nimport AfterpayWindow from './afterpay-window';\n\ninterface AfterpayScripts {\n    PROD: string;\n    SANDBOX: string;\n}\n\nconst SCRIPTS_DEFAULT: AfterpayScripts = {\n    PROD: '//portal.afterpay.com/afterpay-async.js',\n    SANDBOX: '//portal-sandbox.afterpay.com/afterpay-async.js',\n};\n\nconst SCRIPTS_US: AfterpayScripts = {\n    PROD: '//portal.afterpay.com/afterpay-async.js',\n    SANDBOX: '//portal.us-sandbox.afterpay.com/afterpay-async.js',\n};\n\n/** Class responsible for loading the Afterpay SDK */\nexport default class AfterpayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    /**\n     * Loads the appropriate Afterpay SDK depending on the payment method data.\n     * @param method the payment method data\n     */\n    load(method: PaymentMethod, countryCode: string): Promise<AfterpaySdk> {\n        const testMode = method.config.testMode || false;\n        const scriptURI = this._getScriptURI(countryCode, testMode);\n\n        return this._scriptLoader.loadScript(scriptURI)\n            .then(() => (window as AfterpayWindow).AfterPay);\n    }\n\n    private _getScriptURI(countryCode: string, testMode: boolean): string {\n        if (countryCode === 'US') {\n            return testMode ? SCRIPTS_US.SANDBOX : SCRIPTS_US.PROD;\n        }\n\n        return testMode ? SCRIPTS_DEFAULT.SANDBOX : SCRIPTS_DEFAULT.PROD;\n    }\n\n}\n","import { isEqual } from 'lodash';\n\nimport { omitPrivate } from '../common/utility';\n\nimport InternalAddress from './internal-address';\n\nexport default function isInternalAddressEqual(addressA: Partial<InternalAddress>, addressB: Partial<InternalAddress>): boolean {\n    return isEqual(normalize(addressA), normalize(addressB));\n}\n\nfunction normalize(address: Partial<InternalAddress>): Partial<InternalAddress> {\n    const ignoredKeys = ['id', 'provinceCode'];\n\n    return (Object.keys(omitPrivate(address) || {}) as Array<keyof InternalAddress>)\n        .reduce(\n            (result, key) => ignoredKeys.indexOf(key) === -1 && address[key] ?\n                { ...result, [key]: address[key] } :\n                result,\n            {}\n        );\n}\n","import isPrivate from './is-private';\nimport omitDeep from './omit-deep';\n\nexport default function omitPrivate(object: any): any {\n    return omitDeep(object, (value: any, key: string) => isPrivate(key));\n}\n","import { BillingAddress } from '../billing';\n\nimport Address from './address';\nimport InternalAddress from './internal-address';\n\nexport default function mapFromInternalAddress(address: InternalAddress): Address | BillingAddress {\n    return {\n        id: address.id,\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        address1: address.addressLine1,\n        address2: address.addressLine2,\n        city: address.city,\n        stateOrProvince: address.province,\n        stateOrProvinceCode: address.provinceCode,\n        postalCode: address.postCode,\n        country: address.country,\n        countryCode: address.countryCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    };\n}\n","import { noop } from 'lodash';\n\nimport { isInternalAddressEqual, mapFromInternalAddress, mapToInternalAddress } from '../../../address';\nimport { BillingAddressActionCreator } from '../../../billing';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, RequestError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { RemoteCheckoutSynchronizationError } from '../../../remote-checkout/errors';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport AmazonPayOrderReference from './amazon-pay-order-reference';\nimport AmazonPayPaymentInitializeOptions from './amazon-pay-payment-initialize-options';\nimport AmazonPayScriptLoader from './amazon-pay-script-loader';\nimport AmazonPayWallet, { AmazonPayWalletOptions } from './amazon-pay-wallet';\nimport AmazonPayWindow from './amazon-pay-window';\n\nexport default class AmazonPayPaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _walletOptions?: AmazonPayPaymentInitializeOptions;\n    private _window: AmazonPayWindow;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { amazon: amazonOptions, methodId } = options;\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (!amazonOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.amazon\" argument is not provided.');\n        }\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._walletOptions = amazonOptions;\n        this._paymentMethod = paymentMethod;\n\n        return new Promise((resolve, reject) => {\n            const onReady = () => {\n                this._createWallet(amazonOptions)\n                    .then(resolve)\n                    .catch(reject);\n            };\n\n            this._scriptLoader.loadWidget(paymentMethod, onReady)\n                .catch(reject);\n        })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._walletOptions = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const referenceId = this._getOrderReferenceId();\n\n        if (!referenceId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!payload.payment) {\n            throw new InvalidArgumentError('Unable to proceed because \"payload.payment.methodId\" argument is not provided.');\n        }\n\n        const { payment: { paymentData, ...paymentPayload }, useStoreCredit = false } = payload;\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.initializePayment(paymentPayload.methodId, { referenceId, useStoreCredit })\n        )\n            .then(() => this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: paymentPayload,\n                }, options)\n            ))\n            .catch(error => {\n                if (error instanceof RequestError && error.body.type === 'provider_widget_error' && this._walletOptions) {\n                    return this._createWallet(this._walletOptions)\n                        .then(() => Promise.reject(error));\n                }\n\n                return Promise.reject(error);\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _getMerchantId(): string | undefined {\n        return this._paymentMethod && this._paymentMethod.config.merchantId;\n    }\n\n    private _getOrderReferenceId(): string | undefined {\n        const state = this._store.getState();\n        const amazon = state.remoteCheckout.getCheckout('amazon');\n\n        return amazon ? amazon.referenceId : undefined;\n    }\n\n    private _createWallet(options: AmazonPayPaymentInitializeOptions): Promise<AmazonPayWallet> {\n        return new Promise((resolve, reject) => {\n            const { container, onError = noop, onPaymentSelect = noop, onReady = noop } = options;\n            const referenceId = this._getOrderReferenceId();\n            const merchantId = this._getMerchantId();\n\n            if (!document.getElementById(container)) {\n                return reject(new InvalidArgumentError('Unable to create AmazonPay Wallet widget without valid container ID.'));\n            }\n\n            if (!this._window.OffAmazonPayments) {\n                return reject(new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized));\n            }\n\n            if (!merchantId) {\n                return reject(new MissingDataError(MissingDataErrorType.MissingPaymentMethod));\n            }\n\n            const walletOptions: AmazonPayWalletOptions = {\n                amazonOrderReferenceId: referenceId,\n                design: { designMode: 'responsive' },\n                scope: 'payments:billing_address payments:shipping_address payments:widget profile',\n                sellerId: merchantId,\n                onError: error => {\n                    reject(error);\n                    onError(error);\n                },\n                onPaymentSelect: orderReference => {\n                    this._synchronizeBillingAddress()\n                        .then(() => onPaymentSelect(orderReference))\n                        .catch(onError);\n                },\n                onReady: orderReference => {\n                    resolve();\n                    onReady(orderReference);\n                },\n            };\n\n            if (!walletOptions.amazonOrderReferenceId) {\n                walletOptions.onReady = orderReference => {\n                    this._updateOrderReference(orderReference)\n                        .then(() => {\n                            resolve();\n                            onReady(orderReference);\n                        })\n                        .catch(onError);\n                };\n            }\n\n            const widget = new this._window.OffAmazonPayments.Widgets.Wallet(walletOptions);\n\n            widget.bind(container);\n\n            return widget;\n        });\n    }\n\n    private _synchronizeBillingAddress(): Promise<InternalCheckoutSelectors> {\n        const referenceId = this._getOrderReferenceId();\n        const methodId = this._paymentMethod && this._paymentMethod.id;\n\n        if (!methodId || !referenceId) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.initializeBilling(methodId, { referenceId })\n        )\n            .then(state => {\n                const amazon = state.remoteCheckout.getCheckout('amazon');\n                const remoteAddress = amazon && amazon.billing && amazon.billing.address;\n                const billingAddress = state.billingAddress.getBillingAddress();\n                const internalBillingAddress = billingAddress && mapToInternalAddress(billingAddress);\n\n                if (remoteAddress === false) {\n                    throw new RemoteCheckoutSynchronizationError();\n                }\n\n                if (!remoteAddress || isInternalAddressEqual(remoteAddress, internalBillingAddress || {})) {\n                    return this._store.getState();\n                }\n\n                return this._store.dispatch(\n                    this._billingAddressActionCreator.updateAddress(mapFromInternalAddress(remoteAddress))\n                );\n            });\n    }\n\n    private _updateOrderReference(orderReference: AmazonPayOrderReference): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.updateCheckout('amazon', {\n                referenceId: orderReference.getAmazonOrderReferenceId(),\n            })\n        );\n    }\n}\n","export interface OverlayOptions {\n    background?: string;\n    id?: string;\n    transitionDuration?: number;\n}\n\nexport interface OverlayShowOptions {\n    onClick?(event: MouseEvent): void;\n}\n\nexport default class Overlay {\n    private _element: HTMLElement;\n    private _unregisterClick?: () => void;\n\n    constructor(options?: OverlayOptions) {\n        this._element = this._createElement(options);\n    }\n\n    show(options?: OverlayShowOptions): void {\n        if (this._element.parentElement) {\n            return;\n        }\n\n        this._registerClick(options);\n\n        document.body.appendChild(this._element);\n\n        // Fade In\n        setTimeout(() => this._element.style.opacity = '1');\n    }\n\n    remove(): void {\n        if (!this._element.parentElement) {\n            return;\n        }\n\n        if (this._unregisterClick) {\n            this._unregisterClick();\n        }\n\n        this._removeAfterTransition();\n\n        setTimeout(() => this._element.style.opacity = '0');\n    }\n\n    private _createElement(options?: OverlayOptions): HTMLElement {\n        const element = document.createElement('div');\n        const {\n            background = 'rgba(0, 0, 0, 0.8)',\n            id = null,\n            transitionDuration = 400,\n        } = options || {};\n\n        element.style.background = background;\n        element.style.display = 'block';\n        element.style.height = '100%';\n        element.style.left = '0px';\n        element.style.opacity = '0';\n        element.style.position = 'fixed';\n        element.style.top = '0px';\n        element.style.transition = `opacity ${transitionDuration}ms ease-out`;\n        element.style.width = '100%';\n        element.style.zIndex = '2147483647';\n\n        if (id) {\n            element.id = id;\n        }\n\n        return element;\n    }\n\n    private _registerClick(options?: OverlayShowOptions): void {\n        if (this._unregisterClick) {\n            this._unregisterClick();\n        }\n\n        if (options && options.onClick) {\n            const { onClick } = options;\n\n            this._element.addEventListener('click', onClick);\n\n            this._unregisterClick = () => {\n                this._element.removeEventListener('click', onClick);\n                this._unregisterClick = undefined;\n            };\n        }\n    }\n\n    private _removeAfterTransition(): void {\n        const handeTransition: (event: Event) => void = event => {\n            // NOTE: `event` is not correctly typed in this version of TS\n            if ((event as TransitionEvent).propertyName !== 'opacity') {\n                return;\n            }\n\n            if (this._element.parentElement) {\n                this._element.parentElement.removeChild(this._element);\n            }\n\n            this._element.removeEventListener('transitionend', handeTransition);\n        };\n\n        this._element.addEventListener('transitionend', handeTransition);\n    }\n}\n","export default class CancellablePromise<T> {\n    promise: Promise<T>;\n    cancel!: (reason?: any) => void;\n\n    constructor(promise: Promise<T>) {\n        const cancellable = new Promise<T>((resolve, reject) => {\n            this.cancel = reject;\n        });\n\n        this.promise = Promise.race([promise, cancellable]);\n    }\n}\n","import { Address } from '../../../address';\nimport { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { Overlay } from '../../../common/overlay';\nimport { CancellablePromise } from '../../../common/utility';\nimport { OrderPaymentRequestBody } from '../../../order';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport { CreditCardInstrument, NonceInstrument } from '../../payment';\n\nimport { BraintreePaypal, BraintreeRequestData } from './braintree';\nimport { BraintreePaymentInitializeOptions, BraintreeThreeDSecureOptions } from './braintree-payment-options';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\n\nexport default class BraintreePaymentProcessor {\n    private _threeDSecureOptions?: BraintreeThreeDSecureOptions;\n\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _overlay: Overlay\n    ) {}\n\n    initialize(clientToken: string, options?: BraintreePaymentInitializeOptions): void {\n        this._braintreeSDKCreator.initialize(clientToken);\n        this._threeDSecureOptions = options && options.threeDSecure;\n    }\n\n    preloadPaypal(): Promise<BraintreePaypal> {\n        return this._braintreeSDKCreator.getPaypal();\n    }\n\n    tokenizeCard(payment: OrderPaymentRequestBody, billingAddress: Address): Promise<NonceInstrument> {\n        const { paymentData } = payment;\n        const requestData = this._mapToCreditCard(paymentData as CreditCardInstrument, billingAddress);\n\n        return this._braintreeSDKCreator.getClient()\n            .then(client => client.request(requestData))\n            .then(({ creditCards }) => ({\n                nonce: creditCards[0].nonce,\n            }));\n    }\n\n    paypal(amount: number, storeLanguage: string, currency: string, offerCredit: boolean): Promise<NonceInstrument> {\n        return this._braintreeSDKCreator.getPaypal()\n            .then(paypal => {\n                this._overlay.show({\n                    onClick: () => paypal.focusWindow(),\n                });\n\n                return paypal.tokenize({\n                    amount,\n                    currency,\n                    enableShippingAddress: true,\n                    flow: 'checkout',\n                    locale: storeLanguage,\n                    offerCredit,\n                    useraction: 'commit',\n                });\n            })\n            .then(response => {\n                this._overlay.remove();\n\n                return response;\n            })\n            .catch(error => {\n                this._overlay.remove();\n\n                throw error;\n            });\n    }\n\n    verifyCard(payment: OrderPaymentRequestBody, billingAddress: Address, amount: number): Promise<NonceInstrument> {\n        if (!this._threeDSecureOptions) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const { addFrame, removeFrame } = this._threeDSecureOptions;\n\n        return Promise.all([\n            this.tokenizeCard(payment, billingAddress),\n            this._braintreeSDKCreator.get3DS(),\n        ]).then(([paymentData, threeDSecure]) => {\n            const { nonce } = paymentData;\n            const cancelVerifyCard = () => threeDSecure.cancelVerifyCard()\n                .then(response => {\n                    verification.cancel(new PaymentMethodCancelledError());\n\n                    return response;\n                });\n\n            const verification = new CancellablePromise(\n                threeDSecure.verifyCard({\n                    addFrame: (error, iframe) => {\n                        addFrame(error, iframe, cancelVerifyCard);\n                    },\n                    amount,\n                    nonce,\n                    removeFrame,\n                })\n            );\n\n            return verification.promise;\n        });\n    }\n\n    appendSessionId(processedPayment: Promise<NonceInstrument>): Promise<NonceInstrument> {\n        return processedPayment\n            .then(paymentData => Promise.all([paymentData, this._braintreeSDKCreator.getDataCollector()]))\n            .then(([paymentData, { deviceData }]) => ({ ...paymentData, deviceSessionId: deviceData }));\n    }\n\n    deinitialize(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    private _mapToCreditCard(creditCard: CreditCardInstrument, billingAddress: Address): BraintreeRequestData {\n        let streetAddress = billingAddress.address1;\n\n        if (billingAddress.address2) {\n            streetAddress = ` ${billingAddress.address2}`;\n        }\n\n        return {\n            data: {\n                creditCard: {\n                    cardholderName: creditCard.ccName,\n                    number: creditCard.ccNumber,\n                    cvv: creditCard.ccCvv,\n                    expirationDate: `${creditCard.ccExpiry.month}/${creditCard.ccExpiry.year}`,\n                    options: {\n                        validate: false,\n                    },\n                    billingAddress: {\n                        countryName: billingAddress.country,\n                        postalCode: billingAddress.postalCode,\n                        streetAddress,\n                    },\n                },\n            },\n            endpoint: 'payment_methods/credit_cards',\n            method: 'post',\n        };\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, StandardError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport isCreditCardLike from '../../is-credit-card-like';\nimport isVaultedInstrument from '../../is-vaulted-instrument';\nimport Payment, { PaymentInstrument } from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport BraintreePaymentProcessor from './braintree-payment-processor';\n\nexport default class BraintreeCreditCardPaymentStrategy implements PaymentStrategy {\n    private _is3dsEnabled?: boolean;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _braintreePaymentProcessor: BraintreePaymentProcessor\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(options.methodId))\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n                if (!paymentMethod || !paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._braintreePaymentProcessor.initialize(paymentMethod.clientToken, options.braintree);\n                this._is3dsEnabled = paymentMethod.config.is3dsEnabled;\n\n                return this._store.getState();\n            })\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return this._store.dispatch(\n            this._orderActionCreator.submitOrder(order, options)\n        )\n            .then(state =>\n                state.payment.isPaymentDataRequired(order.useStoreCredit) && payment ?\n                    this._preparePaymentData(payment) :\n                    Promise.resolve(payment as Payment)\n            )\n            .then(payment =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment(payment))\n            )\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._braintreePaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    private _handleError(error: Error): never {\n        if (error.name === 'BraintreeError') {\n            throw new StandardError(error.message);\n        }\n\n        throw error;\n    }\n\n    private _isUsingVaulting(paymentData: PaymentInstrument): boolean {\n        if (isCreditCardLike(paymentData)) {\n            return Boolean(paymentData.shouldSaveInstrument);\n        }\n\n        return isVaultedInstrument(paymentData);\n    }\n\n    private _preparePaymentData(payment: OrderPaymentRequestBody): Promise<Payment> {\n        const { paymentData } = payment;\n        const state = this._store.getState();\n\n        if (paymentData && this._isUsingVaulting(paymentData)) {\n            return Promise.resolve(payment as Payment);\n        }\n\n        const order = state.order.getOrder();\n        const billingAddress = state.billingAddress.getBillingAddress();\n\n        if (!order) {\n            throw new MissingDataError(MissingDataErrorType.MissingOrder);\n        }\n\n        if (!billingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n        }\n\n        const tokenizedCard = this._is3dsEnabled ?\n            this._braintreePaymentProcessor.verifyCard(payment, billingAddress, order.orderAmount) :\n            this._braintreePaymentProcessor.tokenizeCard(payment, billingAddress);\n\n        return this._braintreePaymentProcessor.appendSessionId(tokenizedCard)\n            .then(paymentData => ({ ...payment, paymentData }));\n    }\n}\n","import isVaultedInstrument from './is-vaulted-instrument';\nimport { CreditCardInstrument, PaymentInstrument } from './payment';\n\nexport default function isCreditCardLike(instrument: PaymentInstrument): instrument is CreditCardInstrument {\n    const card = instrument as CreditCardInstrument;\n\n    return !isVaultedInstrument(card) &&\n        typeof card.ccName === 'string' &&\n        typeof card.ccNumber === 'string' &&\n        typeof card.ccExpiry === 'object' &&\n        typeof card.ccExpiry.month === 'string' &&\n        typeof card.ccExpiry.year === 'string';\n    }\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError, PaymentMethodCancelledError } from '../../errors';\nimport Payment from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { BraintreeError } from './braintree';\nimport BraintreePaymentProcessor from './braintree-payment-processor';\nimport isBraintreeError from './is-braintree-error';\n\nexport default class BraintreePaypalPaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _braintreePaymentProcessor: BraintreePaymentProcessor,\n        private _credit: boolean = false\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintree: braintreeOptions, methodId } = options;\n\n        this._paymentMethod = this._store.getState().paymentMethods.getPaymentMethod(methodId);\n\n        if (this._paymentMethod && this._paymentMethod.nonce) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._braintreePaymentProcessor.initialize(this._paymentMethod.clientToken, braintreeOptions);\n\n                return this._braintreePaymentProcessor.preloadPaypal();\n            })\n            .then(() => this._store.getState())\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return (payment ? this._preparePaymentData(payment, order.useStoreCredit) : Promise.resolve(payment))\n            .then(payment => Promise.all([payment, this._store.dispatch(this._orderActionCreator.submitOrder(order, options))]))\n            .then(([payment]) => this._store.dispatch(this._paymentActionCreator.submitPayment(payment)))\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(options: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._braintreePaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    private _handleError(error: BraintreeError | Error): never {\n        if (!isBraintreeError(error)) {\n            throw error;\n        }\n\n        if (error.code === 'PAYPAL_POPUP_CLOSED') {\n            throw new PaymentMethodCancelledError(error.message);\n        }\n\n        throw new StandardError(error.message);\n    }\n\n    private _preparePaymentData(payment: OrderPaymentRequestBody, useStoreCredit?: boolean): Promise<Payment> {\n        const state = this._store.getState();\n        const grandTotal = state.checkout.getGrandTotal(useStoreCredit);\n        const config = state.config.getStoreConfig();\n\n        if (!grandTotal) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const { currency, storeProfile: { storeLanguage } } = config;\n        const { method, nonce } = this._paymentMethod;\n\n        if (nonce) {\n            return Promise.resolve({ ...payment, paymentData: { nonce, method } });\n        }\n\n        const tokenizedCard = this._braintreePaymentProcessor\n            .paypal(grandTotal, storeLanguage, currency.code, this._credit);\n\n        return this._braintreePaymentProcessor.appendSessionId(tokenizedCard)\n            .then(paymentData => ({ ...payment, paymentData: { ...paymentData, method } }));\n    }\n}\n","export enum ChasePayEventType {\n    StartCheckout = 'startCheckout',\n    CompleteCheckout = 'completeCheckout',\n    CancelCheckout = 'cancelCheckout',\n}\n\nexport interface ChasePayEventMap {\n    [ChasePayEventType.StartCheckout](digitalSessionId: string): void;\n    [ChasePayEventType.CompleteCheckout](payload: ChasePaySuccessPayload): void;\n    [ChasePayEventType.CancelCheckout](): void;\n}\n\nexport interface ChasePayHostWindow extends Window {\n    JPMC?: JPMC;\n}\n\nexport interface JPMC {\n    ChasePay: ChasePay;\n}\n\nexport interface ChasePaySuccessPayload {\n    sessionToken: string;\n}\n\nexport interface ChasePayInsertOptions {\n    color?: string;\n    containers?: string[];\n    height?: number;\n    width?: number;\n}\n\nexport interface ChasePayConfigureOptions {\n    language?: string;\n    zindex?: number;\n    sessionWarningTime?: number;\n    sessionTimeoutTime?: number;\n}\n\nexport interface ChasePay {\n    EventType: {\n        START_CHECKOUT: ChasePayEventType.StartCheckout;\n        COMPLETE_CHECKOUT: ChasePayEventType.CompleteCheckout;\n        CANCEL_CHECKOUT: ChasePayEventType.CancelCheckout;\n    };\n    isChasePayUp(): boolean;\n    insertButtons(options: ChasePayInsertOptions): void;\n    insertBrandings(options: ChasePayInsertOptions): void;\n    startCheckout(digitalSessionId?: string): void;\n    showLoadingAnimation(): void;\n    configure(options: ChasePayConfigureOptions): void;\n    on<ChasePayEventType extends keyof ChasePayEventMap>(eventType: ChasePayEventType, callback: ChasePayEventMap[ChasePayEventType]): {};\n}\n\nexport interface ChasePayInitializeOptions {\n    /**\n     * This container is used to host the chasepay branding logo.\n     * It should be an HTML element.\n     */\n    logoContainer: string;\n\n    /**\n     * This walletButton is used to set an event listener, provide an element ID if you want\n     * users to be able to launch the ChasePay wallet modal by clicking on a button.\n     * It should be an HTML element.\n     */\n    walletButton?: string;\n\n    /**\n     * A callback that gets called when the customer selects a payment option.\n     */\n    onPaymentSelect?(): void;\n}\n","import { BraintreeError } from './braintree';\n\nexport default function isBraintreeError(error: BraintreeError | Error): error is BraintreeError {\n    return error.name === 'BraintreeError';\n}\n","import { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, StandardError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\n\nimport BraintreeVisaCheckoutPaymentProcessor from './braintree-visacheckout-payment-processor';\nimport { VisaCheckoutPaymentSuccessPayload } from './visacheckout';\nimport VisaCheckoutScriptLoader from './visacheckout-script-loader';\n\nexport default class BraintreeVisaCheckoutPaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _braintreeVisaCheckoutPaymentProcessor: BraintreeVisaCheckoutPaymentProcessor,\n        private _visaCheckoutScriptLoader: VisaCheckoutScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintreevisacheckout: visaCheckoutOptions, methodId } = options;\n\n        if (!visaCheckoutOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.braintreevisacheckout\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const checkout = state.checkout.getCheckout();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const {\n                    onError = () => {},\n                    onPaymentSelect = () => {},\n                } = visaCheckoutOptions;\n\n                const initOptions = {\n                    locale: storeConfig.storeProfile.storeLanguage,\n                    collectShipping: false,\n                    subtotal: checkout.subtotal,\n                    currencyCode: storeConfig.currency.code,\n                };\n\n                return Promise.all([\n                    this._visaCheckoutScriptLoader.load(this._paymentMethod.config.testMode),\n                    this._braintreeVisaCheckoutPaymentProcessor.initialize(this._paymentMethod.clientToken, initOptions),\n                ])\n                .then(([visaCheckout, visaInitOptions]) => {\n                    visaCheckout.init(visaInitOptions);\n                    visaCheckout.on('payment.success', (paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) =>\n                        this._paymentInstrumentSelected(paymentSuccessPayload)\n                            .then(() => onPaymentSelect())\n                            .catch(error => onError(error))\n                    );\n                    visaCheckout.on('payment.error', (payment, error) => onError(error));\n                });\n            })\n            .then(() => this._store.getState());\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment\" argument is not provided.');\n        }\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData || !this._paymentMethod.initializationData.nonce) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { nonce } = this._paymentMethod.initializationData;\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData: { nonce } }))\n            )\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._braintreeVisaCheckoutPaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    private _paymentInstrumentSelected(paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) {\n        const state = this._store.getState();\n\n        if (!this._paymentMethod) {\n            throw new Error('Payment method not initialized');\n        }\n\n        const { id: methodId } = this._paymentMethod;\n\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            return this._braintreeVisaCheckoutPaymentProcessor.handleSuccess(\n                paymentSuccessPayload,\n                state.shippingAddress.getShippingAddress(),\n                state.billingAddress.getBillingAddress()\n            )\n            .then(() => Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId)),\n            ]));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _handleError(error: Error): never {\n        if (error.name === 'BraintreeError') {\n            throw new StandardError(error.message);\n        }\n\n        throw error;\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { Subject } from 'rxjs';\nimport { take } from 'rxjs/operators';\n\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { toFormUrlEncoded } from '../../../common/http-request';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport Payment from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\nimport { WepayRiskClient } from '../wepay';\n\nimport { ChasePay, ChasePayEventType, ChasePaySuccessPayload } from './chasepay';\nimport ChasePayInitializeOptions from './chasepay-initialize-options';\nimport ChasePayScriptLoader from './chasepay-script-loader';\n\nexport default class ChasePayPaymentStrategy implements PaymentStrategy {\n    private _chasePayClient?: ChasePay;\n    private _methodId!: string;\n    private _walletButton?: HTMLElement;\n    private _walletEvent$: Subject<{ type: ChasePayEventType }>;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _requestSender: RequestSender,\n        private _chasePayScriptLoader: ChasePayScriptLoader,\n        private _wepayRiskClient: WepayRiskClient\n    ) {\n        this._walletEvent$ = new Subject();\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._methodId = options.methodId;\n\n        if (!options.chasepay) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.chasepay\" argument is not provided.');\n        }\n\n        const walletButton = options.chasepay.walletButton && document.getElementById(options.chasepay.walletButton);\n\n        if (walletButton) {\n            this._walletButton = walletButton;\n            this._walletButton.addEventListener('click', this._handleWalletButtonClick);\n        }\n\n        return this._configureWallet(options.chasepay)\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._walletButton) {\n            this._walletButton.removeEventListener('click', this._handleWalletButtonClick);\n        }\n\n        this._walletButton = undefined;\n        this._chasePayClient = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._getPayment()\n            .catch(error => {\n                if (error.subtype === MissingDataErrorType.MissingPayment) {\n                    return this._displayWallet()\n                        .then(() => this._getPayment());\n                }\n\n                throw error;\n            })\n            .then(payment =>\n                this._createOrder(payment, payload.useStoreCredit, options)\n            );\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _configureWallet(options: ChasePayInitializeOptions): Promise<void> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        return this._chasePayScriptLoader.load(paymentMethod.config.testMode)\n            .then(({ ChasePay }) => {\n                this._chasePayClient = ChasePay;\n\n                if (options.logoContainer && document.getElementById(options.logoContainer)) {\n                    this._chasePayClient.insertBrandings({\n                        color: 'white',\n                        containers: [options.logoContainer],\n                    });\n                }\n\n                this._chasePayClient.configure({\n                    language: storeConfig.storeProfile.storeLanguage,\n                });\n\n                this._chasePayClient.on(ChasePayEventType.CancelCheckout, () => {\n                    this._walletEvent$.next({ type: ChasePayEventType.CancelCheckout });\n\n                    if (options.onCancel) {\n                        options.onCancel();\n                    }\n                });\n\n                this._chasePayClient.on(ChasePayEventType.CompleteCheckout, (payload: ChasePaySuccessPayload) => {\n                    this._setSessionToken(payload.sessionToken)\n                        .then(() => {\n                            this._walletEvent$.next({ type: ChasePayEventType.CompleteCheckout });\n\n                            if (options.onPaymentSelect) {\n                                options.onPaymentSelect();\n                            }\n                        });\n                });\n            });\n    }\n\n    private _displayWallet(): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(this._methodId))\n                .then(state => {\n                    const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n\n                    if (!this._chasePayClient) {\n                        throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                    }\n\n                    if (!paymentMethod) {\n                        throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                    }\n\n                    this._chasePayClient.showLoadingAnimation();\n                    this._chasePayClient.startCheckout(paymentMethod.initializationData.digitalSessionId);\n                });\n\n            // Wait for payment selection\n            return new Promise((resolve, reject) => {\n                this._walletEvent$\n                    .pipe(take(1))\n                    .subscribe((event: { type: ChasePayEventType }) => {\n                        if (event.type === ChasePayEventType.CancelCheckout) {\n                            reject(new PaymentMethodCancelledError());\n                        } else if (event.type === ChasePayEventType.CompleteCheckout) {\n                            resolve();\n                        }\n                    });\n            });\n        }, { methodId: this._methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _setSessionToken(sessionToken: string): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n        const merchantRequestId = paymentMethod && paymentMethod.initializationData.merchantRequestId;\n\n        return this._requestSender.post('checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n            },\n            body: toFormUrlEncoded({\n                action: 'set_external_checkout',\n                provider: this._methodId,\n                sessionToken,\n                merchantRequestId,\n            }),\n        })\n            // Re-hydrate checkout data\n            .then(() => Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(this._methodId)),\n            ]))\n            .then(() => this._store.getState());\n    }\n\n    private _getPayment(): Promise<Payment> {\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(this._methodId))\n            .then(() => {\n                if (this._methodId === 'wepay') {\n                    return this._wepayRiskClient.initialize()\n                        .then(client => client.getRiskToken());\n                }\n\n                return '';\n            })\n            .then(riskToken => {\n                const state = this._store.getState();\n                const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!paymentMethod.initializationData.paymentCryptogram) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPayment);\n                }\n\n                const paymentData = {\n                    method: this._methodId,\n                    cryptogramId: paymentMethod.initializationData.paymentCryptogram,\n                    eci: paymentMethod.initializationData.eci,\n                    transactionId: btoa(paymentMethod.initializationData.reqTokenId),\n                    ccExpiry: {\n                        month: paymentMethod.initializationData.expDate.toString().substr(0, 2),\n                        year: paymentMethod.initializationData.expDate.toString().substr(2, 2),\n                    },\n                    ccNumber: paymentMethod.initializationData.accountNum,\n                    accountMask: paymentMethod.initializationData.accountMask,\n                    extraData: riskToken ? { riskToken } : undefined,\n                };\n\n                return {\n                    methodId: this._methodId,\n                    paymentData,\n                };\n            });\n    }\n\n    private _createOrder(payment: Payment, useStoreCredit?: boolean, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._orderActionCreator.submitOrder({ useStoreCredit }, options))\n            .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment(payment)));\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): void {\n        event.preventDefault();\n\n        this._displayWallet();\n    }\n}\n","export default interface SquarePaymentForm {\n    build(): void;\n    requestCardNonce(): void;\n    setPostalCode(postalCode: string): void;\n}\n\nexport interface SquarePaymentFormConstructor {\n    new(options: SquareFormOptions): SquarePaymentForm;\n}\n\nexport interface SquareFormOptions {\n    applicationId: string;\n    env: string;\n    locationId: string;\n    inputClass?: string;\n    inputStyles?: string[];\n    callbacks?: SquareFormCallbacks;\n    cardNumber: SquareFormElement;\n    cvv: SquareFormElement;\n    expirationDate: SquareFormElement;\n    postalCode: SquareFormElement;\n    masterpass: SquareFormElement;\n}\nexport interface LineItem {\n    label: string;\n    amount: string;\n    pending: boolean;\n}\n\nexport interface SquarePaymentRequest {\n    requestShippingAddress: boolean;\n    requestBillingInfo: boolean;\n    shippingContact?: Contact;\n    countryCode: string;\n    currencyCode: string;\n    lineItems?: LineItem[];\n    total: LineItem;\n}\n\nexport interface NonceGenerationError {\n    type: string;\n    message: string;\n    field: string;\n}\n\nexport interface CardData {\n    card_brand: CardBrand;\n    last_4: number;\n    exp_month: number;\n    exp_year: number;\n    billing_postal_code: string;\n    digital_wallet_type: DigitalWalletType;\n}\n\nexport interface Contact {\n    familyName: string;\n    givenName: string;\n    email: string;\n    country: string;\n    countryName: string;\n    region: string;\n    city: string;\n    addressLines: string[];\n    postalCode: string;\n    phone: string;\n}\n\nexport enum CardBrand {\n    americanExpress = 'AMERICAN_EXPRESS',\n    discover = 'DISCOVER',\n    discoverDiners = 'DISCOVER_DINERS',\n    JCB = 'JCB',\n    masterCard = 'MASTERCARD',\n    unionPay = 'CHINA_UNIONPAY',\n    unknown = 'OTHER_BRAND',\n    visa = 'VISA',\n    squareGift = 'SQUARE_GIFT_CARD',\n}\n\nexport enum DigitalWalletType {\n    applePay = 'APPLEPAY',\n    masterpass = 'MASTERPASS',\n    none = 'NONE',\n}\n\n/**\n * Configures any form element provided by Square payment.\n */\nexport interface SquareFormElement {\n    /**\n     * The ID of the container which the form element should insert into.\n     */\n    elementId: string;\n\n    /**\n     * The placeholder text to use for the form element, if provided.\n     */\n    placeholder?: string;\n}\n\nexport interface SquareFormCallbacks {\n    paymentFormLoaded?(form: SquarePaymentForm): void;\n    unsupportedBrowserDetected?(): void;\n    cardNonceResponseReceived?(\n        errors?: NonceGenerationError[],\n        nonce?: string,\n        cardData?: CardData,\n        billingContact?: Contact,\n        shippingContact?: Contact): void;\n    methodsSupported?(methods: { [key: string]: boolean }): void;\n    createPaymentRequest?(): void;\n}\n\nexport type SquareFormFactory = (options: SquareFormOptions) => SquarePaymentForm;\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { some } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { RequestError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class ConvergePaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _formPoster: FormPoster\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            )\n            .catch(error => {\n                if (!(error instanceof RequestError) || !some(error.body.errors, { code: 'three_d_secure_required' })) {\n                    return Promise.reject(error);\n                }\n\n                return new Promise(() => {\n                    this._formPoster.postForm(error.body.three_ds_result.acs_url, {\n                        PaReq: error.body.three_ds_result.payer_auth_request,\n                        TermUrl: error.body.three_ds_result.callback_url,\n                        MD: error.body.three_ds_result.merchant_data,\n                    });\n                });\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n\n        if (order && state.payment.getPaymentStatus() === paymentStatusTypes.FINALIZE) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\n\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class CreditCardPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            );\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n} from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { GooglePaymentData, PaymentMethodData } from './googlepay';\nimport GooglePayPaymentInitializeOptions from './googlepay-initialize-options';\nimport GooglePayPaymentProcessor from './googlepay-payment-processor';\n\nexport default class GooglePayPaymentStrategy implements PaymentStrategy {\n    private _googlePayOptions?: GooglePayPaymentInitializeOptions;\n    private _methodId?: string;\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._methodId = options.methodId;\n\n        return this._googlePayPaymentProcessor.initialize(this._methodId)\n            .then(() => {\n                this._googlePayOptions = this._getGooglePayOptions(options);\n\n                if (!this._googlePayOptions) {\n                    throw new InvalidArgumentError('Unable to initialize payment because \"options.googlepay\" argument is not provided.');\n                }\n\n                const walletButton = this._googlePayOptions.walletButton && document.getElementById(this._googlePayOptions.walletButton);\n\n                if (walletButton) {\n                    this._walletButton = walletButton;\n                    this._walletButton.addEventListener('click', this._handleWalletButtonClick);\n                }\n\n                return this._store.getState();\n            });\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._walletButton) {\n            this._walletButton.removeEventListener('click', this._handleWalletButtonClick);\n        }\n\n        this._walletButton = undefined;\n\n        return this._googlePayPaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!this._googlePayOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.googlepay\" argument is not provided.');\n        }\n\n        const {\n            onError = () => {},\n            onPaymentSelect = () => {},\n        } = this._googlePayOptions;\n\n        return Promise.resolve(this._getPayment())\n            .then(payment => {\n                if (!payment.paymentData.nonce || !payment.paymentData.cardInformation) {\n                    // TODO: Find a way to share the code with _handleWalletButtonClick method\n                    return this._googlePayPaymentProcessor.displayWallet()\n                        .then(paymentData => this._paymentInstrumentSelected(paymentData))\n                        .then(() => onPaymentSelect())\n                        .then(() => this._getPayment())\n                        .catch(error => {\n                            if (error.statusCode !== 'CANCELED') {\n                                onError(error);\n                            }\n                        });\n                }\n\n                return payment;\n            })\n            .then(payment =>\n                this._store.dispatch(this._orderActionCreator.submitOrder({ useStoreCredit: payload.useStoreCredit }, options))\n                    .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment(this._getPayment())))\n            );\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _paymentInstrumentSelected(paymentData: GooglePaymentData) {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const methodId = this._methodId;\n\n        // TODO: Revisit how we deal with GooglePaymentData after receiving it from Google\n        return this._googlePayPaymentProcessor.handleSuccess(paymentData)\n            .then(() => Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId)),\n            ]));\n    }\n\n    private _getGooglePayOptions(options: PaymentInitializeOptions): GooglePayPaymentInitializeOptions {\n        if (options.methodId === 'googlepaybraintree' && options.googlepaybraintree) {\n            return options.googlepaybraintree;\n        }\n\n        if (options.methodId === 'googlepaystripe' && options.googlepaystripe) {\n            return options.googlepaystripe;\n        }\n\n        throw new InvalidArgumentError();\n    }\n\n    private _getPayment(): PaymentMethodData {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!paymentMethod.initializationData.nonce) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        const paymentData = {\n            method: this._methodId,\n            nonce: paymentMethod.initializationData.nonce,\n            cardInformation: paymentMethod.initializationData.card_information,\n        };\n\n        return {\n            methodId: this._methodId,\n            paymentData,\n        };\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): Promise<InternalCheckoutSelectors> {\n        event.preventDefault();\n\n        if (!this._methodId || !this._googlePayOptions) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const methodId = this._methodId;\n\n        const {\n            onError = () => {},\n            onPaymentSelect = () => {},\n        } = this._googlePayOptions;\n\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            return this._googlePayPaymentProcessor.displayWallet()\n                .then(paymentData => this._paymentInstrumentSelected(paymentData))\n                .then(() => onPaymentSelect())\n                .catch(error => {\n                    if (error.statusCode !== 'CANCELED') {\n                        onError(error);\n                    }\n                });\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n}\n","import { includes } from 'lodash';\n\nimport { Address } from '../../../address';\nimport BillingAddress from '../../../billing/billing-address';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType\n} from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport PaymentMethodInvalidError from '../../errors/payment-method-invalid-error';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport KlarnaCredit, { KlarnaAddress, KlarnaLoadResponse, KlarnaUpdateSessionParams } from './klarna-credit';\nimport KlarnaScriptLoader from './klarna-script-loader';\n\nexport default class KlarnaPaymentStrategy implements PaymentStrategy {\n    private _klarnaCredit?: KlarnaCredit;\n    private _unsubscribe?: (() => void);\n    private _supportedEUCountries = ['AT', 'DE', 'DK', 'FI', 'GB', 'NL', 'NO', 'SE', 'CH'];\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _klarnaScriptLoader: KlarnaScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return this._klarnaScriptLoader.load()\n            .then(klarnaCredit => { this._klarnaCredit = klarnaCredit; })\n            .then(() => {\n                this._unsubscribe = this._store.subscribe(\n                    state => {\n                        if (state.paymentStrategies.isInitialized(options.methodId)) {\n                            this._loadWidget(options);\n                        }\n                    },\n                    state => {\n                        const checkout = state.checkout.getCheckout();\n\n                        return checkout && checkout.grandTotal;\n                    }\n                );\n\n                return this._loadWidget(options);\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._unsubscribe) {\n            this._unsubscribe();\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!payload.payment) {\n            throw new InvalidArgumentError('Unable to proceed because \"payload.payment\" argument is not provided.');\n        }\n\n        const { payment: { paymentData, ...paymentPayload } } = payload;\n\n        return this._authorize()\n            .then(({ authorization_token: authorizationToken }) => this._store.dispatch(\n                this._remoteCheckoutActionCreator.initializePayment(paymentPayload.methodId, { authorizationToken })\n            ))\n            .then(() => this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: paymentPayload,\n                    // Note: API currently doesn't support using Store Credit with Klarna.\n                    // To prevent deducting customer's store credit, set it as false.\n                    useStoreCredit: false,\n                }, options)\n            ));\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _loadWidget(options: PaymentInitializeOptions): Promise<KlarnaLoadResponse> {\n        if (!options.klarna) {\n            throw new InvalidArgumentError('Unable to load widget because \"options.klarna\" argument is not provided.');\n        }\n\n        const { methodId, klarna: { container, onLoad } } = options;\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise<KlarnaLoadResponse>((resolve, reject) => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n                const billingAddress = state.billingAddress.getBillingAddress();\n                const shippingAddress = state.shippingAddress.getShippingAddress();\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!billingAddress) {\n                    throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n                }\n\n                if (!this._klarnaCredit || !paymentMethod.clientToken) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n\n                const updateSessionData = this._getUpdateSessionData(billingAddress, shippingAddress);\n\n                this._klarnaCredit.init({ client_token: paymentMethod.clientToken });\n\n                this._klarnaCredit.load({ container }, updateSessionData, response => {\n                    if (onLoad) {\n                        onLoad(response);\n                    }\n\n                    if (!response.show_form) {\n                        reject(new PaymentMethodInvalidError());\n                    } else {\n                        resolve(response);\n                    }\n                });\n            }));\n    }\n\n    private _getUpdateSessionData(billingAddress: BillingAddress, shippingAddress?: Address): KlarnaUpdateSessionParams {\n        if (!includes(this._supportedEUCountries, billingAddress.countryCode)) {\n            return {};\n        }\n\n        const data: KlarnaUpdateSessionParams = {\n            billing_address: this._mapToKlarnaAddress(billingAddress, billingAddress.email),\n        };\n\n        if (shippingAddress) {\n            data.shipping_address = this._mapToKlarnaAddress(shippingAddress, billingAddress.email);\n        }\n\n        return data;\n    }\n\n    private _mapToKlarnaAddress(address: Address, email?: string): KlarnaAddress {\n        return {\n            street_address: address.address1,\n            city: address.city,\n            country: address.countryCode,\n            given_name: address.firstName,\n            family_name: address.lastName,\n            postal_code: address.postalCode,\n            region: address.stateOrProvince,\n            email,\n        };\n    }\n\n    private _authorize(): Promise<any> {\n        return new Promise((resolve, reject) => {\n            if (!this._klarnaCredit) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            this._klarnaCredit.authorize({}, res => {\n                if (res.approved) {\n                    return resolve(res);\n                }\n\n                if (res.show_form) {\n                    return reject(new PaymentMethodCancelledError());\n                }\n\n                reject(new PaymentMethodInvalidError());\n            });\n        });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport KlarnaCredit from './klarna-credit';\nimport KlarnaWindow from './klarna-window';\n\nconst SDK_URL = '//credit.klarnacdn.net/lib/v1/api.js';\n\nexport default class KlarnaScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    load(): Promise<KlarnaCredit> {\n        return this._scriptLoader.loadScript(SDK_URL)\n            .then(() => (window as KlarnaWindow).Klarna.Credit);\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\n\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class LegacyPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options));\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport getCallbackUrl from './get-callback-url';\nimport { Masterpass, MasterpassCheckoutOptions } from './masterpass';\nimport MasterpassScriptLoader from './masterpass-script-loader';\n\nexport default class MasterpassPaymentStrategy implements PaymentStrategy {\n    private _masterpassClient?: Masterpass;\n    private _paymentMethod?: PaymentMethod;\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _masterpassScriptLoader: MasterpassScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId } = options;\n\n        this._paymentMethod = this._store.getState().paymentMethods.getPaymentMethod(methodId);\n\n        if (!this._paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._masterpassScriptLoader.load(this._paymentMethod.config.testMode)\n            .then(masterpass => {\n                this._masterpassClient = masterpass;\n\n                if (!options.masterpass) {\n                    throw new InvalidArgumentError('Unable to initialize payment because \"options.masterpass\" argument is not provided.');\n                }\n\n                const walletButton  = options.masterpass.walletButton && document.getElementById(options.masterpass.walletButton);\n\n                if (walletButton) {\n                    this._walletButton = walletButton;\n                    this._walletButton.addEventListener('click', this._handleWalletButtonClick);\n                }\n\n                return this._store.getState();\n            });\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        if (this._walletButton) {\n            this._walletButton.removeEventListener('click', this._handleWalletButtonClick);\n        }\n\n        this._walletButton = undefined;\n        this._masterpassClient = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment } = payload;\n        const order = { useStoreCredit: payload.useStoreCredit };\n\n        if (!payment) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment\" argument is not provided.');\n        }\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData || !this._paymentMethod.initializationData.gateway) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        // TODO: Refactor the API endpoint to return nonce in the right place.\n        const paymentData = this._paymentMethod.initializationData.paymentData;\n\n        // TODO: Redirect to Masterpass if nonce has not been generated yet. And then finalise the order when the shopper is redirected back to the checkout page.\n        if (!paymentData) {\n            throw new InvalidArgumentError('Unable to proceed because \"paymentMethod.initializationData.paymentData\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData })));\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _createMasterpassPayload(): MasterpassCheckoutOptions {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return {\n            checkoutId: this._paymentMethod.initializationData.checkoutId,\n            allowedCardTypes: this._paymentMethod.initializationData.allowedCardTypes,\n            amount: checkout.subtotal.toFixed(2),\n            currency: storeConfig.currency.code,\n            cartId: checkout.cart.id,\n            suppressShippingAddress: false,\n            callbackUrl: getCallbackUrl('checkout'),\n        };\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event) {\n        event.preventDefault();\n\n        if (!this._masterpassClient) {\n            return;\n        }\n\n        const payload = this._createMasterpassPayload();\n        this._masterpassClient.checkout(payload);\n    }\n}\n","import { omit } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\n\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class NoPaymentDataRequiredPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._orderActionCreator.submitOrder(omit(orderRequest, 'payment'), options)\n        );\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\n\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class OfflinePaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const action = this._orderActionCreator.submitOrder({\n            ...payload,\n            payment: payload.payment ? { methodId: payload.payment.methodId } : undefined,\n        }, options);\n\n        return this._store.dispatch(action);\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\n\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class OffsitePaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const orderPayload = this._shouldSubmitFullPayload(payment) ? payload : order;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(orderPayload, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.initializeOffsitePayment(payment.methodId, payment.gatewayId))\n            );\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n        const status = state.payment.getPaymentStatus();\n\n        if (order && (status === paymentStatusTypes.ACKNOWLEDGE || status === paymentStatusTypes.FINALIZE)) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _shouldSubmitFullPayload(payment?: OrderPaymentRequestBody): boolean {\n        // FIXME: A temporary workaround to support offsite payment methods\n        // where their return URL needs to be provided by the core app.\n        if (!payment) {\n            return false;\n        }\n\n        return payment.gatewayId === 'adyen' || payment.methodId === 'ccavenuemars';\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\n\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class PaypalProPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._isPaymentAcknowledged()) {\n            return this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: payload.payment ? { methodId: payload.payment.methodId } : undefined,\n                }, options)\n            );\n        }\n\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            );\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _isPaymentAcknowledged(): boolean {\n        const state = this._store.getState();\n\n        return state.payment.getPaymentStatus() === paymentStatusTypes.ACKNOWLEDGE;\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\nimport PaymentStrategy from '../payment-strategy';\n\nimport PaypalScriptLoader from './paypal-script-loader';\nimport { PaypalHostWindow, PaypalSDK } from './paypal-sdk';\n\nexport default class PaypalExpressPaymentStrategy implements PaymentStrategy {\n    private _paypalSdk?: PaypalSDK;\n    private _paymentMethod?: PaymentMethod;\n    private _useRedirectFlow: boolean = false;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _scriptLoader: PaypalScriptLoader,\n        private _window: PaypalHostWindow = window\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n\n        this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n        this._useRedirectFlow = (options.paypalexpress && options.paypalexpress.useRedirectFlow) === true;\n\n        if (!this._isInContextEnabled()) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._scriptLoader.loadPaypal()\n            .then(paypal => {\n                this._paypalSdk = paypal;\n\n                if (!this._paymentMethod || !this._paymentMethod.config.merchantId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._paypalSdk.checkout.setup(this._paymentMethod.config.merchantId, {\n                    button: 'paypal-button',\n                    environment: this._paymentMethod.config.testMode ? 'sandbox' : 'production',\n                });\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._isInContextEnabled() && this._paypalSdk) {\n            this._paypalSdk.checkout.closeFlow();\n            this._paypalSdk = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const paypal = this._paypalSdk;\n\n        if (this._isAcknowledgedOrFinalized()) {\n            return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options));\n        }\n\n        if (!this._isInContextEnabled() || this._useRedirectFlow) {\n            return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options))\n                .then(state => {\n                    const redirectUrl = state.payment.getPaymentRedirectUrl();\n\n                    if (redirectUrl) {\n                        this._window.top.location.href = redirectUrl;\n                    }\n\n                    // We need to hold execution so the consumer does not redirect us somewhere else\n                    return new Promise<never>(() => {});\n                });\n        }\n\n        if (!paypal) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        paypal.checkout.initXO();\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options))\n            .then(state => {\n                const redirectUrl = state.payment.getPaymentRedirectUrl();\n\n                if (redirectUrl) {\n                    paypal.checkout.startFlow(redirectUrl);\n                }\n\n                // We need to hold execution so the consumer does not redirect us somewhere else\n                return new Promise<never>(() => {});\n            })\n            .catch(error => {\n                paypal.checkout.closeFlow();\n\n                return Promise.reject(error);\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n\n        if (order && this._isAcknowledgedOrFinalized()) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _isAcknowledgedOrFinalized(): boolean {\n        const state = this._store.getState();\n\n        return state.payment.getPaymentStatus() === paymentStatusTypes.ACKNOWLEDGE\n            || state.payment.getPaymentStatus() === paymentStatusTypes.FINALIZE;\n    }\n\n    private _isInContextEnabled(): boolean {\n        return !!(this._paymentMethod && this._paymentMethod.config.merchantId);\n    }\n}\n","import { some } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { RequestError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\n\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class SagePayPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _formPoster: any\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            )\n            .catch(error => {\n                if (!(error instanceof RequestError) || !some(error.body.errors, { code: 'three_d_secure_required' })) {\n                    return Promise.reject(error);\n                }\n\n                return new Promise(() => {\n                    this._formPoster.postForm(error.body.three_ds_result.acs_url, {\n                        PaReq: error.body.three_ds_result.payer_auth_request,\n                        TermUrl: error.body.three_ds_result.callback_url,\n                        MD: error.body.three_ds_result.merchant_data,\n                    });\n                });\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n\n        if (order && state.payment.getPaymentStatus() === paymentStatusTypes.FINALIZE) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import StandardError from './standard-error';\n\nexport default class UnsupportedBrowserError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unsupported browser error');\n\n        this.type = 'unsupported_browser';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\nimport { omit } from 'lodash';\nimport { noop } from 'rxjs';\n\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    StandardError,\n    TimeoutError,\n    UnsupportedBrowserError,\n} from '../../../common/error/errors';\nimport { toFormUrlEncoded } from '../../../common/http-request';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { NonceInstrument } from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\n\nimport SquarePaymentForm, {\n    CardData,\n    Contact,\n    DigitalWalletType,\n    NonceGenerationError,\n    SquareFormElement,\n    SquareFormOptions,\n    SquarePaymentRequest\n} from './square-form';\nimport SquarePaymentInitializeOptions from './square-payment-initialize-options';\nimport SquareScriptLoader from './square-script-loader';\n\nexport default class SquarePaymentStrategy implements PaymentStrategy {\n    private _deferredRequestNonce?: DeferredPromise;\n    private _paymentForm?: SquarePaymentForm;\n    private _paymentMethod?: PaymentMethod;\n    private _squareOptions?: SquarePaymentInitializeOptions;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _requestSender: RequestSender,\n        private _scriptLoader: SquareScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId } = options;\n\n        this._syncPaymentMethod(methodId);\n\n        return this._scriptLoader.load()\n            .then(createSquareForm =>\n                new Promise((resolve, reject) => {\n                    this._paymentForm = createSquareForm(\n                        this._getFormOptions(options, { resolve, reject })\n                    );\n                    this._paymentForm.build();\n                }))\n            .then(() => this._store.getState());\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment } = orderRequest;\n\n        if (!payment || !payment.methodId) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment.methodId\" argument is not provided.');\n        }\n\n        this._syncPaymentMethod(payment.methodId);\n\n        return this._getNonceInstrument(payment.methodId)\n            .then(paymentData =>\n                this._store.dispatch(this._orderActionCreator.submitOrder(omit(orderRequest, 'payment'), options))\n                .then(() =>\n                    this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n                ));\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _syncPaymentMethod(methodId: string): void {\n        const state = this._store.getState();\n        this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n    }\n\n    private _getCountryCode(countryName: string) {\n        switch (countryName.toUpperCase()) {\n            case 'NEW ZELAND':\n                return 'NZ';\n            case 'AUSTRALIA':\n                return 'AU';\n            default:\n                return 'US';\n        }\n    }\n\n    private _getNonceInstrument(methodId: string): Promise<NonceInstrument> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (paymentMethod) {\n            const { initializationData } = paymentMethod;\n            if (initializationData && initializationData.paymentData.nonce) {\n                return Promise.resolve({ nonce: paymentMethod.initializationData.paymentData.nonce });\n            }\n        }\n\n        return new Promise<NonceInstrument>((resolve, reject) => {\n            if (!this._paymentForm) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            if (this._deferredRequestNonce) {\n                this._deferredRequestNonce.reject(new TimeoutError());\n            }\n\n            this._deferredRequestNonce = { resolve, reject };\n            this._paymentForm.requestCardNonce();\n        });\n    }\n\n    private _getFormOptions(options: PaymentInitializeOptions, deferred: DeferredPromise): SquareFormOptions {\n        const { square: squareOptions } = options;\n\n        if (!squareOptions || !this._paymentMethod) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.square\" argument is not provided.');\n        }\n\n        this._squareOptions = squareOptions;\n\n        return {\n            ...this._squareOptions,\n            ...this._paymentMethod.initializationData,\n            callbacks: {\n                cardNonceResponseReceived: (errors, nonce, cardData, billingContact, shippingContact) => {\n                    if (cardData && cardData.digital_wallet_type !== DigitalWalletType.none) {\n                        this._handleWalletNonceResponse(errors, nonce, cardData, billingContact, shippingContact);\n                    } else {\n                        this._handleCardNonceResponse(errors, nonce);\n                    }\n                },\n                createPaymentRequest: () => this._paymentRequestPayload(),\n                methodsSupported: methods => {\n                    const { masterpass } = squareOptions;\n\n                    if (masterpass) {\n                        this._showPaymentMethods(methods, masterpass);\n                    }\n                },\n                paymentFormLoaded: () => {\n                    deferred.resolve();\n                    this._setPostalCode();\n                },\n                unsupportedBrowserDetected: () => deferred.reject(new UnsupportedBrowserError()),\n            },\n        };\n    }\n\n    private _handleWalletNonceResponse(\n        errors?: NonceGenerationError[],\n        nonce?: string,\n        cardData?: CardData,\n        billingContact?: Contact,\n        shippingContact?: Contact\n    ): void {\n        const onError = this._squareOptions && this._squareOptions.onError || noop;\n        const onPaymentSelect = this._squareOptions && this._squareOptions.onPaymentSelect || noop;\n\n        if (errors) {\n            onError(errors);\n        } else if (nonce && this._paymentMethod) {\n            this._paymentInstrumentSelected(\n                this._paymentMethod.id,\n                nonce,\n                cardData,\n                billingContact,\n                shippingContact\n            )\n                .then(onPaymentSelect)\n                .catch(onError);\n        }\n    }\n\n    private _handleCardNonceResponse(errors?: NonceGenerationError[], nonce?: string): void {\n        if (!this._deferredRequestNonce) {\n            throw new StandardError();\n        }\n\n        if (nonce && !errors) {\n            this._deferredRequestNonce.resolve({ nonce });\n\n            return;\n        }\n\n        const onError = this._squareOptions && this._squareOptions.onError || noop;\n\n        onError(errors);\n\n        this._deferredRequestNonce.reject(errors);\n    }\n\n    private _paymentInstrumentSelected(\n        methodId: string,\n        nonce?: string,\n        cardData?: CardData,\n        billingContact?: Contact,\n        shippingContact?: Contact): Promise<InternalCheckoutSelectors> {\n\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            return this._setExternalCheckoutData(nonce, cardData, billingContact, shippingContact)\n            .then(() =>\n                Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId)),\n            ]));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _paymentRequestPayload(): SquarePaymentRequest {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        return {\n            requestShippingAddress: true,\n            requestBillingInfo: true,\n            currencyCode: storeConfig.currency.code,\n            countryCode: this._getCountryCode(storeConfig.storeProfile.storeCountry),\n            total: {\n                label: storeConfig.storeProfile.storeName,\n                amount: String(checkout.subtotal),\n                pending: false,\n            },\n        };\n    }\n\n    private _setExternalCheckoutData(nonce?: string, cardData?: CardData, billingContact?: Contact, shippingContact?: Contact): Promise<Response<any>> {\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: toFormUrlEncoded({\n                nonce,\n                provider: 'squarev2',\n                action: 'set_external_checkout',\n                cardData: JSON.stringify(cardData),\n                billingContact: JSON.stringify(billingContact),\n                shippingContact: JSON.stringify(shippingContact),\n            }),\n        });\n    }\n\n    private _setPostalCode(): void {\n        const state = this._store.getState();\n        const billingAddress = state.billingAddress.getBillingAddress();\n\n        if (!this._paymentForm) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (billingAddress && billingAddress.postalCode) {\n            this._paymentForm.setPostalCode(billingAddress.postalCode);\n        }\n    }\n\n    private _showPaymentMethods(methods: { [key: string]: boolean }, element: SquareFormElement): void {\n        const masterpassBtn = document.getElementById(element.elementId);\n\n        if (masterpassBtn && methods.masterpass) {\n            masterpassBtn.style.display = 'inline-block';\n        }\n    }\n}\n\nexport interface DeferredPromise {\n    resolve(resolution?: NonceInstrument): void;\n    reject(reason?: any): void;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { SquareFormFactory, SquareFormOptions } from './square-form';\nimport SquareWindow from './square-window';\n\nexport default class SquareScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    load(): Promise<SquareFormFactory> {\n        const scriptURI = '//js.squareup.com/v2/paymentform';\n\n        return this._scriptLoader.loadScript(scriptURI)\n            .then(() => (options: SquareFormOptions) =>\n                new (window as SquareWindow).SqPaymentForm(options)\n            );\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\n\nimport WepayRisk from './wepay-risk';\nimport WepayWindow from './wepay-window';\n\nconst SCRIPT_SRC = '//static.wepay.com/min/js/risk.1.latest.js';\n\nexport default class WepayRiskClient {\n    private _riskClient?: WepayRisk;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    initialize(): Promise<WepayRiskClient> {\n        return this._scriptLoader\n            .loadScript(SCRIPT_SRC)\n            .then(() => this._riskClient = (window as WepayWindow).WePay.risk)\n            .then(() => this);\n    }\n\n    getRiskToken(): string {\n        if (!this._riskClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        this._riskClient.generate_risk_token();\n\n        return this._riskClient.get_risk_token();\n    }\n}\n","import { merge } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport CreditCardPaymentStrategy from '../credit-card/credit-card-payment-strategy';\n\nimport WepayRiskClient from './wepay-risk-client';\n\nexport default class WepayPaymentStrategy extends CreditCardPaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        orderActionCreator: OrderActionCreator,\n        paymentActionCreator: PaymentActionCreator,\n        private _wepayRiskClient: WepayRiskClient\n    ) {\n        super(store, orderActionCreator, paymentActionCreator);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._wepayRiskClient.initialize();\n\n        return super.initialize(options);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const token = this._wepayRiskClient.getRiskToken();\n        const payloadWithToken = merge({}, payload, {\n            payment: {\n                paymentData: {\n                    deviceSessionId: token,\n                },\n            },\n        });\n\n        return super.execute(payloadWithToken, options);\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n} from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport PaymentMethodInvalidError from '../../errors/payment-method-invalid-error';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { Zip, ZipModalEvent } from './zip';\nimport ZipScriptLoader from './zip-script-loader';\n\nexport default class ZipPaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _zipClient?: Zip;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _zipScriptLoader: ZipScriptLoader\n    ) { }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return this._zipScriptLoader.load()\n            .then(zip => {\n                this._zipClient = zip;\n\n                return this._store.getState();\n            });\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n        this._zipClient = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const { _zipClient: zipClient } = this;\n\n        if (!payment) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment\" argument is not provided.');\n        }\n\n        if (!zipClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(payment.methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(payment.methodId);\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n            })\n            .then(()  => {\n                return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n                    .then(() => new Promise<string>((resolve, reject) => {\n                        zipClient.Checkout.init({\n                            onComplete: ({ checkoutId, state }) => {\n                                if (state === ZipModalEvent.CancelCheckout) {\n                                    return reject(new PaymentMethodCancelledError());\n                                }\n\n                                if (state === ZipModalEvent.CheckoutApproved && checkoutId) {\n                                    return resolve(checkoutId);\n                                }\n\n                                reject(new PaymentMethodInvalidError());\n                            },\n                            onCheckout: openModal => {\n                                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                                }\n\n                                openModal(JSON.parse(this._paymentMethod.clientToken));\n                            },\n                        });\n                    })\n                    .then(nonce =>\n                        this._store.dispatch(this._paymentActionCreator.submitPayment({\n                            methodId: payment.methodId,\n                            paymentData: { nonce },\n                        }))\n                    ));\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { Zip, ZipHostWindow } from '../zip/zip';\n\nexport default class ZipScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        public _window: ZipHostWindow = window\n    ) {}\n\n    load(): Promise<Zip> {\n        return this._scriptLoader\n            .loadScript(`//static.zipmoney.com.au/checkout/checkout-v1.min.js`)\n            .then(() => {\n                if (!this._window.Zip) {\n                    throw new StandardError();\n                }\n\n                return this._window.Zip;\n            });\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../billing';\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore, CheckoutValidator } from '../checkout';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { OrderActionCreator, OrderRequestSender } from '../order';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\n\nimport PaymentActionCreator from './payment-action-creator';\nimport PaymentMethodActionCreator from './payment-method-action-creator';\nimport PaymentMethodRequestSender from './payment-method-request-sender';\nimport PaymentRequestSender from './payment-request-sender';\nimport PaymentStrategyActionCreator from './payment-strategy-action-creator';\nimport PaymentStrategyRegistry from './payment-strategy-registry';\nimport PaymentStrategyType from './payment-strategy-type';\nimport { AffirmPaymentStrategy, AffirmScriptLoader } from './strategies/affirm';\nimport { AfterpayPaymentStrategy, AfterpayScriptLoader } from './strategies/afterpay';\nimport { AmazonPayPaymentStrategy, AmazonPayScriptLoader } from './strategies/amazon-pay';\nimport {\n    createBraintreePaymentProcessor,\n    createBraintreeVisaCheckoutPaymentProcessor,\n    BraintreeCreditCardPaymentStrategy,\n    BraintreePaypalPaymentStrategy,\n    BraintreeScriptLoader,\n    BraintreeSDKCreator,\n    BraintreeVisaCheckoutPaymentStrategy,\n    VisaCheckoutScriptLoader\n} from './strategies/braintree';\nimport { ChasePayPaymentStrategy, ChasePayScriptLoader } from './strategies/chasepay';\nimport { ConvergePaymentStrategy } from './strategies/converge';\nimport { CreditCardPaymentStrategy } from './strategies/credit-card';\nimport {\n    createGooglePayPaymentProcessor,\n    GooglePayBraintreeInitializer,\n    GooglePayPaymentStrategy,\n    GooglePayStripeInitializer\n} from './strategies/googlepay';\nimport { KlarnaPaymentStrategy, KlarnaScriptLoader } from './strategies/klarna';\nimport { LegacyPaymentStrategy } from './strategies/legacy';\nimport { MasterpassPaymentStrategy, MasterpassScriptLoader } from './strategies/masterpass';\nimport { NoPaymentDataRequiredPaymentStrategy } from './strategies/no-payment';\nimport { OfflinePaymentStrategy } from './strategies/offline';\nimport { OffsitePaymentStrategy } from './strategies/offsite';\nimport { PaypalExpressPaymentStrategy, PaypalProPaymentStrategy, PaypalScriptLoader } from './strategies/paypal';\nimport { SagePayPaymentStrategy } from './strategies/sage-pay';\nimport { SquarePaymentStrategy, SquareScriptLoader } from './strategies/square';\nimport { WepayPaymentStrategy, WepayRiskClient } from './strategies/wepay';\nimport { ZipPaymentStrategy, ZipScriptLoader } from './strategies/zip';\n\nexport default function createPaymentStrategyRegistry(\n    store: CheckoutStore,\n    paymentClient: any,\n    requestSender: RequestSender\n) {\n    const registry = new PaymentStrategyRegistry(store, { defaultToken: PaymentStrategyType.CREDIT_CARD });\n    const scriptLoader = getScriptLoader();\n    const billingAddressActionCreator = new BillingAddressActionCreator(new BillingAddressRequestSender(requestSender));\n    const braintreePaymentProcessor = createBraintreePaymentProcessor(scriptLoader);\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const checkoutValidator = new CheckoutValidator(checkoutRequestSender);\n    const orderActionCreator = new OrderActionCreator(new OrderRequestSender(requestSender), checkoutValidator);\n    const paymentActionCreator = new PaymentActionCreator(new PaymentRequestSender(paymentClient), orderActionCreator);\n    const paymentMethodActionCreator = new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender));\n    const remoteCheckoutActionCreator = new RemoteCheckoutActionCreator(new RemoteCheckoutRequestSender(requestSender));\n    const configActionCreator = new ConfigActionCreator(new ConfigRequestSender(requestSender));\n    const checkoutActionCreator = new CheckoutActionCreator(checkoutRequestSender, configActionCreator);\n    const paymentStrategyActionCreator = new PaymentStrategyActionCreator(registry, orderActionCreator);\n    const formPoster = createFormPoster();\n\n    registry.register(PaymentStrategyType.AFFIRM, () =>\n        new AffirmPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            new AffirmScriptLoader()\n        )\n    );\n\n    registry.register(PaymentStrategyType.AFTERPAY, () =>\n        new AfterpayPaymentStrategy(\n            store,\n            checkoutValidator,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new AfterpayScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.AMAZON, () =>\n        new AmazonPayPaymentStrategy(\n            store,\n            orderActionCreator,\n            billingAddressActionCreator,\n            remoteCheckoutActionCreator,\n            new AmazonPayScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.CREDIT_CARD, () =>\n        new CreditCardPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.KLARNA, () =>\n        new KlarnaPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new KlarnaScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.LEGACY, () =>\n        new LegacyPaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.OFFLINE, () =>\n        new OfflinePaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.OFFSITE, () =>\n        new OffsitePaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.PAYPAL, () =>\n        new PaypalProPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.PAYPAL_EXPRESS, () =>\n        new PaypalExpressPaymentStrategy(\n            store,\n            orderActionCreator,\n            new PaypalScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.PAYPAL_EXPRESS_CREDIT, () =>\n        new PaypalExpressPaymentStrategy(\n            store,\n            orderActionCreator,\n            new PaypalScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.SAGE_PAY, () =>\n        new SagePayPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            formPoster\n        )\n    );\n\n    registry.register(PaymentStrategyType.SQUARE, () =>\n        new SquarePaymentStrategy(\n            store,\n            checkoutActionCreator,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            requestSender,\n            new SquareScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.NO_PAYMENT_DATA_REQUIRED, () =>\n        new NoPaymentDataRequiredPaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE, () =>\n        new BraintreeCreditCardPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE_PAYPAL, () =>\n        new BraintreePaypalPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE_PAYPAL_CREDIT, () =>\n        new BraintreePaypalPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor,\n            true\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE_VISA_CHECKOUT, () =>\n        new BraintreeVisaCheckoutPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            createBraintreeVisaCheckoutPaymentProcessor(scriptLoader, requestSender),\n            new VisaCheckoutScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.CHASE_PAY, () =>\n        new ChasePayPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            requestSender,\n            new ChasePayScriptLoader(scriptLoader),\n            new WepayRiskClient(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE_GOOGLE_PAY, () =>\n        new GooglePayPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayBraintreeInitializer(\n                    new BraintreeSDKCreator(\n                        new BraintreeScriptLoader(scriptLoader)\n                    )\n                )\n            )\n        )\n    );\n\n    registry.register(PaymentStrategyType.WE_PAY, () =>\n        new WepayPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            new WepayRiskClient(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.MASTERPASS, () =>\n        new MasterpassPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            new MasterpassScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.STRIPE_GOOGLE_PAY, () =>\n        new GooglePayPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayStripeInitializer()\n            )\n        )\n    );\n\n    registry.register(PaymentStrategyType.ZIP, () =>\n        new ZipPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            new ZipScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.CONVERGE, () =>\n        new ConvergePaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            formPoster\n        )\n    );\n\n    return registry;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { Overlay } from '../../../common/overlay';\n\nimport BraintreePaymentProcessor from './braintree-payment-processor';\nimport BraintreeScriptLoader from './braintree-script-loader';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\n\nexport default function createBraintreePaymentProcessor(scriptLoader: ScriptLoader) {\n    const braintreeScriptLoader = new BraintreeScriptLoader(scriptLoader);\n    const braintreeSDKCreator = new BraintreeSDKCreator(braintreeScriptLoader);\n    const overlay = new Overlay();\n\n    return new BraintreePaymentProcessor(braintreeSDKCreator, overlay);\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { Address } from '../../address';\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../../checkout';\nimport { addMinutes, isFuture } from '../../common/date-time';\nimport { MissingDataError, MissingDataErrorType } from '../../common/error/errors';\n\nimport { SessionContext, VaultAccessToken } from './instrument';\nimport { DeleteInstrumentAction, InstrumentActionType, LoadInstrumentsAction } from './instrument-actions';\nimport InstrumentRequestSender from './instrument-request-sender';\n\nexport default class InstrumentActionCreator {\n    constructor(\n        private _instrumentRequestSender: InstrumentRequestSender\n    ) {}\n\n    loadInstruments(): ThunkAction<LoadInstrumentsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<LoadInstrumentsAction>) => {\n            observer.next(createAction(InstrumentActionType.LoadInstrumentsRequested));\n\n            const session = this._getSessionContext(store);\n            const token = this._getCurrentAccessToken(store);\n            const shippingAddress = this._getShippingAddress(store);\n\n            return this._getValidAccessToken(token)\n                .then(currentToken =>\n                    this._instrumentRequestSender.loadInstruments({\n                            ...session,\n                            authToken: currentToken.vaultAccessToken,\n                        },\n                        shippingAddress\n                    )\n                        .then(({ body }) => {\n                            observer.next(createAction(\n                                InstrumentActionType.LoadInstrumentsSucceeded,\n                                body,\n                                currentToken\n                            ));\n                            observer.complete();\n                        })\n                )\n                .catch(response => {\n                    observer.error(createErrorAction(InstrumentActionType.LoadInstrumentsFailed, response));\n                });\n        });\n    }\n\n    deleteInstrument(instrumentId: string): ThunkAction<DeleteInstrumentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<DeleteInstrumentAction>) => {\n            observer.next(createAction(InstrumentActionType.DeleteInstrumentRequested, undefined, { instrumentId }));\n\n            const session = this._getSessionContext(store);\n            const token = this._getCurrentAccessToken(store);\n\n            return this._getValidAccessToken(token)\n                .then(currentToken =>\n                    this._instrumentRequestSender.deleteInstrument({\n                        ...session,\n                        authToken: currentToken.vaultAccessToken,\n                    }, instrumentId)\n                        .then(({ body }) => {\n                            observer.next(createAction(InstrumentActionType.DeleteInstrumentSucceeded, body, {\n                                instrumentId,\n                                ...currentToken,\n                            }));\n                            observer.complete();\n                        })\n                )\n                .catch(response => {\n                    observer.error(createErrorAction(InstrumentActionType.DeleteInstrumentFailed, response, { instrumentId }));\n                });\n        });\n    }\n\n    private _isValidVaultAccessToken(token: VaultAccessToken): boolean {\n        if (!token || !token.vaultAccessToken) {\n            return false;\n        }\n\n        const expiryBuffer = 2;\n        const expiry = addMinutes(new Date(token.vaultAccessExpiry), expiryBuffer);\n\n        return isFuture(expiry);\n    }\n\n    private _getCurrentAccessToken(store: ReadableCheckoutStore): VaultAccessToken | undefined {\n        const { instruments } = store.getState();\n        const meta = instruments.getInstrumentsMeta();\n\n        if (!meta) {\n            return;\n        }\n\n        return {\n            vaultAccessToken: meta.vaultAccessToken,\n            vaultAccessExpiry: meta.vaultAccessExpiry,\n        };\n    }\n\n    private _getValidAccessToken(token?: VaultAccessToken): Promise<VaultAccessToken> {\n        return token && this._isValidVaultAccessToken(token) ?\n            Promise.resolve(token) :\n            this._instrumentRequestSender.getVaultAccessToken().then(({ body }) => body);\n    }\n\n    private _getShippingAddress(store: ReadableCheckoutStore): Address | undefined {\n        const state = store.getState();\n\n        return state.shippingAddress.getShippingAddress();\n    }\n\n    private _getSessionContext(store: ReadableCheckoutStore): SessionContext {\n        const state = store.getState();\n        const config = state.config.getStoreConfig();\n        const cart = state.cart.getCart();\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        const { customerId } = cart;\n        const { storeId } = config.storeProfile;\n\n        return {\n            customerId,\n            storeId,\n        };\n    }\n}\n","export default function addMinutes(date: Date, amount: number): Date {\n    const newDate = new Date(date.getTime());\n\n    newDate.setMinutes(date.getMinutes() + amount);\n\n    return newDate;\n}\n","export default function isFuture(date: Date): boolean {\n    return date.valueOf() > Date.now();\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport PaymentResponse from '../payment-response';\n\nimport Instrument, { VaultAccessToken } from './instrument';\nimport {\n    InstrumentsResponseBody,\n    InstrumentErrorResponseBody,\n    InternalInstrument,\n    InternalInstrumentsResponseBody,\n    InternalInstrumentErrorResponseBody,\n    InternalVaultAccessTokenResponseBody,\n} from './instrument-response-body';\n\nexport default class InstrumentResponseTransformer {\n    transformResponse(\n        response: PaymentResponse<InternalInstrumentsResponseBody>\n    ): Response<InstrumentsResponseBody> {\n        const { body, ...payload } = this._transformResponse(response);\n\n        return {\n            ...payload,\n            body: {\n                vaultedInstruments: this._transformVaultedInstruments(body.vaulted_instruments),\n            },\n        };\n    }\n\n    transformErrorResponse(\n        response: PaymentResponse<InternalInstrumentErrorResponseBody>\n    ): Response<InstrumentErrorResponseBody> {\n        return this._transformResponse(response);\n    }\n\n    transformVaultAccessResponse(\n        response: Response<InternalVaultAccessTokenResponseBody>\n    ): Response<VaultAccessToken> {\n        return {\n            ...response,\n            body: {\n                vaultAccessToken: response.body.data.token,\n                vaultAccessExpiry: response.body.data.expires_at,\n            },\n        };\n    }\n\n    private _transformVaultedInstruments(vaultedInstruments: InternalInstrument[] = []): Instrument[] {\n        return vaultedInstruments.map(instrument => ({\n            bigpayToken: instrument.bigpay_token,\n            defaultInstrument: instrument.default_instrument,\n            provider: instrument.provider,\n            iin: instrument.iin,\n            last4: instrument.last_4,\n            expiryMonth: instrument.expiry_month,\n            expiryYear: instrument.expiry_year,\n            brand: instrument.brand,\n            trustedShippingAddress: instrument.trusted_shipping_address,\n        }));\n    }\n\n    private _transformResponse<T>(response: PaymentResponse<T>): Response<T> {\n        const { data: body, ...payload } = response;\n\n        return {\n            ...payload,\n            body,\n        };\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { mapToInternalAddress, Address } from '../../address';\nimport { RequestOptions } from '../../common/http-request';\nimport PaymentResponse from '../payment-response';\n\nimport { InstrumentRequestContext, VaultAccessToken } from './instrument';\nimport {\n    InstrumentsResponseBody,\n    InternalInstrumentsResponseBody,\n    InternalInstrumentErrorResponseBody,\n} from './instrument-response-body';\nimport InstrumentResponseTransformer from './instrument-response-transformer';\n\nexport default class InstrumentRequestSender {\n    private _transformer: InstrumentResponseTransformer;\n\n    constructor(\n        private _client: any,\n        private _requestSender: RequestSender\n    ) {\n        this._transformer = new InstrumentResponseTransformer();\n    }\n\n    getVaultAccessToken(\n        { timeout }: RequestOptions = {}\n    ): Promise<Response<VaultAccessToken>> {\n        const url = '/internalapi/v1/checkout/payments/vault-access-token';\n\n        return this._requestSender.get(url, { timeout }).then(response => ({\n            ...response,\n            body: {\n                vaultAccessToken: response.body.data.token,\n                vaultAccessExpiry: response.body.data.expires_at,\n            },\n        }));\n    }\n\n    loadInstruments(\n        requestContext: InstrumentRequestContext,\n        shippingAddress?: Address\n    ): Promise<Response<InstrumentsResponseBody>> {\n        return (shippingAddress) ?\n            this._loadInstrumentsWithAddress(requestContext, shippingAddress) :\n            this._loadInstruments(requestContext);\n    }\n\n    deleteInstrument(\n        requestContext: InstrumentRequestContext,\n        instrumentId: string\n    ): Promise<Response<InstrumentsResponseBody>> {\n        const payload = {\n            ...requestContext,\n            instrumentId,\n        };\n\n        return new Promise((resolve, reject) => {\n            this._client.deleteShopperInstrument(\n                payload, (\n                    errorResponse: PaymentResponse<InternalInstrumentErrorResponseBody>,\n                    response: PaymentResponse<InternalInstrumentsResponseBody>\n                ) =>  errorResponse ?\n                    reject(this._transformer.transformErrorResponse(errorResponse)) :\n                    resolve(this._transformer.transformResponse(response))\n            );\n        });\n    }\n\n    private _loadInstruments(\n        requestContext: InstrumentRequestContext\n    ): Promise<Response<InstrumentsResponseBody>> {\n        return new Promise((resolve, reject) => {\n            this._client.loadInstruments(\n                requestContext, (\n                    errorResponse: PaymentResponse<InternalInstrumentErrorResponseBody>,\n                    response: PaymentResponse<InternalInstrumentsResponseBody>\n                ) => errorResponse ?\n                    reject(this._transformer.transformErrorResponse(errorResponse)) :\n                    resolve(this._transformer.transformResponse(response))\n            );\n        });\n    }\n\n    private _loadInstrumentsWithAddress(\n        requestContext: InstrumentRequestContext,\n        shippingAddress: Address\n    ): Promise<Response<InstrumentsResponseBody>> {\n        const payload = {\n            ...requestContext,\n            shippingAddress: mapToInternalAddress(shippingAddress),\n        };\n\n        return new Promise((resolve, reject) => {\n            this._client.loadInstrumentsWithAddress(\n                payload, (\n                    errorResponse: PaymentResponse<InternalInstrumentErrorResponseBody>,\n                    response: PaymentResponse<InternalInstrumentsResponseBody>\n                ) => errorResponse ?\n                    reject(this._transformer.transformErrorResponse(errorResponse)) :\n                    resolve(this._transformer.transformResponse(response))\n            );\n        });\n    }\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { LoadShippingCountriesAction, ShippingCountryActionType } from './shipping-country-actions';\nimport ShippingCountryRequestSender from './shipping-country-request-sender';\n\nexport default class ShippingCountryActionCreator {\n    constructor(\n        private _shippingCountryRequestSender: ShippingCountryRequestSender\n    ) {}\n\n    loadCountries(options?: RequestOptions): Observable<LoadShippingCountriesAction> {\n        return Observable.create((observer: Observer<LoadShippingCountriesAction>) => {\n            observer.next(createAction(ShippingCountryActionType.LoadShippingCountriesRequested));\n\n            this._shippingCountryRequestSender.loadCountries(options)\n                .then(response => {\n                    observer.next(createAction(ShippingCountryActionType.LoadShippingCountriesSucceeded, response.body.data));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ShippingCountryActionType.LoadShippingCountriesFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\nimport { CountryResponseBody } from '../geography';\n\nexport default class ShippingCountryRequestSender {\n    constructor(\n        private _requestSender: RequestSender,\n        private _config: { locale?: string }\n    ) {}\n\n    loadCountries({ timeout }: RequestOptions = {}): Promise<Response<CountryResponseBody>> {\n        const url = '/internalapi/v1/shipping/countries';\n        const headers = {\n            'Accept-Language': this._config.locale,\n        };\n\n        return this._requestSender.get(url, { headers, timeout });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { AddressRequestBody } from '../address';\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { Registry } from '../common/registry';\n\nimport { ShippingInitializeOptions, ShippingRequestOptions } from './shipping-request-options';\nimport {\n    ShippingStrategyActionType,\n    ShippingStrategyDeinitializeAction,\n    ShippingStrategyInitializeAction,\n    ShippingStrategySelectOptionAction,\n    ShippingStrategyUpdateAddressAction,\n} from './shipping-strategy-actions';\nimport { ShippingStrategy } from './strategies';\n\nexport default class ShippingStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: Registry<ShippingStrategy>\n    ) {}\n\n    updateAddress(address: AddressRequestBody, options?: ShippingRequestOptions): ThunkAction<ShippingStrategyUpdateAddressAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyUpdateAddressAction>) => {\n            const payment = store.getState().payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            observer.next(createAction(ShippingStrategyActionType.UpdateAddressRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .updateAddress(address, { ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.UpdateAddressSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.UpdateAddressFailed, error, { methodId }));\n                });\n        });\n    }\n\n    selectOption(shippingOptionId: string, options?: ShippingRequestOptions): ThunkAction<ShippingStrategySelectOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategySelectOptionAction>) => {\n            const payment = store.getState().payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            observer.next(createAction(ShippingStrategyActionType.SelectOptionRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .selectOption(shippingOptionId, { ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.SelectOptionSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.SelectOptionFailed, error, { methodId }));\n                });\n        });\n    }\n\n    initialize(options?: ShippingInitializeOptions): ThunkAction<ShippingStrategyInitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyInitializeAction>) => {\n            const state = store.getState();\n            const payment = state.payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n            const mergedOptions = { ...options, methodId };\n\n            if (methodId && state.shippingStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(ShippingStrategyActionType.InitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .initialize(mergedOptions)\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.InitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.InitializeFailed, error, { methodId }));\n                });\n        });\n    }\n\n    deinitialize(options?: ShippingRequestOptions): ThunkAction<ShippingStrategyDeinitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyDeinitializeAction>) => {\n            const state = store.getState();\n            const payment = state.payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            if (methodId && !state.shippingStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(ShippingStrategyActionType.DeinitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .deinitialize({ ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.DeinitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.DeinitializeFailed, error, { methodId }));\n                });\n        });\n    }\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\n\nimport { isInternalAddressEqual, mapFromInternalAddress, AddressRequestBody } from '../../../address';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { AmazonPayAddressBook, AmazonPayOrderReference, AmazonPayScriptLoader, AmazonPayWindow } from '../../../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { RemoteCheckoutSynchronizationError } from '../../../remote-checkout/errors';\nimport ConsignmentActionCreator from '../../consignment-action-creator';\nimport { ShippingInitializeOptions, ShippingRequestOptions } from '../../shipping-request-options';\nimport { ShippingStrategyActionType } from '../../shipping-strategy-actions';\nimport ShippingStrategy from '../shipping-strategy';\n\nimport AmazonPayShippingInitializeOptions from './amazon-pay-shipping-initialize-options';\n\nexport default class AmazonPayShippingStrategy implements ShippingStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _window: AmazonPayWindow;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    initialize(options: ShippingInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { amazon: amazonOptions, methodId } = options;\n\n        if (!amazonOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.amazon\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise((resolve, reject) => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const onReady = () => {\n                    this._createAddressBook(amazonOptions)\n                        .then(resolve)\n                        .catch(reject);\n                };\n\n                this._scriptLoader.loadWidget(this._paymentMethod, onReady)\n                    .catch(reject);\n            }))\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    updateAddress(address: AddressRequestBody, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    selectOption(optionId: string, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.selectShippingOption(optionId, options)\n        );\n    }\n\n    private _createAddressBook(options: AmazonPayShippingInitializeOptions): Promise<AmazonPayAddressBook> {\n        return new Promise((resolve, reject) => {\n            const { container, onAddressSelect = () => {}, onError = () => {}, onReady = () => {} } = options;\n            const merchantId = this._paymentMethod && this._paymentMethod.config.merchantId;\n\n            if (!document.getElementById(container)) {\n                return reject(new InvalidArgumentError('Unable to create AmazonPay AddressBook widget without valid container ID.'));\n            }\n\n            if (!this._window.OffAmazonPayments) {\n                return reject(new NotInitializedError(NotInitializedErrorType.ShippingNotInitialized));\n            }\n\n            if (!merchantId) {\n                return reject(new MissingDataError(MissingDataErrorType.MissingPaymentMethod));\n            }\n\n            const widget = new this._window.OffAmazonPayments.Widgets.AddressBook({\n                design: {\n                    designMode: 'responsive',\n                },\n                scope: 'payments:billing_address payments:shipping_address payments:widget profile',\n                sellerId: merchantId,\n                onAddressSelect: orderReference => {\n                    this._synchronizeShippingAddress()\n                        .then(() => onAddressSelect(orderReference))\n                        .catch(onError);\n                },\n                onError: error => {\n                    reject(error);\n                    onError(error);\n                },\n                onReady: orderReference => {\n                    this._updateOrderReference(orderReference)\n                        .then(() => {\n                            resolve();\n                            onReady(orderReference);\n                        })\n                        .catch(onError);\n                },\n            });\n\n            widget.bind(container);\n\n            return widget;\n        });\n    }\n\n    private _synchronizeShippingAddress(): Promise<InternalCheckoutSelectors> {\n        const methodId = this._paymentMethod && this._paymentMethod.id;\n        const amazon = this._store.getState().remoteCheckout.getCheckout('amazon');\n        const referenceId = amazon ? amazon.referenceId : undefined;\n\n        if (!methodId || !referenceId) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._store.dispatch(\n            createAction(ShippingStrategyActionType.UpdateAddressRequested, undefined, { methodId })\n        )\n            .then(() => this._store.dispatch(\n                this._remoteCheckoutActionCreator.initializeShipping(methodId, { referenceId })\n            ))\n            .then(state => {\n                const amazon = state.remoteCheckout.getCheckout('amazon');\n                const remoteAddress = amazon && amazon.shipping && amazon.shipping.address;\n                const address = state.shippingAddress.getShippingAddress();\n\n                if (remoteAddress === false) {\n                    throw new RemoteCheckoutSynchronizationError();\n                }\n\n                if (!remoteAddress || isInternalAddressEqual(remoteAddress, address || {})) {\n                    return this._store.getState();\n                }\n\n                return this._store.dispatch(\n                    this._consignmentActionCreator.updateAddress(mapFromInternalAddress(remoteAddress))\n                );\n            })\n            .then(() => this._store.dispatch(\n                createAction(ShippingStrategyActionType.UpdateAddressSucceeded, undefined, { methodId })\n            ))\n            .catch(error => this._store.dispatch(\n                createErrorAction(ShippingStrategyActionType.UpdateAddressFailed, error, { methodId })\n            ));\n    }\n\n    private _updateOrderReference(orderReference: AmazonPayOrderReference): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.updateCheckout('amazon', {\n                referenceId: orderReference.getAmazonOrderReferenceId(),\n            })\n        );\n    }\n}\n","import { AddressRequestBody } from '../../../address';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport ConsignmentActionCreator from '../../consignment-action-creator';\nimport { ShippingRequestOptions } from '../../shipping-request-options';\n\nimport ShippingStrategy from '../shipping-strategy';\n\nexport default class DefaultShippingStrategy implements ShippingStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _consignmentActionCreator: ConsignmentActionCreator\n    ) {}\n\n    updateAddress(address: AddressRequestBody, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.updateAddress(address, options)\n        );\n    }\n\n    selectOption(optionId: string, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.selectShippingOption(optionId, options)\n        );\n    }\n\n    initialize(options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { Address } from '../address';\nimport { BillingAddress, BillingAddressSelector } from '../billing';\nimport { Cart, CartSelector } from '../cart';\nimport { selector } from '../common/selector';\nimport { ConfigSelector } from '../config';\nimport { StoreConfig } from '../config/config';\nimport { Coupon, CouponSelector, GiftCertificate, GiftCertificateSelector } from '../coupon';\nimport { Customer, CustomerSelector } from '../customer';\nimport { FormField, FormSelector } from '../form';\nimport { Country, CountrySelector } from '../geography';\nimport { Order, OrderSelector } from '../order';\nimport { PaymentMethod, PaymentMethodSelector, PaymentSelector } from '../payment';\nimport { Instrument, InstrumentSelector } from '../payment/instrument';\nimport {\n    Consignment,\n    ConsignmentSelector,\n    ShippingAddressSelector,\n    ShippingCountrySelector,\n    ShippingOption,\n} from '../shipping';\n\nimport Checkout from './checkout';\nimport CheckoutSelector from './checkout-selector';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for getting the state of the current checkout.\n *\n * This object has a set of methods that allow you to get a specific piece of\n * checkout information, such as shipping and billing details.\n */\n@selector\nexport default class CheckoutStoreSelector {\n    private _billingAddress: BillingAddressSelector;\n    private _cart: CartSelector;\n    private _checkout: CheckoutSelector;\n    private _config: ConfigSelector;\n    private _consignments: ConsignmentSelector;\n    private _countries: CountrySelector;\n    private _coupons: CouponSelector;\n    private _customer: CustomerSelector;\n    private _form: FormSelector;\n    private _giftCertificates: GiftCertificateSelector;\n    private _instruments: InstrumentSelector;\n    private _order: OrderSelector;\n    private _payment: PaymentSelector;\n    private _paymentMethods: PaymentMethodSelector;\n    private _shippingAddress: ShippingAddressSelector;\n    private _shippingCountries: ShippingCountrySelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._billingAddress = selectors.billingAddress;\n        this._cart = selectors.cart;\n        this._checkout = selectors.checkout;\n        this._config = selectors.config;\n        this._consignments = selectors.consignments;\n        this._countries = selectors.countries;\n        this._coupons = selectors.coupons;\n        this._customer = selectors.customer;\n        this._form = selectors.form;\n        this._giftCertificates = selectors.giftCertificates;\n        this._instruments = selectors.instruments;\n        this._order = selectors.order;\n        this._payment = selectors.payment;\n        this._paymentMethods = selectors.paymentMethods;\n        this._shippingAddress = selectors.shippingAddress;\n        this._shippingCountries = selectors.shippingCountries;\n    }\n\n    /**\n     * Gets the current checkout.\n     *\n     * @returns The current checkout if it is loaded, otherwise undefined.\n     */\n    getCheckout(): Checkout | undefined {\n        return this._checkout.getCheckout();\n    }\n\n    /**\n     * Gets the current order.\n     *\n     * @returns The current order if it is loaded, otherwise undefined.\n     */\n    getOrder(): Order | undefined {\n        return this._order.getOrder();\n    }\n\n    /**\n     * Gets the checkout configuration of a store.\n     *\n     * @returns The configuration object if it is loaded, otherwise undefined.\n     */\n    getConfig(): StoreConfig | undefined {\n        return this._config.getStoreConfig();\n    }\n\n    /**\n     * Gets the shipping address of the current checkout.\n     *\n     * If the address is partially complete, it may not have shipping options\n     * associated with it.\n     *\n     * @returns The shipping address object if it is loaded, otherwise\n     * undefined.\n     */\n    getShippingAddress(): Address | undefined {\n        const shippingAddress = this._shippingAddress.getShippingAddress();\n        const context = this._config.getContextConfig();\n\n        if (!shippingAddress) {\n            if (!context || !context.geoCountryCode) {\n                return;\n            }\n\n            return {\n                firstName: '',\n                lastName: '',\n                company: '',\n                address1: '',\n                address2: '',\n                city: '',\n                stateOrProvince: '',\n                stateOrProvinceCode: '',\n                postalCode: '',\n                country: '',\n                phone: '',\n                customFields: [],\n                countryCode: context.geoCountryCode,\n            };\n        }\n\n        return shippingAddress;\n    }\n\n    /**\n     * Gets a list of shipping options available for the shipping address.\n     *\n     * If there is no shipping address assigned to the current checkout, the\n     * list of shipping options will be empty.\n     *\n     * @returns The list of shipping options if any, otherwise undefined.\n     */\n    getShippingOptions(): ShippingOption[] | undefined {\n        const consignments = this._consignments.getConsignments();\n\n        if (consignments && consignments.length) {\n            return consignments[0].availableShippingOptions;\n        }\n\n        return;\n    }\n\n    /**\n     * Gets a list of consignments.\n     *\n     * If there are no consignments created for to the current checkout, the\n     * list will be empty.\n     *\n     * @returns The list of consignments if any, otherwise undefined.\n     */\n    getConsignments(): Consignment[] | undefined {\n        return this._consignments.getConsignments();\n    }\n\n    /**\n     * Gets the selected shipping option for the current checkout.\n     *\n     * @returns The shipping option object if there is a selected option,\n     * otherwise undefined.\n     */\n    getSelectedShippingOption(): ShippingOption | undefined {\n        const consignments = this._consignments.getConsignments();\n\n        if (!consignments || !consignments.length) {\n            return;\n        }\n\n        return consignments[0].selectedShippingOption;\n    }\n\n    /**\n     * Gets a list of countries available for shipping.\n     *\n     * @returns The list of countries if it is loaded, otherwise undefined.\n     */\n    getShippingCountries(): Country[] | undefined {\n        return this._shippingCountries.getShippingCountries();\n    }\n\n    /**\n     * Gets the billing address of an order.\n     *\n     * @returns The billing address object if it is loaded, otherwise undefined.\n     */\n    getBillingAddress(): BillingAddress | undefined {\n        return this._billingAddress.getBillingAddress();\n    }\n\n    /**\n     * Gets a list of countries available for billing.\n     *\n     * @returns The list of countries if it is loaded, otherwise undefined.\n     */\n    getBillingCountries(): Country[] | undefined {\n        return this._countries.getCountries();\n    }\n\n    /**\n     * Gets a list of payment methods available for checkout.\n     *\n     * @returns The list of payment methods if it is loaded, otherwise undefined.\n     */\n    getPaymentMethods(): PaymentMethod[] | undefined {\n        return this._paymentMethods.getPaymentMethods();\n    }\n\n    /**\n     * Gets a payment method by an id.\n     *\n     * The method returns undefined if unable to find a payment method with the\n     * specified id, either because it is not available for the customer, or it\n     * is not loaded.\n     *\n     * @param methodId - The identifier of the payment method.\n     * @param gatewayId - The identifier of a payment provider providing the\n     * payment method.\n     * @returns The payment method object if loaded and available, otherwise,\n     * undefined.\n     */\n    getPaymentMethod(methodId: string, gatewayId?: string): PaymentMethod | undefined {\n        return this._paymentMethods.getPaymentMethod(methodId, gatewayId);\n    }\n\n    /**\n     * Gets the payment method that is selected for checkout.\n     *\n     * @returns The payment method object if there is a selected method;\n     * undefined if otherwise.\n     */\n    getSelectedPaymentMethod(): PaymentMethod | undefined {\n        const payment = this._payment.getPaymentId();\n\n        return payment && this._paymentMethods.getPaymentMethod(payment.providerId, payment.gatewayId);\n    }\n\n    /**\n     * Gets the current cart.\n     *\n     * @returns The current cart object if it is loaded, otherwise undefined.\n     */\n    getCart(): Cart | undefined {\n        return this._cart.getCart();\n    }\n\n    /**\n     * Gets a list of coupons that are applied to the current checkout.\n     *\n     * @returns The list of applied coupons if there is any, otherwise undefined.\n     */\n    getCoupons(): Coupon[] | undefined {\n        return this._coupons.getCoupons();\n    }\n\n    /**\n     * Gets a list of gift certificates that are applied to the current checkout.\n     *\n     * @returns The list of applied gift certificates if there is any, otherwise undefined.\n     */\n    getGiftCertificates(): GiftCertificate[] | undefined {\n        return this._giftCertificates.getGiftCertificates();\n    }\n\n    /**\n     * Gets the current customer.\n     *\n     * @returns The current customer object if it is loaded, otherwise\n     * undefined.\n     */\n    getCustomer(): Customer | undefined {\n        return this._customer.getCustomer();\n    }\n\n    /**\n     * Checks if payment data is required or not.\n     *\n     * If payment data is required, customers should be prompted to enter their\n     * payment details.\n     *\n     * ```js\n     * if (state.checkout.isPaymentDataRequired()) {\n     *     // Render payment form\n     * } else {\n     *     // Render \"Payment is not required for this order\" message\n     * }\n     * ```\n     *\n     * @param useStoreCredit - If true, check whether payment data is required\n     * with store credit applied; otherwise, check without store credit.\n     * @returns True if payment data is required, otherwise false.\n     */\n    isPaymentDataRequired(useStoreCredit?: boolean): boolean {\n        return this._payment.isPaymentDataRequired(useStoreCredit);\n    }\n\n    /**\n     * Checks if payment data is submitted or not.\n     *\n     * If payment data is already submitted using a payment method, customers\n     * should not be prompted to enter their payment details again.\n     *\n     * @param methodId - The identifier of the payment method.\n     * @param gatewayId - The identifier of a payment provider providing the\n     * payment method.\n     * @returns True if payment data is submitted, otherwise false.\n     */\n    isPaymentDataSubmitted(methodId: string, gatewayId?: string): boolean {\n        return this._payment.isPaymentDataSubmitted(this.getPaymentMethod(methodId, gatewayId));\n    }\n\n    /**\n     * Gets a list of payment instruments associated with the current customer.\n     *\n     * @returns The list of payment instruments if it is loaded, otherwise undefined.\n     */\n    getInstruments(): Instrument[] | undefined {\n        return this._instruments.getInstruments();\n    }\n\n    /**\n     * Gets a set of form fields that should be presented to customers in order\n     * to capture their billing address for a specific country.\n     *\n     * @param countryCode - A 2-letter country code (ISO 3166-1 alpha-2).\n     * @returns The set of billing address form fields if it is loaded,\n     * otherwise undefined.\n     */\n    getBillingAddressFields(countryCode: string): FormField[] {\n        return this._form.getBillingAddressFields(this.getBillingCountries(), countryCode);\n    }\n\n    /**\n     * Gets a set of form fields that should be presented to customers in order\n     * to capture their shipping address for a specific country.\n     *\n     * @param countryCode - A 2-letter country code (ISO 3166-1 alpha-2).\n     * @returns The set of shipping address form fields if it is loaded,\n     * otherwise undefined.\n     */\n    getShippingAddressFields(countryCode: string): FormField[] {\n        return this._form.getShippingAddressFields(this.getShippingCountries(), countryCode);\n    }\n}\n","import { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { RequestError } from '../common/error/errors';\nimport { selector } from '../common/selector';\nimport { ConfigSelector } from '../config';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerStrategySelector } from '../customer';\nimport { CountrySelector } from '../geography';\nimport { OrderSelector } from '../order';\nimport { PaymentMethodSelector, PaymentStrategySelector } from '../payment';\nimport { InstrumentSelector } from '../payment/instrument';\nimport { ConsignmentSelector, ShippingCountrySelector, ShippingStrategySelector } from '../shipping';\n\nimport CheckoutSelector from './checkout-selector';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for getting the error of any asynchronous checkout action, if\n * there is any.\n *\n * This object has a set of getters that would return an error if an action is\n * not executed successfully. For example, if you are unable to submit an order,\n * you can use this object to retrieve the reason for the failure.\n */\n@selector\nexport default class CheckoutStoreErrorSelector {\n    private _billingAddress: BillingAddressSelector;\n    private _cart: CartSelector;\n    private _checkout: CheckoutSelector;\n    private _config: ConfigSelector;\n    private _consignments: ConsignmentSelector;\n    private _countries: CountrySelector;\n    private _coupons: CouponSelector;\n    private _customerStrategies: CustomerStrategySelector;\n    private _giftCertificates: GiftCertificateSelector;\n    private _instruments: InstrumentSelector;\n    private _order: OrderSelector;\n    private _paymentMethods: PaymentMethodSelector;\n    private _paymentStrategies: PaymentStrategySelector;\n    private _shippingCountries: ShippingCountrySelector;\n    private _shippingStrategies: ShippingStrategySelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._billingAddress = selectors.billingAddress;\n        this._cart = selectors.cart;\n        this._checkout = selectors.checkout;\n        this._config = selectors.config;\n        this._consignments = selectors.consignments;\n        this._countries = selectors.countries;\n        this._coupons = selectors.coupons;\n        this._customerStrategies = selectors.customerStrategies;\n        this._giftCertificates = selectors.giftCertificates;\n        this._instruments = selectors.instruments;\n        this._order = selectors.order;\n        this._paymentMethods = selectors.paymentMethods;\n        this._paymentStrategies = selectors.paymentStrategies;\n        this._shippingCountries = selectors.shippingCountries;\n        this._shippingStrategies = selectors.shippingStrategies;\n    }\n\n    /**\n     * Gets the error of any checkout action that has failed.\n     *\n     * @returns The error object if unable to perform any checkout action,\n     * otherwise undefined.\n     */\n    getError(): Error | undefined {\n        // tslint:disable-next-line:cyclomatic-complexity\n        return this.getLoadCheckoutError() ||\n            this.getSubmitOrderError() ||\n            this.getFinalizeOrderError() ||\n            this.getLoadOrderError() ||\n            this.getLoadCartError() ||\n            this.getLoadBillingCountriesError() ||\n            this.getLoadShippingCountriesError() ||\n            this.getLoadPaymentMethodsError() ||\n            this.getLoadPaymentMethodError() ||\n            this.getInitializePaymentError() ||\n            this.getLoadShippingOptionsError() ||\n            this.getSelectShippingOptionError() ||\n            this.getSignInError() ||\n            this.getSignOutError() ||\n            this.getInitializeCustomerError() ||\n            this.getUpdateShippingAddressError() ||\n            this.getUpdateBillingAddressError() ||\n            this.getContinueAsGuestError() ||\n            this.getUpdateConsignmentError() ||\n            this.getCreateConsignmentsError() ||\n            this.getDeleteConsignmentError() ||\n            this.getInitializeShippingError() ||\n            this.getApplyCouponError() ||\n            this.getRemoveCouponError() ||\n            this.getApplyGiftCertificateError() ||\n            this.getRemoveGiftCertificateError() ||\n            this.getLoadInstrumentsError() ||\n            this.getDeleteInstrumentError() ||\n            this.getLoadConfigError();\n    }\n\n    /**\n     * Returns an error if unable to load the current checkout.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadCheckoutError(): Error | undefined {\n        return this._checkout.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to update the current checkout.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateCheckoutError(): Error | undefined {\n        return this._checkout.getUpdateError();\n    }\n\n    /**\n     * Returns an error if unable to submit the current order.\n     *\n     * @returns The error object if unable to submit, otherwise undefined.\n     */\n    getSubmitOrderError(): Error | undefined {\n        return this._paymentStrategies.getExecuteError();\n    }\n\n    /**\n     * Returns an error if unable to finalize the current order.\n     *\n     * @returns The error object if unable to finalize, otherwise undefined.\n     */\n    getFinalizeOrderError(): Error | undefined {\n        return this._paymentStrategies.getFinalizeError();\n    }\n\n    /**\n     * Returns an error if unable to load the current order.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadOrderError(): Error | undefined {\n        return this._order.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load the current cart.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadCartError(): Error | undefined {\n        return this._cart.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load billing countries.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadBillingCountriesError(): Error | undefined {\n        return this._countries.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load shipping countries.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadShippingCountriesError(): Error | undefined {\n        return this._shippingCountries.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load payment methods.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadPaymentMethodsError(): Error | undefined {\n        return this._paymentMethods.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load a specific payment method.\n     *\n     * @param methodId - The identifier of the payment method to load.\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadPaymentMethodError(methodId?: string): Error | undefined {\n        return this._paymentMethods.getLoadMethodError(methodId);\n    }\n\n    /**\n     * Returns an error if unable to initialize a specific payment method.\n     *\n     * @param methodId - The identifier of the payment method to initialize.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializePaymentError(methodId?: string): Error | undefined {\n        return this._paymentStrategies.getInitializeError(methodId);\n    }\n\n    /**\n     * Returns an error if unable to sign in.\n     *\n     * @returns The error object if unable to sign in, otherwise undefined.\n     */\n    getSignInError(): Error | undefined {\n        return this._customerStrategies.getSignInError();\n    }\n\n    /**\n     * Returns an error if unable to sign out.\n     *\n     * @returns The error object if unable to sign out, otherwise undefined.\n     */\n    getSignOutError(): Error | undefined {\n        return this._customerStrategies.getSignOutError();\n    }\n\n    /**\n     * Returns an error if unable to initialize the customer step of a checkout\n     * process.\n     *\n     * @param methodId - The identifer of the initialization method to execute.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializeCustomerError(methodId?: string): Error | undefined {\n        return this._customerStrategies.getInitializeError(methodId);\n    }\n\n    /**\n     * Returns an error if unable to load shipping options.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadShippingOptionsError(): Error | undefined {\n        return this._consignments.getLoadShippingOptionsError();\n    }\n\n    /**\n     * Returns an error if unable to select a shipping option.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to select, otherwise undefined.\n     */\n    getSelectShippingOptionError(consignmentId?: string): Error | undefined {\n        return this._shippingStrategies.getSelectOptionError() ||\n            this._consignments.getUpdateShippingOptionError(consignmentId);\n    }\n\n    /**\n     * Returns an error if unable to continue as guest.\n     *\n     * @returns The error object if unable to continue, otherwise undefined.\n     */\n    getContinueAsGuestError(): Error | undefined {\n        return this._billingAddress.getContinueAsGuestError();\n    }\n\n    /**\n     * Returns an error if unable to update billing address.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateBillingAddressError(): Error | undefined {\n        return this._billingAddress.getUpdateError();\n    }\n\n    /**\n     * Returns an error if unable to update shipping address.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateShippingAddressError(): Error | undefined {\n        return this._shippingStrategies.getUpdateAddressError();\n    }\n\n    /**\n     * Returns an error if unable to delete a consignment.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to delete, otherwise undefined.\n     */\n    getDeleteConsignmentError(consignmentId?: string): Error | undefined {\n        return this._consignments.getDeleteError(consignmentId);\n    }\n\n    /**\n     * Returns an error if unable to update a consignment.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateConsignmentError(consignmentId?: string): Error | undefined {\n        return this._consignments.getUpdateError(consignmentId);\n    }\n\n    /**\n     * Returns an error if unable to create consignments.\n     *\n     * @returns The error object if unable to create, otherwise undefined.\n     */\n    getCreateConsignmentsError(): Error | undefined {\n        return this._consignments.getCreateError();\n    }\n\n    /**\n     * Returns an error if unable to initialize the shipping step of a checkout\n     * process.\n     *\n     * @param methodId - The identifer of the initialization method to execute.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializeShippingError(methodId?: string): Error | undefined {\n        return this._shippingStrategies.getInitializeError(methodId);\n    }\n\n    /**\n     * Returns an error if unable to apply a coupon code.\n     *\n     * @returns The error object if unable to apply, otherwise undefined.\n     */\n    getApplyCouponError(): RequestError | undefined {\n        return this._coupons.getApplyError();\n    }\n\n    /**\n     * Returns an error if unable to remove a coupon code.\n     *\n     * @returns The error object if unable to remove, otherwise undefined.\n     */\n    getRemoveCouponError(): RequestError | undefined {\n        return this._coupons.getRemoveError();\n    }\n\n    /**\n     * Returns an error if unable to apply a gift certificate.\n     *\n     * @returns The error object if unable to apply, otherwise undefined.\n     */\n    getApplyGiftCertificateError(): RequestError | undefined {\n        return this._giftCertificates.getApplyError();\n    }\n\n    /**\n     * Returns an error if unable to remove a gift certificate.\n     *\n     * @returns The error object if unable to remove, otherwise undefined.\n     */\n    getRemoveGiftCertificateError(): RequestError | undefined {\n        return this._giftCertificates.getRemoveError();\n    }\n\n    /**\n     * Returns an error if unable to load payment instruments.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadInstrumentsError(): Error | undefined {\n        return this._instruments.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to delete a payment instrument.\n     *\n     * @param instrumentId - The identifier of the payment instrument to delete.\n     * @returns The error object if unable to delete, otherwise undefined.\n     */\n    getDeleteInstrumentError(instrumentId?: string): Error | undefined {\n        return this._instruments.getDeleteError(instrumentId);\n    }\n\n    /**\n     * Returns an error if unable to load the checkout configuration of a store.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadConfigError(): Error | undefined {\n        return this._config.getLoadError();\n    }\n}\n","import { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { selector } from '../common/selector';\nimport { ConfigSelector } from '../config';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerStrategySelector } from '../customer';\nimport { CountrySelector } from '../geography';\nimport { OrderSelector } from '../order';\nimport { PaymentMethodSelector, PaymentStrategySelector } from '../payment';\nimport { InstrumentSelector } from '../payment/instrument';\nimport { ConsignmentSelector, ShippingCountrySelector, ShippingStrategySelector } from '../shipping';\n\nimport CheckoutSelector from './checkout-selector';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for checking the statuses of various asynchronous actions related\n * to checkout.\n *\n * This object has a set of getters that return true if an action is in\n * progress. For example, you can check whether a customer is submitting an\n * order and waiting for the request to complete.\n */\n@selector\nexport default class CheckoutStoreStatusSelector {\n    private _billingAddress: BillingAddressSelector;\n    private _cart: CartSelector;\n    private _checkout: CheckoutSelector;\n    private _config: ConfigSelector;\n    private _consignments: ConsignmentSelector;\n    private _countries: CountrySelector;\n    private _coupons: CouponSelector;\n    private _customerStrategies: CustomerStrategySelector;\n    private _giftCertificates: GiftCertificateSelector;\n    private _instruments: InstrumentSelector;\n    private _order: OrderSelector;\n    private _paymentMethods: PaymentMethodSelector;\n    private _paymentStrategies: PaymentStrategySelector;\n    private _shippingCountries: ShippingCountrySelector;\n    private _shippingStrategies: ShippingStrategySelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._billingAddress = selectors.billingAddress;\n        this._cart = selectors.cart;\n        this._checkout = selectors.checkout;\n        this._config = selectors.config;\n        this._consignments = selectors.consignments;\n        this._countries = selectors.countries;\n        this._coupons = selectors.coupons;\n        this._customerStrategies = selectors.customerStrategies;\n        this._giftCertificates = selectors.giftCertificates;\n        this._instruments = selectors.instruments;\n        this._order = selectors.order;\n        this._paymentMethods = selectors.paymentMethods;\n        this._paymentStrategies = selectors.paymentStrategies;\n        this._shippingCountries = selectors.shippingCountries;\n        this._shippingStrategies = selectors.shippingStrategies;\n    }\n\n    /**\n     * Checks whether any checkout action is pending.\n     *\n     * @returns True if there is a pending action, otherwise false.\n     */\n    isPending(): boolean {\n        // tslint:disable-next-line:cyclomatic-complexity\n        return this.isLoadingCheckout() ||\n            this.isSubmittingOrder() ||\n            this.isFinalizingOrder() ||\n            this.isLoadingOrder() ||\n            this.isLoadingCart() ||\n            this.isLoadingBillingCountries() ||\n            this.isLoadingShippingCountries() ||\n            this.isLoadingPaymentMethods() ||\n            this.isLoadingPaymentMethod() ||\n            this.isInitializingPayment() ||\n            this.isLoadingShippingOptions() ||\n            this.isSelectingShippingOption() ||\n            this.isSigningIn() ||\n            this.isSigningOut() ||\n            this.isInitializingCustomer() ||\n            this.isUpdatingBillingAddress() ||\n            this.isContinuingAsGuest() ||\n            this.isUpdatingShippingAddress() ||\n            this.isUpdatingConsignment() ||\n            this.isCreatingConsignments() ||\n            this.isDeletingConsignment() ||\n            this.isInitializingShipping() ||\n            this.isApplyingCoupon() ||\n            this.isRemovingCoupon() ||\n            this.isApplyingGiftCertificate() ||\n            this.isRemovingGiftCertificate() ||\n            this.isLoadingInstruments() ||\n            this.isDeletingInstrument() ||\n            this.isLoadingConfig() ||\n            this.isCustomerStepPending() ||\n            this.isPaymentStepPending();\n    }\n\n    /**\n     * Checks whether the current checkout is loading.\n     *\n     * @returns True if the current checkout is loading, otherwise false.\n     */\n    isLoadingCheckout(): boolean {\n        return this._checkout.isLoading();\n    }\n\n    /**\n     * Checks whether the current checkout is being updated.\n     *\n     * @returns True if the current checkout is being updated, otherwise false.\n     */\n    isUpdatingCheckout(): boolean {\n        return this._checkout.isUpdating();\n    }\n\n    /**\n     * Checks whether the current order is submitting.\n     *\n     * @returns True if the current order is submitting, otherwise false.\n     */\n    isSubmittingOrder(): boolean {\n        return this._paymentStrategies.isExecuting();\n    }\n\n    /**\n     * Checks whether the current order is finalizing.\n     *\n     * @returns True if the current order is finalizing, otherwise false.\n     */\n    isFinalizingOrder(): boolean {\n        return this._paymentStrategies.isFinalizing();\n    }\n\n    /**\n     * Checks whether the current order is loading.\n     *\n     * @returns True if the current order is loading, otherwise false.\n     */\n    isLoadingOrder(): boolean {\n        return this._order.isLoading();\n    }\n\n    /**\n     * Checks whether the current cart is loading.\n     *\n     * @returns True if the current cart is loading, otherwise false.\n     */\n    isLoadingCart(): boolean {\n        return this._cart.isLoading();\n    }\n\n    /**\n     * Checks whether billing countries are loading.\n     *\n     * @returns True if billing countries are loading, otherwise false.\n     */\n    isLoadingBillingCountries(): boolean {\n        return this._countries.isLoading();\n    }\n\n    /**\n     * Checks whether shipping countries are loading.\n     *\n     * @returns True if shipping countries are loading, otherwise false.\n     */\n    isLoadingShippingCountries(): boolean {\n        return this._shippingCountries.isLoading();\n    }\n\n    /**\n     * Checks whether payment methods are loading.\n     *\n     * @returns True if payment methods are loading, otherwise false.\n     */\n    isLoadingPaymentMethods(): boolean {\n        return this._paymentMethods.isLoading();\n    }\n\n    /**\n     * Checks whether a specific or any payment method is loading.\n     *\n     * The method returns true if no ID is provided and at least one payment\n     * method is loading.\n     *\n     * @param methodId - The identifier of the payment method to check.\n     * @returns True if the payment method is loading, otherwise false.\n     */\n    isLoadingPaymentMethod(methodId?: string): boolean {\n        return this._paymentMethods.isLoadingMethod(methodId);\n    }\n\n    /**\n     * Checks whether a specific or any payment method is initializing.\n     *\n     * The method returns true if no ID is provided and at least one payment\n     * method is initializing.\n     *\n     * @param methodId - The identifier of the payment method to check.\n     * @returns True if the payment method is initializing, otherwise false.\n     */\n    isInitializingPayment(methodId?: string): boolean {\n        return this._paymentStrategies.isInitializing(methodId);\n    }\n\n    /**\n     * Checks whether the current customer is signing in.\n     *\n     * If an ID is provided, the method also checks whether the customer is\n     * signing in using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for signing in the\n     * current customer.\n     * @returns True if the customer is signing in, otherwise false.\n     */\n    isSigningIn(methodId?: string): boolean {\n        return this._customerStrategies.isSigningIn(methodId);\n    }\n\n    /**\n     * Checks whether the current customer is signing out.\n     *\n     * If an ID is provided, the method also checks whether the customer is\n     * signing out using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for signing out the\n     * current customer.\n     * @returns True if the customer is signing out, otherwise false.\n     */\n    isSigningOut(methodId?: string): boolean {\n        return this._customerStrategies.isSigningOut(methodId);\n    }\n\n    /**\n     * Checks whether the customer step is initializing.\n     *\n     * If an ID is provided, the method also checks whether the customer step is\n     * initializing using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for initializing the\n     * customer step of checkout.\n     * @returns True if the customer step is initializing, otherwise false.\n     */\n    isInitializingCustomer(methodId?: string): boolean {\n        return this._customerStrategies.isInitializing(methodId);\n    }\n\n    /**\n     * Checks whether shipping options are loading.\n     *\n     * @returns True if shipping options are loading, otherwise false.\n     */\n    isLoadingShippingOptions(): boolean {\n        return this._consignments.isLoadingShippingOptions();\n    }\n\n    /**\n     * Checks whether a shipping option is being selected.\n     *\n     * A consignment ID should be provided when checking if a shipping option\n     * is being selected for a specific consignment, otherwise it will check\n     * for all consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if selecting a shipping option, otherwise false.\n     */\n    isSelectingShippingOption(consignmentId?: string): boolean {\n        return this._shippingStrategies.isSelectingOption() ||\n            this._consignments.isUpdatingShippingOption(consignmentId);\n    }\n\n    /**\n     * Checks whether the billing address is being updated.\n     *\n     * @returns True if updating their billing address, otherwise false.\n     */\n    isUpdatingBillingAddress(): boolean {\n        return this._billingAddress.isUpdating();\n    }\n\n    /**\n     * Checks whether the shopper is continuing out as a guest.\n     *\n     * @returns True if continuing as guest, otherwise false.\n     */\n    isContinuingAsGuest(): boolean {\n        return this._billingAddress.isContinuingAsGuest();\n    }\n\n    /**\n     * Checks the shipping address is being updated.\n     *\n     * @returns True if updating their shipping address, otherwise false.\n     */\n    isUpdatingShippingAddress(): boolean {\n        return this._shippingStrategies.isUpdatingAddress();\n    }\n\n    /**\n     * Checks whether a given/any consignment is being updated.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if updating consignment(s), otherwise false.\n     */\n    isUpdatingConsignment(consignmentId?: string): boolean {\n        return this._consignments.isUpdating(consignmentId);\n    }\n\n    /**\n     * Checks whether a given/any consignment is being deleted.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if deleting consignment(s), otherwise false.\n     */\n    isDeletingConsignment(consignmentId?: string): boolean {\n        return this._consignments.isDeleting(consignmentId);\n    }\n\n    /**\n     * Checks whether a given/any consignment is being updated.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @returns True if creating consignments, otherwise false.\n     */\n    isCreatingConsignments(): boolean {\n        return this._consignments.isCreating();\n    }\n\n    /**\n     * Checks whether the shipping step of a checkout process is initializing.\n     *\n     * If an identifier is provided, the method also checks whether the shipping\n     * step is initializing using a specific shipping method with the same\n     * identifier.\n     *\n     * @param methodId - The identifer of the initialization method to check.\n     * @returns True if the shipping step is initializing, otherwise false.\n     */\n    isInitializingShipping(methodId?: string) {\n        return this._shippingStrategies.isInitializing(methodId);\n    }\n\n    /**\n     * Checks whether the current customer is applying a coupon code.\n     *\n     * @returns True if applying a coupon code, otherwise false.\n     */\n    isApplyingCoupon(): boolean {\n        return this._coupons.isApplying();\n    }\n\n    /**\n     * Checks whether the current customer is removing a coupon code.\n     *\n     * @returns True if removing a coupon code, otherwise false.\n     */\n    isRemovingCoupon(): boolean {\n        return this._coupons.isRemoving();\n    }\n\n    /**\n     * Checks whether the current customer is applying a gift certificate.\n     *\n     * @returns True if applying a gift certificate, otherwise false.\n     */\n    isApplyingGiftCertificate(): boolean {\n        return this._giftCertificates.isApplying();\n    }\n\n    /**\n     * Checks whether the current customer is removing a gift certificate.\n     *\n     * @returns True if removing a gift certificate, otherwise false.\n     */\n    isRemovingGiftCertificate(): boolean {\n        return this._giftCertificates.isRemoving();\n    }\n\n    /**\n     * Checks whether the current customer's payment instruments are loading.\n     *\n     * @returns True if payment instruments are loading, otherwise false.\n     */\n    isLoadingInstruments(): boolean {\n        return this._instruments.isLoading();\n    }\n\n    /**\n     * Checks whether the current customer is deleting a payment instrument.\n     *\n     * @returns True if deleting a payment instrument, otherwise false.\n     */\n    isDeletingInstrument(instrumentId?: string): boolean {\n        return this._instruments.isDeleting(instrumentId);\n    }\n\n    /**\n     * Checks whether the checkout configuration of a store is loading.\n     *\n     * @returns True if the configuration is loading, otherwise false.\n     */\n    isLoadingConfig(): boolean {\n        return this._config.isLoading();\n    }\n\n    /**\n     * Checks whether the customer step of a checkout is in a pending state.\n     *\n     * The customer step is considered to be pending if it is in the process of\n     * initializing, signing in, signing out, and/or interacting with a customer\n     * widget.\n     *\n     * @returns True if the customer step is pending, otherwise false.\n     */\n    isCustomerStepPending(): boolean {\n        return this._customerStrategies.isInitializing() ||\n            this._customerStrategies.isSigningIn() ||\n            this._customerStrategies.isSigningOut() ||\n            this._customerStrategies.isWidgetInteracting();\n    }\n\n    /**\n     * Checks whether the payment step of a checkout is in a pending state.\n     *\n     * The payment step is considered to be pending if it is in the process of\n     * initializing, submitting an order, finalizing an order, and/or\n     * interacting with a payment widget.\n     *\n     * @returns True if the payment step is pending, otherwise false.\n     */\n    isPaymentStepPending(): boolean {\n        return this._paymentStrategies.isInitializing() ||\n            this._paymentStrategies.isExecuting() ||\n            this._paymentStrategies.isFinalizing() ||\n            this._paymentStrategies.isWidgetInteracting();\n    }\n}\n","import {\n    CheckoutSelectors,\n    CheckoutStoreErrorSelector,\n    CheckoutStoreSelector,\n    CheckoutStoreStatusSelector,\n    InternalCheckoutSelectors,\n} from '../checkout';\n\nexport default function createCheckoutSelectors(selectors: InternalCheckoutSelectors): CheckoutSelectors {\n    const data = new CheckoutStoreSelector(selectors);\n    const errors = new CheckoutStoreErrorSelector(selectors);\n    const statuses = new CheckoutStoreStatusSelector(selectors);\n\n    return {\n        data,\n        errors,\n        statuses,\n    };\n}\n","import { toSingleLine } from '../utility';\n\nexport default class ErrorMessageTransformer<TError extends Error = Error> {\n    constructor(\n        private _messageCustomizer: (type: TError) => string\n    ) {}\n\n    transform(error: TError): TError {\n        error.message = toSingleLine(this._messageCustomizer(error));\n\n        return error;\n    }\n}\n","export default function toSingleLine(input?: string) {\n    if (!input) {\n        return '';\n    }\n\n    return input.split(/(?:\\r\\n|\\n|\\r)/)\n        .map(line => line.replace(/^\\s+/gm, ''))\n        .join(' ')\n        .trim();\n}\n","import { Action, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs';\n\nimport { AddressRequestBody } from '../address';\nimport { BillingAddressActionCreator, BillingAddressRequestBody } from '../billing';\nimport { ErrorActionCreator, ErrorMessageTransformer } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\nimport { ConfigActionCreator } from '../config';\nimport { CouponActionCreator, GiftCertificateActionCreator } from '../coupon';\nimport { CustomerCredentials, CustomerInitializeOptions, CustomerRequestOptions, CustomerStrategyActionCreator, GuestCredentials } from '../customer';\nimport { CountryActionCreator } from '../geography';\nimport { OrderActionCreator, OrderRequestBody } from '../order';\nimport { PaymentInitializeOptions, PaymentMethodActionCreator, PaymentRequestOptions, PaymentStrategyActionCreator } from '../payment';\nimport { InstrumentActionCreator } from '../payment/instrument';\nimport { ConsignmentsRequestBody, ConsignmentActionCreator, ShippingCountryActionCreator, ShippingInitializeOptions, ShippingRequestOptions, ShippingStrategyActionCreator } from '../shipping';\nimport { ConsignmentAssignmentRequestBody, ConsignmentUpdateRequestBody } from '../shipping/consignment';\n\nimport { CheckoutRequestBody } from './checkout';\nimport CheckoutActionCreator from './checkout-action-creator';\nimport CheckoutParams from './checkout-params';\nimport CheckoutSelectors from './checkout-selectors';\nimport CheckoutStore from './checkout-store';\nimport createCheckoutSelectors from './create-checkout-selectors';\nimport createCheckoutServiceErrorTransformer from './create-checkout-service-error-transformer';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for completing the checkout process for the current customer.\n *\n * This object can be used to collect all information that is required for\n * checkout, such as shipping and billing information. It can also be used to\n * retrieve the current checkout state and subscribe to its changes.\n */\nexport default class CheckoutService {\n    private _state: CheckoutSelectors;\n    private _errorTransformer: ErrorMessageTransformer;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _store: CheckoutStore,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _configActionCreator: ConfigActionCreator,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _countryActionCreator: CountryActionCreator,\n        private _couponActionCreator: CouponActionCreator,\n        private _customerStrategyActionCreator: CustomerStrategyActionCreator,\n        private _errorActionCreator: ErrorActionCreator,\n        private _giftCertificateActionCreator: GiftCertificateActionCreator,\n        private _instrumentActionCreator: InstrumentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _shippingCountryActionCreator: ShippingCountryActionCreator,\n        private _shippingStrategyActionCreator: ShippingStrategyActionCreator\n    ) {\n        this._state = createCheckoutSelectors(this._store.getState());\n        this._errorTransformer = createCheckoutServiceErrorTransformer();\n\n        this._store.subscribe(state => {\n            this._state = createCheckoutSelectors(state);\n        });\n    }\n\n    /**\n     * Returns a snapshot of the current checkout state.\n     *\n     * The method returns a new instance every time there is a change in the\n     * checkout state. You can query the state by calling any of its getter\n     * methods.\n     *\n     * ```js\n     * const state = service.getState();\n     *\n     * console.log(state.data.getOrder());\n     * console.log(state.errors.getSubmitOrderError());\n     * console.log(state.statuses.isSubmittingOrder());\n     * ```\n     *\n     * @returns The current customer's checkout state\n     */\n    getState(): CheckoutSelectors {\n        return this._state;\n    }\n\n    /**\n     * Notifies all subscribers with the current state.\n     *\n     * When this method gets called, the subscribers get called regardless if\n     * they have any filters applied.\n     */\n    notifyState(): void {\n        this._store.notifyState();\n    }\n\n    /**\n     * Subscribes to any changes to the current state.\n     *\n     * The method registers a callback function and executes it every time there\n     * is a change in the checkout state.\n     *\n     * ```js\n     * service.subscribe(state => {\n     *     console.log(state.data.getCart());\n     * });\n     * ```\n     *\n     * The method can be configured to notify subscribers only regarding\n     * relevant changes, by providing a filter function.\n     *\n     * ```js\n     * const filter = state => state.data.getCart();\n     *\n     * // Only trigger the subscriber when the cart changes.\n     * service.subscribe(state => {\n     *     console.log(state.data.getCart())\n     * }, filter);\n     * ```\n     *\n     * @param subscriber - The function to subscribe to state changes.\n     * @param filters - One or more functions to filter out irrelevant state\n     * changes. If more than one function is provided, the subscriber will only\n     * be triggered if all conditions are met.\n     * @returns A function, if called, will unsubscribe the subscriber.\n     */\n    subscribe(\n        subscriber: (state: CheckoutSelectors) => void,\n        ...filters: Array<(state: CheckoutSelectors) => any>\n    ): () => void {\n        return this._store.subscribe(\n            () => subscriber(this.getState()),\n            ...filters.map(filter => (state: InternalCheckoutSelectors) => filter(createCheckoutSelectors(state)))\n        );\n    }\n\n    /**\n     * Loads the current checkout.\n     *\n     * This method can only be called if there is an active checkout. Also, it\n     * can only retrieve data that belongs to the current customer. When it is\n     * successfully executed, you can retrieve the data by calling\n     * `CheckoutStoreSelector#getCheckout`.\n     *\n     * ```js\n     * const state = await service.loadCheckout('0cfd6c06-57c3-4e29-8d7a-de55cc8a9052');\n     *\n     * console.log(state.data.getCheckout());\n     * ```\n     *\n     * @param id - The identifier of the checkout to load, or the default checkout if not provided.\n     * @param options - Options for loading the current checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    loadCheckout(id?: string, options?: RequestOptions<CheckoutParams>): Promise<CheckoutSelectors> {\n        return this._dispatch(id ?\n            this._checkoutActionCreator.loadCheckout(id, options) :\n            this._checkoutActionCreator.loadDefaultCheckout(options)\n        );\n    }\n\n    /**\n     * Updates specific properties of the current checkout.\n     *\n     * ```js\n     * const state = await service.updateCheckout(checkout);\n     *\n     * console.log(state.data.getCheckout());\n     * ```\n     *\n     * @param payload - The checkout properties to be updated.\n     * @param options - Options for loading the current checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    updateCheckout(payload: CheckoutRequestBody, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._checkoutActionCreator.updateCheckout(payload, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Loads an order by an id.\n     *\n     * The method can only retrieve an order if the order belongs to the current\n     * customer. If it is successfully executed, the data can be retrieved by\n     * calling `CheckoutStoreSelector#getOrder`.\n     *\n     * ```js\n     * const state = await service.loadOrder(123);\n     *\n     * console.log(state.data.getOrder());\n     * ```\n     *\n     * @param orderId - The identifier of the order to load.\n     * @param options - Options for loading the order.\n     * @returns A promise that resolves to the current state.\n     */\n    loadOrder(orderId: number, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const loadCheckoutAction = this._orderActionCreator.loadOrder(orderId, options);\n        const loadConfigAction = this._configActionCreator.loadConfig(options);\n\n        return Promise.all([\n            this._dispatch(loadCheckoutAction),\n            this._dispatch(loadConfigAction, { queueId: 'config' }),\n        ])\n            .then(() => this.getState());\n    }\n\n    /**\n     * Submits an order, thereby completing a checkout process.\n     *\n     * Before you can submit an order, you must initialize the payment method\n     * chosen by the customer by calling `CheckoutService#initializePayment`.\n     *\n     * ```js\n     * await service.initializePayment({ methodId: 'braintree' });\n     * await service.submitOrder({\n     *     payment: {\n     *         methodId: 'braintree',\n     *         paymentData: {\n     *             ccExpiry: { month: 10, year: 20 },\n     *             ccName: 'BigCommerce',\n     *             ccNumber: '4111111111111111',\n     *             ccCvv: 123,\n     *         },\n     *     },\n     * });\n     * ```\n     *\n     * You are not required to include `paymentData` if the order does not\n     * require additional payment details. For example, the customer has already\n     * entered their payment details on the cart page using one of the hosted\n     * payment methods, such as PayPal. Or the customer has applied a gift\n     * certificate that exceeds the grand total amount.\n     *\n     * If the order is submitted successfully, you can retrieve the newly\n     * created order by calling `CheckoutStoreSelector#getOrder`.\n     *\n     * ```js\n     * const state = await service.submitOrder(payload);\n     *\n     * console.log(state.data.getOrder());\n     * ```\n     *\n     * @param payload - The request payload to submit for the current order.\n     * @param options - Options for submitting the current order.\n     * @returns A promise that resolves to the current state.\n     */\n    submitOrder(payload: OrderRequestBody, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.execute(payload, options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Finalizes the submission process for an order.\n     *\n     * This method is only required for certain hosted payment methods that\n     * require a customer to enter their credit card details on their website.\n     * You need to call this method once the customer has redirected back to\n     * checkout in order to complete the checkout process.\n     *\n     * If the method is called before order finalization is required or for a\n     * payment method that does not require order finalization, an error will be\n     * thrown. Conversely, if the method is called successfully, you should\n     * immediately redirect the customer to the order confirmation page.\n     *\n     * ```js\n     * try {\n     *     await service.finalizeOrderIfNeeded();\n     *\n     *     window.location.assign('/order-confirmation');\n     * } catch (error) {\n     *     if (error.type !== 'order_finalization_not_required') {\n     *         throw error;\n     *     }\n     * }\n     * ```\n     *\n     * @param options - Options for finalizing the current order.\n     * @returns A promise that resolves to the current state.\n     * @throws `OrderFinalizationNotRequiredError` error if order finalization\n     * is not required for the current order at the time of execution.\n     */\n    finalizeOrderIfNeeded(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.finalize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Loads a list of payment methods available for checkout.\n     *\n     * If a customer enters their payment details before navigating to the\n     * checkout page (i.e.: using PayPal checkout button on the cart page), only\n     * one payment method will be available for the customer - the selected\n     * payment method. Otherwise, by default, all payment methods configured by\n     * the merchant will be available for the customer.\n     *\n     * Once the method is executed successfully, you can call\n     * `CheckoutStoreSelector#getPaymentMethods` to retrieve the list of payment\n     * methods.\n     *\n     * ```js\n     * const state = service.loadPaymentMethods();\n     *\n     * console.log(state.data.getPaymentMethods());\n     * ```\n     *\n     * @param options - Options for loading the payment methods that are\n     * available to the current customer.\n     * @returns A promise that resolves to the current state.\n     */\n    loadPaymentMethods(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentMethodActionCreator.loadPaymentMethods(options);\n\n        return this._dispatch(action, { queueId: 'paymentMethods' });\n    }\n\n    /**\n     * Loads a payment method by an id.\n     *\n     * This method does not work with multi-option payment providers. Due to its\n     * limitation, it is deprecated and will be removed in the future.\n     *\n     * @deprecated\n     * @internal\n     * @param methodId - The identifier for the payment method to load.\n     * @param options - Options for loading the payment method.\n     * @returns A promise that resolves to the current state.\n     */\n    loadPaymentMethod(methodId: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentMethodActionCreator.loadPaymentMethod(methodId, options);\n\n        return this._dispatch(action, { queueId: 'paymentMethods' });\n    }\n\n    /**\n     * Initializes the payment step of a checkout process.\n     *\n     * Before a payment method can accept payment details, it must first be\n     * initialized. Some payment methods require you to provide additional\n     * initialization options. For example, Amazon requires a container ID in\n     * order to initialize their payment widget.\n     *\n     * ```js\n     * await service.initializePayment({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'walletWidget',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the payment step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializePayment(options: PaymentInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * De-initializes the payment step of a checkout process.\n     *\n     * The method should be called once you no longer require a payment method\n     * to be initialized. It can perform any necessary clean-up behind the\n     * scene, i.e.: remove DOM nodes or event handlers that are attached as a\n     * result of payment initialization.\n     *\n     * ```js\n     * await service.deinitializePayment({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the payment step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializePayment(options: PaymentRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Loads a list of countries available for billing.\n     *\n     * Once you make a successful request, you will be able to retrieve the list\n     * of countries by calling `CheckoutStoreSelector#getBillingCountries`.\n     *\n     * ```js\n     * const state = await service.loadBillingCountries();\n     *\n     * console.log(state.data.getBillingCountries());\n     * ```\n     *\n     * @param options - Options for loading the available billing countries.\n     * @returns A promise that resolves to the current state.\n     */\n    loadBillingCountries(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._countryActionCreator.loadCountries(options);\n\n        return this._dispatch(action, { queueId: 'billingCountries' });\n    }\n\n    /**\n     * Loads a list of countries available for shipping.\n     *\n     * The list is determined based on the shipping zones configured by a\n     * merchant. Once you make a successful call, you will be able to retrieve\n     * the list of available shipping countries by calling\n     * `CheckoutStoreSelector#getShippingCountries`.\n     *\n     * ```js\n     * const state = await service.loadShippingCountries();\n     *\n     * console.log(state.data.getShippingCountries());\n     * ```\n     *\n     * @param options - Options for loading the available shipping countries.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingCountries(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingCountryActionCreator.loadCountries(options);\n\n        return this._dispatch(action, { queueId: 'shippingCountries' });\n    }\n\n    /**\n     * Loads a set of form fields that should be presented to customers in order\n     * to capture their billing address.\n     *\n     * Once the method has been executed successfully, you can call\n     * `CheckoutStoreSelector#getBillingAddressFields` to retrieve the set of\n     * form fields.\n     *\n     * ```js\n     * const state = service.loadBillingAddressFields();\n     *\n     * console.log(state.data.getBillingAddressFields('US'));\n     * ```\n     *\n     * @param options - Options for loading the billing address form fields.\n     * @returns A promise that resolves to the current state.\n     */\n    loadBillingAddressFields(options?: RequestOptions): Promise<CheckoutSelectors> {\n        return this.loadBillingCountries(options);\n    }\n\n    /**\n     * Loads a set of form fields that should be presented to customers in order\n     * to capture their shipping address.\n     *\n     * Once the method has been executed successfully, you can call\n     * `CheckoutStoreSelector#getShippingAddressFields` to retrieve the set of\n     * form fields.\n     *\n     * ```js\n     * const state = service.loadShippingAddressFields();\n     *\n     * console.log(state.data.getShippingAddressFields('US'));\n     * ```\n     *\n     * @param options - Options for loading the shipping address form fields.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingAddressFields(options?: RequestOptions): Promise<CheckoutSelectors> {\n        return this.loadShippingCountries(options);\n    }\n\n    /**\n     * Initializes the sign-in step of a checkout process.\n     *\n     * Some payment methods, such as Amazon, have their own sign-in flow. In\n     * order to support them, this method must be called.\n     *\n     * ```js\n     * await service.initializeCustomer({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'signInButton',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the customer step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeCustomer(options?: CustomerInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * De-initializes the sign-in step of a checkout process.\n     *\n     * It should be called once you no longer want to prompt customers to sign\n     * in. It can perform any necessary clean-up behind the scene, i.e.: remove\n     * DOM nodes or event handlers that are attached as a result of customer\n     * initialization.\n     *\n     * ```js\n     * await service.deinitializeCustomer({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the customer step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeCustomer(options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Continues to check out as a guest.\n     *\n     * The customer is required to provide their email address in order to\n     * continue. Once they provide their email address, it will be stored as a\n     * part of their billing address.\n     *\n     * @param credentials - The guest credentials to use.\n     * @param options - Options for continuing as a guest.\n     * @returns A promise that resolves to the current state.\n     */\n    continueAsGuest(credentials: GuestCredentials, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._billingAddressActionCreator.continueAsGuest(credentials, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Signs into a customer's registered account.\n     *\n     * Once the customer is signed in successfully, the checkout state will be\n     * populated with information associated with the customer, such as their\n     * saved addresses. You can call `CheckoutStoreSelector#getCustomer` to\n     * retrieve the data.\n     *\n     * ```js\n     * const state = await service.signInCustomer({\n     *     email: 'foo@bar.com',\n     *     password: 'password123',\n     * });\n     *\n     * console.log(state.data.getCustomer());\n     * ```\n     *\n     * @param credentials - The credentials to be used for signing in the customer.\n     * @param options - Options for signing in the customer.\n     * @returns A promise that resolves to the current state.\n     */\n    signInCustomer(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.signIn(credentials, options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Signs out the current customer if they are previously signed in.\n     *\n     * Once the customer is successfully signed out, the checkout state will be\n     * reset automatically.\n     *\n     * ```js\n     * const state = await service.signOutCustomer();\n     *\n     * // The returned object should not contain information about the previously signed-in customer.\n     * console.log(state.data.getCustomer());\n     * ```\n     *\n     * @param options - Options for signing out the customer.\n     * @returns A promise that resolves to the current state.\n     */\n    signOutCustomer(options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.signOut(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Loads a list of shipping options available for checkout.\n     *\n     * Available shipping options can only be determined once a customer\n     * provides their shipping address. If the method is executed successfully,\n     * `CheckoutStoreSelector#getShippingOptions` can be called to retrieve the\n     * list of shipping options.\n     *\n     * ```js\n     * const state = await service.loadShippingOptions();\n     *\n     * console.log(state.data.getShippingOptions());\n     * ```\n     *\n     * @param options - Options for loading the available shipping options.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingOptions(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.loadShippingOptions(options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Initializes the shipping step of a checkout process.\n     *\n     * Some payment methods, such as Amazon, can provide shipping information to\n     * be used for checkout. In order to support them, this method must be\n     * called.\n     *\n     * ```js\n     * await service.initializeShipping({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'addressBook',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the shipping step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeShipping(options?: ShippingInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * De-initializes the shipping step of a checkout process.\n     *\n     * It should be called once you no longer need to collect shipping details.\n     * It can perform any necessary clean-up behind the scene, i.e.: remove DOM\n     * nodes or event handlers that are attached as a result of shipping\n     * initialization.\n     *\n     * ```js\n     * await service.deinitializeShipping({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the shipping step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeShipping(options?: ShippingRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Selects a shipping option for the current address.\n     *\n     * If a shipping option has an additional cost, the quote for the current\n     * order will be adjusted once the option is selected.\n     *\n     * ```js\n     * const state = await service.selectShippingOption('address-id', 'shipping-option-id');\n     *\n     * console.log(state.data.getSelectedShippingOption());\n     * ```\n     *\n     * @param shippingOptionId - The identifier of the shipping option to\n     * select.\n     * @param options - Options for selecting the shipping option.\n     * @returns A promise that resolves to the current state.\n     */\n    selectShippingOption(shippingOptionId: string, options?: ShippingRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.selectOption(shippingOptionId, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates the shipping address for the current checkout.\n     *\n     * When a customer updates their shipping address for an order, they will\n     * see an updated list of shipping options and the cost for each option,\n     * unless no options are available. If the update is successful, you can\n     * call `CheckoutStoreSelector#getShippingAddress` to retrieve the address.\n     *\n     * If the shipping address changes and the selected shipping option becomes\n     * unavailable for the updated address, the shipping option will be\n     * deselected.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateShippingAddress(address);\n     *\n     * console.log(state.data.getShippingAddress());\n     * ```\n     *\n     * @param address - The address to be used for shipping.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateShippingAddress(address: AddressRequestBody, options?: ShippingRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.updateAddress(address, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Creates consignments given a list.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#updateShippingAddress`.\n     *\n     * When consignments are created, an updated list of shipping options will\n     * become available for each consignment, unless no options are available.\n     * If the update is successful, you can call\n     * `CheckoutStoreSelector#getConsignments` to retrieve the updated list of\n     * consignments.'\n     *\n     * Beware that if a consignment includes all line items from another\n     * consignment, that consignment will be deleted as a valid consignment must\n     * include at least one valid line item.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.createConsignments(consignments);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignments - The list of consignments to be created.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    createConsignments(\n        consignments: ConsignmentsRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.createConsignments(consignments, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Deletes a consignment\n     *\n     * ```js\n     * const state = await service.deleteConsignment('55c96cda6f04c');\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignmentId - The ID of the consignment to be deleted\n     * @param options - Options for the consignment delete request\n     * @returns A promise that resolves to the current state.\n     */\n    deleteConsignment(\n        consignmentId: string,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.deleteConsignment(consignmentId, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates a specific consignment.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#selectShippingOption`.\n     *\n     * When a shipping address for a consignment is updated, an updated list of\n     * shipping options will become available for the consignment, unless no\n     * options are available. If the update is successful, you can call\n     * `CheckoutStoreSelector#getConsignments` to retrieve updated list of\n     * consignments.\n     *\n     * Beware that if the updated consignment includes all line items from another\n     * consignment, that consignment will be deleted as a valid consignment must\n     * include at least one valid line item.\n     *\n     * If the shipping address changes and the selected shipping option becomes\n     * unavailable for the updated address, the shipping option will be\n     * deselected.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateConsignment(consignment);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignment - The consignment data that will be used.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateConsignment(\n        consignment: ConsignmentUpdateRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.updateConsignment(consignment, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Convenience method that assigns items to be shipped to a specific address.\n     *\n     * Note: this method finds an existing consignment that matches the provided address\n     * and assigns the provided items. If no consignment matches the address, a new one\n     * will be created.\n     *\n     * @param consignment - The consignment data that will be used.\n     * @param options - Options for the request\n     * @returns A promise that resolves to the current state.\n     */\n    assignItemsToAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.assignItemsByAddress(consignment, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Convenience method that unassigns items from a specific shipping address.\n     *\n     * Note: this method finds an existing consignment that matches the provided address\n     * and unassigns the specified items. If the consignment ends up with no line items\n     * after the unassignment, it will be deleted.\n     *\n     * @param consignment - The consignment data that will be used.\n     * @param options - Options for the request\n     * @returns A promise that resolves to the current state.\n     */\n    unassignItemsToAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.unassignItemsByAddress(consignment, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Selects a shipping option for a given consignment.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#updateShippingAddres`.\n     *\n     * If a shipping option has an additional cost, the quote for the current\n     * order will be adjusted once the option is selected.\n     *\n     * ```js\n     * const state = await service.selectConsignmentShippingOption(consignmentId, optionId);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignmentId - The identified of the consignment to be updated.\n     * @param shippingOptionId - The identifier of the shipping option to\n     * select.\n     * @param options - Options for selecting the shipping option.\n     * @returns A promise that resolves to the current state.\n     */\n    selectConsignmentShippingOption(\n        consignmentId: string,\n        shippingOptionId: string,\n        options?: ShippingRequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.updateShippingOption({\n            id: consignmentId,\n            shippingOptionId,\n        }, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates the billing address for the current checkout.\n     *\n     * A customer must provide their billing address before they can proceed to\n     * pay for their order.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateBillingAddress(address);\n     *\n     * console.log(state.data.getBillingAddress());\n     * ```\n     *\n     * @param address - The address to be used for billing.\n     * @param options - Options for updating the billing address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateBillingAddress(address: BillingAddressRequestBody, options: RequestOptions = {}): Promise<CheckoutSelectors> {\n        const action = this._billingAddressActionCreator.updateAddress(address, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Applies a coupon code to the current checkout.\n     *\n     * Once the coupon code gets applied, the quote for the current checkout will\n     * be adjusted accordingly. The same coupon code cannot be applied more than\n     * once.\n     *\n     * ```js\n     * await service.applyCoupon('COUPON');\n     * ```\n     *\n     * @param code - The coupon code to apply to the current checkout.\n     * @param options - Options for applying the coupon code.\n     * @returns A promise that resolves to the current state.\n     */\n    applyCoupon(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._couponActionCreator.applyCoupon(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Removes a coupon code from the current checkout.\n     *\n     * Once the coupon code gets removed, the quote for the current checkout will\n     * be adjusted accordingly.\n     *\n     * ```js\n     * await service.removeCoupon('COUPON');\n     * ```\n     *\n     * @param code - The coupon code to remove from the current checkout.\n     * @param options - Options for removing the coupon code.\n     * @returns A promise that resolves to the current state.\n     */\n    removeCoupon(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._couponActionCreator.removeCoupon(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Applies a gift certificate to the current checkout.\n     *\n     * Once the gift certificate gets applied, the quote for the current\n     * checkout will be adjusted accordingly.\n     *\n     * ```js\n     * await service.applyGiftCertificate('GIFT_CERTIFICATE');\n     * ```\n     *\n     * @param code - The gift certificate to apply to the current checkout.\n     * @param options - Options for applying the gift certificate.\n     * @returns A promise that resolves to the current state.\n     */\n    applyGiftCertificate(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._giftCertificateActionCreator.applyGiftCertificate(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Removes a gift certificate from an order.\n     *\n     * Once the gift certificate gets removed, the quote for the current\n     * checkout will be adjusted accordingly.\n     *\n     * ```js\n     * await service.removeGiftCertificate('GIFT_CERTIFICATE');\n     * ```\n     *\n     * @param code - The gift certificate to remove from the current checkout.\n     * @param options - Options for removing the gift certificate.\n     * @returns A promise that resolves to the current state.\n     */\n    removeGiftCertificate(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._giftCertificateActionCreator.removeGiftCertificate(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Loads a list of payment instruments associated with a customer.\n     *\n     * Once the method has been called successfully, you can retrieve the list\n     * of payment instruments by calling `CheckoutStoreSelector#getInstruments`.\n     * If the customer does not have any payment instruments on record, i.e.:\n     * credit card, you will get an empty list instead.\n     *\n     * ```js\n     * const state = service.loadInstruments();\n     *\n     * console.log(state.data.getInstruments());\n     * ```\n     *\n     * @returns A promise that resolves to the current state.\n     */\n    loadInstruments(): Promise<CheckoutSelectors> {\n        const action = this._instrumentActionCreator.loadInstruments();\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Deletes a payment instrument by an id.\n     *\n     * Once an instrument gets removed, it can no longer be retrieved using\n     * `CheckoutStoreSelector#getInstruments`.\n     *\n     * ```js\n     * const state = service.deleteInstrument('123');\n     *\n     * console.log(state.data.getInstruments());\n     * ```\n     *\n     * @param instrumentId - The identifier of the payment instrument to delete.\n     * @returns A promise that resolves to the current state.\n     */\n    deleteInstrument(instrumentId: string): Promise<CheckoutSelectors> {\n        const action = this._instrumentActionCreator.deleteInstrument(instrumentId);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Clear errors that have been collected from previous calls.\n     *\n     * ```js\n     * const state = await service.clearError(error);\n     *\n     * console.log(state.errors.getError());\n     * ```\n     *\n     * @param error - Specific error object to clear\n     * @returns A promise that resolves to the current state.\n     */\n    clearError(error: Error): Promise<CheckoutSelectors> {\n        const action = this._errorActionCreator.clearError(error);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Dispatches an action through the data store and returns the current state\n     * once the action is dispatched.\n     *\n     * @param action - The action to dispatch.\n     * @returns A promise that resolves to the current state.\n     */\n    private _dispatch(action: Action | Observable<Action> | ThunkAction<Action>, options?: { queueId?: string }): Promise<CheckoutSelectors> {\n        return this._store.dispatch(action, options)\n            .then(() => this.getState())\n            .catch(error => {\n                throw this._errorTransformer.transform(error);\n            });\n    }\n}\n","import { ErrorMessageTransformer } from '../common/error';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../common/error/errors';\nimport { getEnvironment } from '../common/utility';\n\nexport type CheckoutServiceErrorType = MissingDataError | NotInitializedError;\nexport type CheckoutServiceErrorTransformer = ErrorMessageTransformer<CheckoutServiceErrorType | Error>;\n\nexport default function createCheckoutServiceErrorTransformer(\n    isDevelopment: boolean = getEnvironment() === 'development'\n): CheckoutServiceErrorTransformer {\n    return new ErrorMessageTransformer(error => {\n        if (!isDevelopment || !isCheckoutServiceError(error)) {\n            return error.message;\n        }\n\n        switch (error.subtype || error.type) {\n        case MissingDataErrorType.MissingConsignments:\n            return `\n                ${error.message}\n                The data could be unavailable because no shipping address has been provided.\n                To fix this, create a consignment or update the shipping address before performing\n                the same action again.\n            `;\n\n        case MissingDataErrorType.MissingCart:\n        case MissingDataErrorType.MissingCheckout:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you can try calling \\`CheckoutService#loadCheckout\\`\n                before performing the same action again.\n            `;\n\n        case MissingDataErrorType.MissingCheckoutConfig:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you need to make sure \\`CheckoutService\\` is initialized\n                properly by calling \\`CheckoutService#loadCheckout\\` before performing any\n                other actions.\n            `;\n\n        case MissingDataErrorType.MissingOrder:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you can try calling \\`CheckoutService#loadOrder\\`\n                before performing the same action again.\n            `;\n\n        case MissingDataErrorType.MissingOrderId:\n            return `\n                ${error.message}\n                The data could be unavailable because no order has been created yet. You have\n                to first create the order before you can perform the action.\n            `;\n\n        case MissingDataErrorType.MissingPaymentMethod:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server, or\n                configured by the merchant yet. To fix the former issue, you can try calling\n                \\`CheckoutService#loadPaymentMethods\\` before performing the same action again.\n            `;\n\n        case NotInitializedErrorType.CustomerNotInitialized:\n            return `\n                In order to initialize the customer step of checkout, you need to call\n                \\`CheckoutService#initializeCustomer\\`. Afterwards, you should be able to\n                submit customer details.\n            `;\n\n        case NotInitializedErrorType.PaymentNotInitialized:\n            return `\n                ${error.message}\n                In order to initialize the payment step of checkout, you need to call\n                \\`CheckoutService#initializePayment\\`. Afterwards, you should be able to\n                submit payment details.\n            `;\n\n        case NotInitializedErrorType.ShippingNotInitialized:\n            return `\n                ${error.message}\n                In order to initialize the shipping step of checkout, you need to call\n                \\`CheckoutService#initializeShipping\\`. Afterwards, you should be able to\n                submit shipping details.\n            `;\n\n        default:\n            return error.message;\n        }\n    });\n}\n\nfunction isCheckoutServiceError(error: any): error is CheckoutServiceErrorType {\n    return !!(error.subtype || error.type);\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../billing';\nimport { ErrorActionCreator } from '../common/error';\nimport { getDefaultLogger } from '../common/log';\nimport { getEnvironment } from '../common/utility';\nimport { ConfigActionCreator, ConfigRequestSender, ConfigState } from '../config';\nimport { CouponActionCreator, CouponRequestSender, GiftCertificateActionCreator, GiftCertificateRequestSender } from '../coupon';\nimport { createCustomerStrategyRegistry, CustomerStrategyActionCreator } from '../customer';\nimport { CountryActionCreator, CountryRequestSender } from '../geography';\nimport { OrderActionCreator, OrderRequestSender } from '../order';\nimport { createPaymentClient, createPaymentStrategyRegistry, PaymentMethodActionCreator, PaymentMethodRequestSender, PaymentStrategyActionCreator } from '../payment';\nimport { InstrumentActionCreator, InstrumentRequestSender } from '../payment/instrument';\nimport { createShippingStrategyRegistry, ConsignmentActionCreator, ConsignmentRequestSender, ShippingCountryActionCreator, ShippingCountryRequestSender, ShippingStrategyActionCreator } from '../shipping';\n\nimport CheckoutActionCreator from './checkout-action-creator';\nimport CheckoutRequestSender from './checkout-request-sender';\nimport CheckoutService from './checkout-service';\nimport CheckoutValidator from './checkout-validator';\nimport createCheckoutStore from './create-checkout-store';\n\n/**\n * Creates an instance of `CheckoutService`.\n *\n * @remarks\n * ```js\n * const service = createCheckoutService();\n *\n * service.subscribe(state => {\n *     console.log(state);\n * });\n *\n * service.loadCheckout();\n * ```\n *\n * @param options - A set of construction options.\n * @returns an instance of `CheckoutService`.\n */\nexport default function createCheckoutService(options?: CheckoutServiceOptions): CheckoutService {\n    if (document.location.protocol !== 'https:') {\n        getDefaultLogger().warn('The BigCommerce Checkout SDK should not be used on a non-HTTPS page');\n    }\n\n    if (getEnvironment() !== 'production') {\n        getDefaultLogger().warn('Note that the development build is not optimized. To create a production build, set process.env.NODE_ENV to `production`.');\n    }\n\n    const config: ConfigState = {\n        meta: {\n            externalSource: options && options.externalSource,\n        },\n        errors: {},\n        statuses: {},\n    };\n    const { locale = '', shouldWarnMutation = true } = options || {};\n    const requestSender = createRequestSender({ host: options && options.host });\n    const store = createCheckoutStore({ config }, { shouldWarnMutation });\n    const paymentClient = createPaymentClient(store);\n    const orderRequestSender = new OrderRequestSender(requestSender);\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const configActionCreator = new ConfigActionCreator(new ConfigRequestSender(requestSender));\n    const orderActionCreator = new OrderActionCreator(orderRequestSender, new CheckoutValidator(checkoutRequestSender));\n\n    return new CheckoutService(\n        store,\n        new BillingAddressActionCreator(new BillingAddressRequestSender(requestSender)),\n        new CheckoutActionCreator(checkoutRequestSender, configActionCreator),\n        configActionCreator,\n        new ConsignmentActionCreator(new ConsignmentRequestSender(requestSender), checkoutRequestSender),\n        new CountryActionCreator(new CountryRequestSender(requestSender, { locale })),\n        new CouponActionCreator(new CouponRequestSender(requestSender)),\n        new CustomerStrategyActionCreator(createCustomerStrategyRegistry(store, requestSender)),\n        new ErrorActionCreator(),\n        new GiftCertificateActionCreator(new GiftCertificateRequestSender(requestSender)),\n        new InstrumentActionCreator(new InstrumentRequestSender(paymentClient, requestSender)),\n        orderActionCreator,\n        new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender)),\n        new PaymentStrategyActionCreator(\n            createPaymentStrategyRegistry(store, paymentClient, requestSender),\n            orderActionCreator\n        ),\n        new ShippingCountryActionCreator(new ShippingCountryRequestSender(requestSender, { locale })),\n        new ShippingStrategyActionCreator(createShippingStrategyRegistry(store, requestSender))\n    );\n}\n\nexport interface CheckoutServiceOptions {\n    locale?: string;\n    host?: string;\n    shouldWarnMutation?: boolean;\n    externalSource?: string;\n}\n","// tslint:disable-next-line:no-reference\n/// <reference path=\"../payment/bigpay-client.d.ts\" />\nimport { createClient as createBigpayClient } from '@bigcommerce/bigpay-client';\n\nimport { CheckoutStore } from '../checkout';\n\nexport default function createPaymentClient(store: CheckoutStore) {\n    const paymentClient = createBigpayClient();\n\n    store.subscribe(\n        state => {\n            const config = state.config.getStoreConfig();\n\n            if (config) {\n                paymentClient.setHost(config.paymentSettings.bigpayBaseUrl);\n            }\n        },\n        state => state.config.getStoreConfig()\n    );\n\n    return paymentClient;\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\nimport { AmazonPayScriptLoader } from '../payment/strategies/amazon-pay';\nimport {\n    createBraintreeVisaCheckoutPaymentProcessor,\n    BraintreeScriptLoader,\n    BraintreeSDKCreator,\n    VisaCheckoutScriptLoader\n} from '../payment/strategies/braintree';\nimport { ChasePayScriptLoader } from '../payment/strategies/chasepay';\nimport { createGooglePayPaymentProcessor, GooglePayBraintreeInitializer, GooglePayStripeInitializer } from '../payment/strategies/googlepay';\nimport { MasterpassScriptLoader } from '../payment/strategies/masterpass';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\n\nimport CustomerActionCreator from './customer-action-creator';\nimport CustomerRequestSender from './customer-request-sender';\nimport CustomerStrategyActionCreator from './customer-strategy-action-creator';\nimport { CustomerStrategy } from './strategies';\nimport { AmazonPayCustomerStrategy } from './strategies/amazon';\nimport { BraintreeVisaCheckoutCustomerStrategy } from './strategies/braintree';\nimport { ChasePayCustomerStrategy } from './strategies/chasepay';\nimport { DefaultCustomerStrategy } from './strategies/default';\nimport { GooglePayCustomerStrategy } from './strategies/googlepay';\nimport { MasterpassCustomerStrategy } from './strategies/masterpass';\nimport { SquareCustomerStrategy } from './strategies/square';\n\nexport default function createCustomerStrategyRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender\n): Registry<CustomerStrategy> {\n    const registry = new Registry<CustomerStrategy>();\n    const scriptLoader = getScriptLoader();\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const checkoutActionCreator = new CheckoutActionCreator(\n        checkoutRequestSender,\n        new ConfigActionCreator(new ConfigRequestSender(requestSender))\n    );\n    const formPoster = createFormPoster();\n    const paymentMethodActionCreator = new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender));\n    const remoteCheckoutRequestSender = new RemoteCheckoutRequestSender(requestSender);\n    const remoteCheckoutActionCreator = new RemoteCheckoutActionCreator(remoteCheckoutRequestSender);\n\n    registry.register('amazon', () =>\n        new AmazonPayCustomerStrategy(\n            store,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            remoteCheckoutRequestSender,\n            new AmazonPayScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('braintreevisacheckout', () =>\n        new BraintreeVisaCheckoutCustomerStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            new CustomerStrategyActionCreator(registry),\n            remoteCheckoutActionCreator,\n            createBraintreeVisaCheckoutPaymentProcessor(scriptLoader, requestSender),\n            new VisaCheckoutScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('chasepay', () =>\n        new ChasePayCustomerStrategy(\n            store,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new ChasePayScriptLoader(scriptLoader),\n            requestSender,\n            formPoster\n        )\n    );\n\n    registry.register('squarev2', () =>\n        new SquareCustomerStrategy(\n            store,\n            new RemoteCheckoutActionCreator(remoteCheckoutRequestSender)\n        )\n    );\n\n    registry.register('masterpass', () =>\n        new MasterpassCustomerStrategy(\n            store,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new MasterpassScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('googlepaybraintree', () =>\n        new GooglePayCustomerStrategy(\n            store,\n            remoteCheckoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayBraintreeInitializer(\n                    new BraintreeSDKCreator(\n                        new BraintreeScriptLoader(scriptLoader)\n                    )\n                )\n            ),\n            formPoster\n        )\n    );\n\n    registry.register('googlepaystripe', () =>\n        new GooglePayCustomerStrategy(\n            store,\n            remoteCheckoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayStripeInitializer()\n            ),\n            formPoster\n    )\n);\n\n    registry.register('default', () =>\n        new DefaultCustomerStrategy(\n            store,\n            new CustomerActionCreator(\n                new CustomerRequestSender(requestSender),\n                checkoutActionCreator\n            )\n        )\n    );\n\n    return registry;\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\nimport { AmazonPayScriptLoader } from '../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\n\nimport ConsignmentActionCreator from './consignment-action-creator';\nimport ConsignmentRequestSender from './consignment-request-sender';\nimport { ShippingStrategy } from './strategies';\nimport { AmazonPayShippingStrategy } from './strategies/amazon';\nimport { DefaultShippingStrategy } from './strategies/default';\n\nexport default function createShippingStrategyRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender\n): Registry<ShippingStrategy> {\n    const registry = new Registry<ShippingStrategy>();\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const consignmentRequestSender = new ConsignmentRequestSender(requestSender);\n    const consignmentActionCreator = new ConsignmentActionCreator(consignmentRequestSender, checkoutRequestSender);\n\n    registry.register('amazon', () =>\n        new AmazonPayShippingStrategy(\n            store,\n            consignmentActionCreator,\n            new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender)),\n            new RemoteCheckoutActionCreator(new RemoteCheckoutRequestSender(requestSender)),\n            new AmazonPayScriptLoader(getScriptLoader())\n        )\n    );\n\n    registry.register('default', () =>\n        new DefaultShippingStrategy(\n            store,\n            consignmentActionCreator\n        )\n    );\n\n    return registry;\n}\n","import { EmbeddedCheckoutFrameLoadedEvent } from '../embedded-checkout-events';\n\nexport default function handleFrameLoadedEvent(message: EmbeddedCheckoutFrameLoadedEvent): void {\n    if (!message.payload || !message.payload.contentId) {\n        return;\n    }\n\n    const body = document.getElementById(message.payload.contentId);\n\n    if (!body || body.hasAttribute('data-iframe-height')) {\n        return;\n    }\n\n    body.setAttribute('data-iframe-height', '');\n}\n","export default interface CustomError extends Error {\n    message: string;\n    type: string;\n    subtype?: string;\n}\n\nexport function isCustomError(error: any): error is CustomError {\n    return (\n        typeof error.message === 'string' &&\n        typeof error.type === 'string' &&\n        (typeof error.subtype === 'string' || !error.subtype) &&\n        error instanceof Error\n    );\n}\n","import { isCustomError, CustomError } from '../../common/error/errors';\nimport EmbeddedCheckoutError from '../embedded-checkout-error';\nimport {\n    EmbeddedCheckoutCompleteEvent,\n    EmbeddedCheckoutErrorEvent,\n    EmbeddedCheckoutEvent,\n    EmbeddedCheckoutEventMap,\n    EmbeddedCheckoutEventType,\n    EmbeddedCheckoutFrameErrorEvent,\n    EmbeddedCheckoutFrameLoadedEvent,\n    EmbeddedCheckoutLoadedEvent,\n    EmbeddedCheckoutSignedOutEvent,\n} from '../embedded-checkout-events';\nimport EmbeddedCheckoutStyles from '../embedded-checkout-styles';\nimport IframeEventListener from '../iframe-event-listener';\nimport IframeEventPoster from '../iframe-event-poster';\n\nimport EmbeddedCheckoutMessenger from './embedded-checkout-messenger';\nimport { EmbeddedContentEventMap, EmbeddedContentEventType } from './embedded-content-events';\nimport EmbeddedContentOptions from './embedded-content-options';\n\nexport default class IframeEmbeddedCheckoutMessenger implements EmbeddedCheckoutMessenger {\n    /**\n     * @internal\n     */\n    constructor(\n        private _messageListener: IframeEventListener<EmbeddedContentEventMap>,\n        private _messagePoster: IframeEventPoster<EmbeddedCheckoutEvent>,\n        private _untargetedMessagePoster: IframeEventPoster<EmbeddedCheckoutEvent>,\n        private _messageHandlers: EventCallbacks<EmbeddedCheckoutEventMap> = {}\n    ) {\n        this._messageListener.listen();\n    }\n\n    postComplete(): void {\n        const message: EmbeddedCheckoutCompleteEvent = {\n            type: EmbeddedCheckoutEventType.CheckoutComplete,\n        };\n\n        this._postMessage(message);\n    }\n\n    postError(payload: Error | CustomError): void {\n        const message: EmbeddedCheckoutErrorEvent = {\n            type: EmbeddedCheckoutEventType.CheckoutError,\n            payload: this._transformError(payload),\n        };\n\n        this._postMessage(message);\n    }\n\n    postFrameError(payload: Error | CustomError): void {\n        const message: EmbeddedCheckoutFrameErrorEvent = {\n            type: EmbeddedCheckoutEventType.FrameError,\n            payload: this._transformError(payload),\n        };\n\n        // Ideally, all messages should be targeted at a specific origin.\n        // However, for `FrameError` message, we have to post it in an\n        // untargeted fashion. This is because the error could be caused by a\n        // missing cart. That makes it not possible to determine of site origin\n        // of the parent window. Nevertheless, we still want to notify the\n        // parent window about the error.\n        this._postMessage(message, { untargeted: true });\n    }\n\n    postFrameLoaded(payload?: EmbeddedContentOptions): void {\n        const message: EmbeddedCheckoutFrameLoadedEvent = {\n            type: EmbeddedCheckoutEventType.FrameLoaded,\n            payload,\n        };\n\n        this._postMessage(message);\n    }\n\n    postLoaded(): void {\n        const message: EmbeddedCheckoutLoadedEvent = {\n            type: EmbeddedCheckoutEventType.CheckoutLoaded,\n        };\n\n        this._postMessage(message);\n    }\n\n    postSignedOut(): void {\n        const message: EmbeddedCheckoutSignedOutEvent = {\n            type: EmbeddedCheckoutEventType.SignedOut,\n        };\n\n        this._postMessage(message);\n    }\n\n    receiveStyles(handler: (styles: EmbeddedCheckoutStyles) => void): void {\n        this._messageListener.addListener(EmbeddedContentEventType.StyleConfigured, ({ payload }) => {\n            handler(payload);\n        });\n    }\n\n    private _postMessage(message: EmbeddedCheckoutEvent, options?: { untargeted?: boolean }): void {\n        this._notifyMessageHandlers(message);\n\n        if (options && options.untargeted) {\n            return this._untargetedMessagePoster.post(message);\n        }\n\n        this._messagePoster.post(message);\n    }\n\n    private _notifyMessageHandlers(message: EmbeddedCheckoutEvent): void {\n        Object.keys(this._messageHandlers)\n            .forEach(key => {\n                const handler = this._messageHandlers[key as keyof EmbeddedCheckoutEventMap];\n\n                if (handler) {\n                    handler.call(null, message);\n                }\n            });\n    }\n\n    private _transformError(error: Error | CustomError): EmbeddedCheckoutError {\n        return {\n            message: error.message,\n            type: isCustomError(error) ? error.type : undefined,\n            subtype: isCustomError(error) ? error.subtype : undefined,\n        };\n    }\n}\n\nexport type EventCallbacks<TEventMap> = {\n    [key in keyof TEventMap]?: (event: TEventMap[key]) => void;\n};\n","import EmbeddedCheckoutMessenger from './embedded-checkout-messenger';\n\nexport default class NoopEmbeddedCheckoutMessenger implements EmbeddedCheckoutMessenger {\n    postComplete(): void {}\n\n    postError(): void {}\n\n    postFrameError(): void {}\n\n    postFrameLoaded(): void {}\n\n    postLoaded(): void {}\n\n    postSignedOut(): void {}\n\n    receiveStyles(): void {}\n}\n","import { EmbeddedCheckoutEvent, EmbeddedCheckoutEventType } from '../embedded-checkout-events';\nimport IframeEventListener from '../iframe-event-listener';\nimport IframeEventPoster from '../iframe-event-poster';\n\nimport EmbeddedCheckoutMessenger from './embedded-checkout-messenger';\nimport EmbeddedCheckoutMessengerOptions from './embedded-checkout-messenger-options';\nimport { EmbeddedContentEventMap } from './embedded-content-events';\nimport handleFrameLoadedEvent from './handle-frame-loaded-event';\nimport IframeEmbeddedCheckoutMessenger from './iframe-embedded-checkout-messenger';\nimport NoopEmbeddedCheckoutMessenger from './noop-embedded-checkout-messenger';\n\n/**\n * Create an instance of `EmbeddedCheckoutMessenger`.\n *\n * @remarks\n * The object is responsible for posting messages to the parent window from the\n * iframe when certain events have occurred. For example, when the checkout\n * form is first loaded, you should notify the parent window about it.\n *\n * The iframe can only be embedded in domains that are allowed by the store.\n *\n * ```ts\n * const messenger = createEmbeddedCheckoutMessenger({\n *     parentOrigin: 'https://some/website',\n * });\n *\n * messenger.postFrameLoaded();\n * ```\n *\n * @alpha\n * Please note that this feature is currently in an early stage of development.\n * Therefore the API is unstable and not ready for public consumption.\n *\n * @param options - Options for creating `EmbeddedCheckoutMessenger`\n * @returns - An instance of `EmbeddedCheckoutMessenger`\n */\nexport default function createEmbeddedCheckoutMessenger(options: EmbeddedCheckoutMessengerOptions): EmbeddedCheckoutMessenger {\n    const parentWindow = options.parentWindow || window.parent;\n\n    // Return a No-op messenger if it is not called inside an iframe\n    if (window === parentWindow) {\n        return new NoopEmbeddedCheckoutMessenger();\n    }\n\n    return new IframeEmbeddedCheckoutMessenger(\n        new IframeEventListener<EmbeddedContentEventMap>(options.parentOrigin),\n        new IframeEventPoster<EmbeddedCheckoutEvent>(options.parentOrigin, parentWindow),\n        new IframeEventPoster<EmbeddedCheckoutEvent>('*', parentWindow),\n        { [EmbeddedCheckoutEventType.FrameLoaded]: handleFrameLoadedEvent }\n    );\n}\n","import { isObject, union } from 'lodash';\nimport * as MessageFormat from 'messageformat';\n\nimport Logger from '../common/log/logger';\n\nimport LanguageConfig, { Locales, Translations } from './language-config';\n\nconst DEFAULT_LOCALE = 'en';\nconst KEY_PREFIX = 'optimized_checkout';\n\n/**\n * Responsible for getting language strings.\n *\n * This object can be used to retrieve language strings that are most\n * appropriate for a given locale.\n *\n * The language strings provided to the object should follow [ICU\n * MessageFormat](http://userguide.icu-project.org/formatparse/messages) syntax.\n */\nexport default class LanguageService {\n    private _locale: string;\n    private _locales: Locales;\n    private _translations: Translations;\n    private _formatters: { [key: string]: any };\n\n    /**\n     * @internal\n     */\n    constructor(\n        config: Partial<LanguageConfig>,\n        private _logger: Logger\n    ) {\n        const { locale, locales, translations } = this._transformConfig(config);\n\n        this._locale = locale;\n        this._locales = locales;\n        this._translations = translations;\n        this._formatters = {};\n    }\n\n    /**\n     * Remaps a set of language strings with a different set of keys.\n     *\n     * ```js\n     * service.mapKeys({\n     *     'new_key': 'existing_key',\n     * });\n     *\n     * console.log(service.translate('new_key'));\n     * ```\n     *\n     * @param maps - The set of language strings.\n     */\n    mapKeys(maps: { [key: string]: string }): void {\n        Object.keys(maps).forEach(key => {\n            const translationKey = `${KEY_PREFIX}.${maps[key]}`;\n\n            this._translations[`${KEY_PREFIX}.${key}`] = this._translations[translationKey];\n        });\n    }\n\n    /**\n     * Gets the preferred locale of the current customer.\n     *\n     * @returns The preferred locale code.\n     */\n    getLocale(): string {\n        return this._hasTranslations() ? this._locale : DEFAULT_LOCALE;\n    }\n\n    /**\n     * Gets a language string by a key.\n     *\n     * ```js\n     * service.translate('language_key');\n     * ```\n     *\n     * If the language string contains a placeholder, you can replace it by\n     * providing a second argument.\n     *\n     * ```js\n     * service.translate('language_key', { placeholder: 'Hello' });\n     * ```\n     *\n     * @param key - The language key.\n     * @param data - Data for replacing placeholders in the language string.\n     * @returns The translated language string.\n     */\n    translate(key: string, data: TranslationData = {}): string {\n        const prefixedKey = `${KEY_PREFIX}.${key}`;\n\n        if (typeof this._translations[prefixedKey] !== 'string') {\n            this._logger.warn(`Translation key \"${prefixedKey}\" is missing`);\n\n            return prefixedKey;\n        }\n\n        if (!this._formatters[prefixedKey]) {\n            const messageFormat = new MessageFormat(this._locales[prefixedKey]);\n\n            this._formatters[prefixedKey] = messageFormat.compile(this._translations[prefixedKey] || '');\n        }\n\n        return this._formatters[prefixedKey](this._transformData(data));\n    }\n\n    private _transformConfig(config: Partial<LanguageConfig> = {}): LanguageConfig {\n        const output: LanguageConfig = {\n            defaultTranslations: {},\n            translations: {},\n            locales: {},\n            locale: config.locale || DEFAULT_LOCALE,\n        };\n\n        const locales = config.locales || {};\n        const translations = this._flattenObject(config.translations || {});\n        const defaultTranslations = this._flattenObject(config.defaultTranslations || {});\n        const translationKeys = union(Object.keys(defaultTranslations), Object.keys(translations));\n\n        translationKeys.forEach(key => {\n            if (translations && translations[key]) {\n                output.translations[key] = translations[key];\n                output.locales[key] = locales[key] || output.locale;\n            } else {\n                output.translations[key] = defaultTranslations[key];\n                output.locales[key] = DEFAULT_LOCALE;\n            }\n        });\n\n        return output;\n    }\n\n    private _flattenObject(object: Translations, result: Translations = {}, parentKey: string = ''): Translations {\n        try {\n            Object.keys(object).forEach(key => {\n                const value = object[key];\n                const resultKey = parentKey ? `${parentKey}.${key}` : key;\n\n                if (isObject(value)) {\n                    return this._flattenObject(value as Translations, result, resultKey);\n                }\n\n                result[resultKey] = value;\n            });\n        } catch (err) {\n            this._logger.warn(`Unable to parse object: ${err}`);\n        }\n\n        return result;\n    }\n\n    private _transformData(data: TranslationData): TranslationData {\n        return Object.keys(data).reduce((result, key) => {\n            const value = data[key];\n\n            result[key] = value === null || value === undefined ? '' : value;\n\n            return result;\n        }, {} as TranslationData);\n    }\n\n    private _hasTranslations(): boolean {\n        return Object.keys(this._locales).map(key => this._locales[key])\n            .filter(code => code.split('-')[0] === this._locale.split('-')[0])\n            .length > 0;\n    }\n}\n\nexport interface TranslationData {\n    [key: string]: string | number;\n}\n","import { getDefaultLogger } from '../common/log';\n\nimport LanguageConfig from './language-config';\nimport LanguageService from './language-service';\n\n/**\n * Creates an instance of `LanguageService`.\n *\n * @remarks\n * ```js\n * const language = {{{langJson 'optimized_checkout'}}}; // `langJson` is a Handlebars helper provided by BigCommerce's Stencil template engine.\n * const service = createLanguageService(language);\n *\n * console.log(service.translate('address.city_label'));\n * ```\n *\n * @param config - A configuration object.\n * @returns An instance of `LanguageService`.\n */\nexport default function createLanguageService(config: Partial<LanguageConfig> = {}): LanguageService {\n    return new LanguageService(\n        config,\n        getDefaultLogger()\n    );\n}\n","import { InvalidArgumentError } from '../common/error/errors';\n\nimport { CurrencyConfig } from './currency';\n\nexport default class CurrencyFormatter {\n    private _decimalPlaces: number;\n    private _symbolLocation: string;\n    private _symbol: string;\n    private _thousandsSeparator: string;\n    private _decimalSeparator: string;\n\n    constructor(\n        currencySettings: CurrencyConfig\n    ) {\n        if (!currencySettings) {\n            throw new Error('Currency settings missing');\n        }\n\n        const {\n            decimalPlaces,\n            symbolLocation,\n            symbol,\n            thousandsSeparator,\n            decimalSeparator,\n        } = currencySettings;\n\n        if (\n            typeof symbolLocation !== 'string' ||\n            typeof symbol !== 'string' ||\n            typeof thousandsSeparator !== 'string' ||\n            typeof decimalSeparator !== 'string' ||\n            typeof decimalPlaces !== 'string'\n        ) {\n            throw new InvalidArgumentError('Invalid currency settings provided');\n        }\n\n        this._decimalPlaces = parseInt(decimalPlaces, 10);\n        this._symbolLocation = symbolLocation;\n        this._symbol = symbol;\n        this._thousandsSeparator = thousandsSeparator;\n        this._decimalSeparator = decimalSeparator;\n    }\n\n    format(amount?: number): string {\n        if (typeof amount !== 'number') {\n            throw new InvalidArgumentError('Invalid amount provided');\n        }\n\n        const formattedNumber = this._formatNumber(amount);\n\n        const formattedCurrency = this._formatCurrency(formattedNumber);\n\n        return amount < 0 ?\n            `-${formattedCurrency}` :\n            formattedCurrency;\n    }\n\n    private _formatNumber(amount: number): string {\n        const positiveAmount = Math.abs(amount);\n        const [ integerAmount, decimalAmount = '' ] = (this._toFixed(positiveAmount, this._decimalPlaces)).split('.');\n        const parsedIntegerAmount = integerAmount.replace(/\\B(?=(\\d{3})+(?!\\d))/g, this._thousandsSeparator);\n\n        if (this._decimalPlaces < 1) {\n            return parsedIntegerAmount;\n        }\n\n        return [\n            parsedIntegerAmount,\n            decimalAmount,\n        ].join(this._decimalSeparator);\n    }\n\n    private _formatCurrency(formattedNumber: string): string {\n        return (this._symbolLocation.toLowerCase() === 'left') ?\n            `${this._symbol}${formattedNumber}` :\n            `${formattedNumber}${this._symbol}`;\n    }\n\n    private _toFixed(value: number, precision: number): string {\n        return (+(Math.round(+(value + 'e' + precision)) + 'e' + -precision)).toFixed(precision);\n    }\n}\n","import { StoreConfig } from '../config';\n\nimport CurrencyFormatter from './currency-formatter';\n\n/**\n * Responsible for formatting and converting currencies.\n */\nexport default class CurrencyService {\n    private _customerFormatter: CurrencyFormatter;\n    private _storeFormatter: CurrencyFormatter;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _storeConfig: StoreConfig\n    ) {\n        this._customerFormatter = new CurrencyFormatter(this._storeConfig.shopperCurrency);\n        this._storeFormatter = new CurrencyFormatter(this._storeConfig.currency);\n    }\n\n    toCustomerCurrency(amount: number): string {\n        const exchangeRate = this._storeConfig.shopperCurrency.exchangeRate;\n\n        return this._customerFormatter.format(amount * exchangeRate);\n    }\n\n    toStoreCurrency(amount: number): string {\n        return this._storeFormatter.format(amount);\n    }\n}\n","import { StoreConfig } from '../config';\n\nimport CurrencyService from './currency-service';\n\n/**\n * Creates an instance of `CurrencyService`.\n *\n * @remarks\n * ```js\n * const { data } = checkoutService.getState();\n * const config = data.getConfig();\n * const checkout = data.getCheckout();\n * const currencyService = createCurrencyService(config);\n *\n * currencyService.toStoreCurrency(checkout.grandTotal);\n * currencyService.toCustomerCurrency(checkout.grandTotal);\n * ```\n *\n * @alpha\n * Please note that `CurrencyService` is currently in an early stage\n * of development. Therefore the API is unstable and not ready for public\n * consumption.\n *\n * @param config - The config object containing the currency configuration\n * @returns an instance of `CurrencyService`.\n */\nexport default function createCurrencyService(\n    config: StoreConfig\n): CurrencyService {\n    return new CurrencyService(config);\n}\n","export { createTimeout } from '@bigcommerce/request-sender';\n\nexport { createCheckoutService } from './checkout';\nexport { createCheckoutButtonInitializer } from './checkout-buttons';\nexport { embedCheckout } from './embedded-checkout';\nexport { createEmbeddedCheckoutMessenger } from './embedded-checkout/iframe-content';\nexport { createLanguageService } from './locale';\nexport { createCurrencyService } from './currency';\n","import { Checkout } from '../../../checkout';\nimport PaymentMethod from '../../payment-method';\nimport { BraintreeModuleCreator, GooglePayBraintreeSDK } from '../braintree';\n\nexport type EnvironmentType = 'PRODUCTION' | 'TEST';\ntype TokenizeType = 'AndroidPayCard' | 'CreditCard';\n\nexport interface GooglePayInitializer {\n    initialize(checkout: Checkout, paymentMethod: PaymentMethod, hasShippingAddress: boolean, publishableKey?: string): Promise<GooglePayPaymentDataRequestV2>;\n    teardown(): Promise<void>;\n    parseResponse(paymentData: GooglePaymentData): TokenizePayload;\n}\n\nexport interface GooglePayCreator extends BraintreeModuleCreator<GooglePayBraintreeSDK> {}\n\nexport interface GooglePayPaymentOptions {\n    environment: EnvironmentType;\n}\n\nexport interface GooglePayIsReadyToPayResponse {\n    result: boolean;\n    paymentMethodPresend?: boolean;\n}\n\nexport interface GooglePaySDK {\n    payments: {\n        api: {\n            PaymentsClient: {\n                new(options: GooglePayPaymentOptions): GooglePayClient;\n            },\n        },\n    };\n}\n\nexport interface GooglePayClient {\n    isReadyToPay(options: object): Promise<GooglePayIsReadyToPayResponse>;\n    loadPaymentData(paymentDataRequest: GooglePayPaymentDataRequestV2): Promise<GooglePaymentData>;\n    createButton(options: { [key: string]: string | object }): HTMLElement;\n}\n\nexport interface GooglePayHostWindow extends Window {\n    google?: GooglePaySDK;\n}\n\nexport interface TokenizePayload {\n    nonce: string;\n    details: {\n        cardType: string;\n        lastFour: string;\n        lastTwo?: string;\n    };\n    description?: string;\n    type: TokenizeType;\n    binData?: {\n        commercial: string;\n        countryOfIssuance: string;\n        debit: string;\n        durbinRegulated: string;\n        healthcare: string;\n        issuingBank: string;\n        payroll: string;\n        prepaid: string;\n        productId: string;\n    };\n}\n\nexport interface GooglePaymentData {\n    apiVersion: number;\n    apiVersionMinor: number;\n    paymentMethodData: {\n        description: string;\n        info: {\n            cardDetails: string;\n            cardNetwork: string;\n            billingAddress: GooglePayAddress;\n        };\n        tokenizationData: {\n            token: string;\n            type: string;\n        }\n        type: string;\n    };\n    shippingAddress: GooglePayAddress;\n    email: string;\n}\n\nexport interface GooglePayAddress {\n    address1: string;\n    address2: string;\n    address3: string;\n    administrativeArea: string;\n    companyName: string;\n    countryCode: string;\n    locality: string;\n    name: string;\n    postalCode: string;\n    sortingCode: string;\n    phoneNumber: string;\n}\n\nexport interface GooglePaymentsError {\n    statusCode: string;\n    statusMessage?: string;\n}\n\nexport interface PaymentMethodData {\n    methodId: string;\n    paymentData: {\n        method: string,\n        nonce: string,\n        cardInformation: {\n            type: string,\n            number: string,\n        },\n    };\n}\n\nexport enum ButtonType {\n    Long = 'long',\n    Short = 'short',\n}\nexport enum ButtonColor {\n    Default = 'default',\n    Black = 'black',\n    White = 'white',\n}\n\nexport interface GooglePayPaymentDataRequestV2 {\n    apiVersion: number;\n    apiVersionMinor: number;\n    merchantInfo: {\n        authJwt?: string;\n        merchantId?: string;\n        merchantName?: string;\n    };\n    allowedPaymentMethods: [{\n        type: string;\n        parameters: {\n            allowedAuthMethods: string[];\n            allowedCardNetworks: string[];\n            allowPrepaidCards?: boolean;\n            billingAddressRequired?: boolean;\n            billingAddressParameters?: {\n                format?: string;\n                phoneNumberRequired?: boolean;\n            };\n        },\n        tokenizationSpecification?: {\n            type: string;\n            parameters: {\n                gateway: string;\n                gatewayMerchantId?: string;\n                'braintree:apiVersion'?: string;\n                'braintree:clientKey'?: string;\n                'braintree:merchantId'?: string;\n                'braintree:sdkVersion'?: string;\n                'braintree:authorizationFingerprint'?: string;\n                'stripe:version'?: string;\n                'stripe:publishableKey'?: string;\n            };\n        };\n    }];\n    transactionInfo: {\n        currencyCode: string;\n        totalPriceStatus: string;\n        totalPrice?: string;\n        checkoutOption?: string;\n    };\n    emailRequired?: boolean;\n    shippingAddressRequired?: boolean;\n    shippingAddressParameters?: {\n        allowedCountryCodes?: string[];\n        phoneNumberRequired?: boolean;\n    };\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { AddressRequestBody } from '../../../address';\nimport { BillingAddressActionCreator, BillingAddressUpdateRequestBody } from '../../../billing';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n} from '../../../common/error/errors';\nimport { toFormUrlEncoded } from '../../../common/http-request/';\nimport { RemoteCheckoutSynchronizationError } from '../../../remote-checkout/errors';\nimport { ConsignmentActionCreator } from '../../../shipping';\nimport PaymentMethodInvalidError from '../../errors/payment-method-invalid-error';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\n\nimport {\n    ButtonColor,\n    ButtonType,\n    EnvironmentType,\n    GooglePaymentData,\n    GooglePayAddress,\n    GooglePayClient,\n    GooglePayInitializer,\n    GooglePayPaymentDataRequestV2,\n    GooglePaySDK,\n    TokenizePayload\n} from './googlepay';\nimport GooglePayScriptLoader from './googlepay-script-loader';\n\nexport default class GooglePayPaymentProcessor {\n    private _googlePayClient?: GooglePayClient;\n    private _methodId?: string;\n    private _paymentDataRequest?: GooglePayPaymentDataRequestV2;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _googlePayScriptLoader: GooglePayScriptLoader,\n        private _googlePayInitializer: GooglePayInitializer,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _consigmentActionCreator: ConsignmentActionCreator,\n        private _requestSender: RequestSender\n    ) {}\n\n    initialize(methodId: string): Promise<void> {\n        this._methodId = methodId;\n\n        return this._configureWallet();\n    }\n\n    deinitialize(): Promise<void> {\n        return this._googlePayInitializer.teardown();\n    }\n\n    createButton(\n        onClick: (event: Event) => Promise<void>,\n        buttonType: ButtonType = ButtonType.Short,\n        buttonColor: ButtonColor = ButtonColor.Default\n    ): HTMLElement {\n        if (!this._googlePayClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._googlePayClient.createButton({\n            buttonColor,\n            buttonType,\n            onClick,\n        });\n    }\n\n    displayWallet(): Promise<GooglePaymentData> {\n        if (!this._googlePayClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._googlePayClient.loadPaymentData(this._getPaymentDataRequest());\n    }\n\n    handleSuccess(paymentData: GooglePaymentData): Promise<InternalCheckoutSelectors> {\n        return this._postForm(this._googlePayInitializer.parseResponse(paymentData))\n            .then(() => this._updateBillingAddress(paymentData));\n    }\n\n    updateShippingAddress(shippingAddress: GooglePayAddress): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consigmentActionCreator.updateAddress(this._mapGooglePayAddressToShippingAddress(shippingAddress))\n        );\n    }\n\n    private _configureWallet(): Promise<void> {\n        const methodId = this._getMethodId();\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n                const checkout = state.checkout.getCheckout();\n                const hasShippingAddress = !!state.shippingAddress.getShippingAddress();\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                const { testMode } = paymentMethod.config;\n\n                return Promise.all([\n                    this._googlePayScriptLoader.load(),\n                    this._googlePayInitializer.initialize(checkout, paymentMethod, hasShippingAddress),\n                ]).then(([googlePay, paymentDataRequest]) => {\n                    this._googlePayClient = this._getGooglePayClient(googlePay, testMode);\n                    this._paymentDataRequest = paymentDataRequest;\n\n                    return this._googlePayClient.isReadyToPay({\n                        allowedPaymentMethods: [\n                            {\n                                type: paymentDataRequest.allowedPaymentMethods[0].type,\n                                parameters: {\n                                    allowedAuthMethods: paymentDataRequest.allowedPaymentMethods[0].parameters.allowedAuthMethods,\n                                    allowedCardNetworks: paymentDataRequest.allowedPaymentMethods[0].parameters.allowedCardNetworks,\n                                },\n                            },\n                        ],\n                        apiVersion: paymentDataRequest.apiVersion,\n                        apiVersionMinor: paymentDataRequest.apiVersionMinor,\n                    }).then(response => {\n                        if (response.result) {\n                            return;\n                        }\n\n                        throw new PaymentMethodInvalidError();\n                    });\n                });\n            });\n    }\n\n    private _getCardInformation(cardInformation: { cardType: string, lastFour: string }) {\n        return {\n            type: cardInformation.cardType,\n            number: cardInformation.lastFour,\n        };\n    }\n\n    private _getPaymentDataRequest(): GooglePayPaymentDataRequestV2 {\n        if (!this._paymentDataRequest) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._paymentDataRequest;\n    }\n\n    private _getGooglePayClient(google: GooglePaySDK, testMode?: boolean): GooglePayClient {\n        if (testMode === undefined) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const environment: EnvironmentType = testMode ? 'TEST' : 'PRODUCTION';\n\n        return new google.payments.api.PaymentsClient({ environment });\n    }\n\n    private _getMethodId(): string {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._methodId;\n    }\n\n    private _mapGooglePayAddressToBillingAddress(paymentData: GooglePaymentData, id: string): BillingAddressUpdateRequestBody {\n        return {\n            id,\n            firstName: paymentData.paymentMethodData.info.billingAddress.name.split(' ').slice(0, -1).join(' '),\n            lastName: paymentData.paymentMethodData.info.billingAddress.name.split(' ').slice(-1).join(' '),\n            company: paymentData.paymentMethodData.info.billingAddress.companyName,\n            address1: paymentData.paymentMethodData.info.billingAddress.address1,\n            address2: paymentData.paymentMethodData.info.billingAddress.address2 + paymentData.paymentMethodData.info.billingAddress.address3,\n            city: paymentData.paymentMethodData.info.billingAddress.locality,\n            stateOrProvince: paymentData.paymentMethodData.info.billingAddress.administrativeArea,\n            stateOrProvinceCode: paymentData.paymentMethodData.info.billingAddress.administrativeArea,\n            postalCode: paymentData.paymentMethodData.info.billingAddress.postalCode,\n            countryCode: paymentData.paymentMethodData.info.billingAddress.countryCode,\n            phone: paymentData.paymentMethodData.info.billingAddress.phoneNumber,\n            customFields: [],\n            email: paymentData.email,\n        };\n    }\n\n    private _mapGooglePayAddressToShippingAddress(address: GooglePayAddress): AddressRequestBody {\n        return {\n            firstName: address.name.split(' ').slice(0, -1).join(' '),\n            lastName: address.name.split(' ').slice(-1).join(' '),\n            company: address.companyName,\n            address1: address.address1,\n            address2: address.address2 + address.address3,\n            city: address.locality,\n            stateOrProvince: address.administrativeArea,\n            stateOrProvinceCode: address.administrativeArea,\n            postalCode: address.postalCode,\n            countryCode: address.countryCode,\n            phone: address.phoneNumber,\n            customFields: [],\n        };\n    }\n\n    private _postForm(postPaymentData: TokenizePayload): Promise<Response<void>> {\n        const cardInformation = postPaymentData.details;\n\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: toFormUrlEncoded({\n                payment_type: postPaymentData.type,\n                nonce: postPaymentData.nonce,\n                provider: this._getMethodId(),\n                action: 'set_external_checkout',\n                card_information: this._getCardInformation(cardInformation),\n            }),\n        });\n    }\n\n    private _updateBillingAddress(paymentData: GooglePaymentData): Promise<InternalCheckoutSelectors> {\n        const remoteBillingAddress = this._store.getState().billingAddress.getBillingAddress();\n\n        if (!remoteBillingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n        }\n\n        const googlePayAddressMapped = this._mapGooglePayAddressToBillingAddress(paymentData, remoteBillingAddress.id);\n\n        return this._store.dispatch(\n            this._billingAddressActionCreator.updateAddress(googlePayAddressMapped)\n        );\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { GooglePayHostWindow, GooglePaySDK } from './googlepay';\n\nexport default class GooglePayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: GooglePayHostWindow = window\n    ) {}\n\n    load(): Promise<GooglePaySDK> {\n        return this._scriptLoader\n            .loadScript('https://pay.google.com/gp/p/js/pay.js')\n            .then(() => {\n                if (!this._window.google) {\n                    throw new StandardError();\n                }\n\n                return this._window.google;\n            });\n    }\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../../../billing';\nimport { CheckoutRequestSender, CheckoutStore } from '../../../checkout';\nimport { ConsignmentActionCreator, ConsignmentRequestSender } from '../../../shipping';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport PaymentMethodRequestSender from '../../payment-method-request-sender';\n\nimport { GooglePayInitializer } from './googlepay';\nimport GooglePayPaymentProcessor from './googlepay-payment-processor';\nimport GooglePayScriptLoader from './googlepay-script-loader';\n\nexport default function createGooglePayPaymentProcessor(store: CheckoutStore, initializer: GooglePayInitializer): GooglePayPaymentProcessor {\n    const requestSender = createRequestSender();\n    const scriptLoader = getScriptLoader();\n\n    return new GooglePayPaymentProcessor(\n        store,\n        new PaymentMethodActionCreator(\n            new PaymentMethodRequestSender(requestSender)\n        ),\n        new GooglePayScriptLoader(scriptLoader),\n        initializer,\n        new BillingAddressActionCreator(\n            new BillingAddressRequestSender(requestSender)\n        ),\n        new ConsignmentActionCreator(\n            new ConsignmentRequestSender(requestSender),\n            new CheckoutRequestSender(requestSender)\n        ),\n        requestSender\n    );\n}\n","import { keyBy, reduce, some } from 'lodash';\n\nimport { Checkout } from '../checkout';\nimport { mapToInternalCoupon, mapToInternalGiftCertificate } from '../coupon';\nimport { mapToDiscountNotifications } from '../promotion';\n\nimport { AmountTransformer } from '.';\nimport InternalCart from './internal-cart';\nimport mapToInternalLineItems from './map-to-internal-line-items';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalCart(checkout: Checkout): InternalCart {\n    const decimalPlaces = checkout.cart.currency.decimalPlaces;\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: checkout.cart.id,\n        items: mapToInternalLineItems(checkout.cart.lineItems, decimalPlaces),\n        currency: checkout.cart.currency.code,\n        coupon: {\n            discountedAmount: reduce(checkout.cart.coupons, (sum, coupon) => {\n                return sum + coupon.discountedAmount;\n            }, 0),\n            coupons: checkout.cart.coupons.map(mapToInternalCoupon),\n        },\n        discount: {\n            amount: checkout.cart.discountAmount,\n            integerAmount: amountTransformer.toInteger(checkout.cart.discountAmount),\n        },\n        discountNotifications: mapToDiscountNotifications(checkout.promotions),\n        giftCertificate: {\n            totalDiscountedAmount: reduce(checkout.giftCertificates, (sum, certificate) => {\n                return sum + certificate.used;\n            }, 0),\n            appliedGiftCertificates: keyBy(checkout.giftCertificates.map(mapToInternalGiftCertificate), 'code'),\n        },\n        shipping: {\n            amount: checkout.shippingCostTotal,\n            integerAmount: amountTransformer.toInteger(checkout.shippingCostTotal),\n            amountBeforeDiscount: checkout.shippingCostBeforeDiscount,\n            integerAmountBeforeDiscount: amountTransformer.toInteger(checkout.shippingCostBeforeDiscount),\n            required: some(checkout.cart.lineItems.physicalItems, lineItem => lineItem.isShippingRequired),\n        },\n        subtotal: {\n            amount: checkout.subtotal,\n            integerAmount: amountTransformer.toInteger(checkout.subtotal),\n        },\n        storeCredit: {\n            amount: checkout.customer ? checkout.customer.storeCredit : 0,\n        },\n        taxSubtotal: {\n            amount: checkout.taxTotal,\n            integerAmount: amountTransformer.toInteger(checkout.taxTotal),\n        },\n        taxes: checkout.taxes,\n        taxTotal: {\n            amount: checkout.taxTotal,\n            integerAmount: amountTransformer.toInteger(checkout.taxTotal),\n        },\n        handling: {\n            amount: checkout.handlingCostTotal,\n            integerAmount: amountTransformer.toInteger(checkout.handlingCostTotal),\n        },\n        grandTotal: {\n            amount: checkout.grandTotal,\n            integerAmount: amountTransformer.toInteger(checkout.grandTotal),\n        },\n    };\n}\n","import { DiscountNotification } from '../discount';\n\nimport { Promotion } from '.';\n\nexport default function mapToDiscountNotifications(promotions?: Promotion[]): DiscountNotification[] {\n    const notifications: DiscountNotification[] = [];\n\n    (promotions || []).forEach(promotion => {\n        (promotion.banners || []).forEach(banner => {\n            notifications.push({\n                placeholders: [],\n                discountType: null,\n                message: '',\n                messageHtml: banner.text,\n            });\n        });\n    });\n\n    return notifications;\n}\n"],"sourceRoot":""}